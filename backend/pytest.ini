# aclue Backend Test Configuration
# 
# Comprehensive pytest configuration for enterprise-grade testing of the aclue backend.
# This configuration supports unit testing, integration testing, database testing,
# and performance testing with proper isolation and reporting.
#
# Testing Strategy Reference:
# Based on FastAPI testing documentation patterns from docs/fastapi.txt
# and Supabase database testing best practices from docs/supabase.txt

[tool:pytest]
minversion = 6.0
addopts = 
    -ra
    -q 
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=term-missing
    --cov-report=html:coverage_html
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --tb=short
    --maxfail=10
    -p no:warnings

testpaths = tests

# Test markers for categorising and running specific test types
# Usage: pytest -m "unit" to run only unit tests
# Usage: pytest -m "integration" to run only integration tests  
# Usage: pytest -m "not slow" to exclude performance tests
markers =
    unit: Unit tests with fast execution and no external dependencies
    integration: Integration tests requiring database or external services
    database: Database-specific tests requiring Supabase connection
    auth: Authentication and authorisation testing
    api: API endpoint testing with TestClient
    performance: Performance and load testing (slow execution)
    security: Security testing including RLS policies and validation
    e2e: End-to-end testing scenarios
    slow: Tests with execution time > 5 seconds
    smoke: Critical functionality smoke tests for CI/CD

# Python test discovery configuration
python_files = test_*.py *_test.py
python_functions = test_*
python_classes = Test*

# Async testing configuration for FastAPI async endpoints
asyncio_mode = auto

# Test environment configuration
env = 
    TESTING=true
    LOG_LEVEL=DEBUG
    DATABASE_URL=postgresql://postgres:postgres@localhost:5432/aclue_test
    SUPABASE_URL=https://test.supabase.co
    SUPABASE_ANON_KEY=test_anon_key  
    SUPABASE_SERVICE_ROLE_KEY=test_service_key
    REDIS_URL=redis://localhost:6379/1
    DISABLE_AUTH=false
    RATE_LIMITING_ENABLED=false

# Timeout configuration to prevent hanging tests
timeout = 300
timeout_method = thread

# Filtering configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Coverage configuration
[coverage:run]
source = app
omit = 
    app/tests/*
    app/main.py
    */migrations/*
    */venv/*
    */virtualenv/*
    */.tox/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Performance testing configuration
[tool:pytest-benchmark]
min_rounds = 10
max_time = 5.0
warmup = true
warmup_iterations = 3