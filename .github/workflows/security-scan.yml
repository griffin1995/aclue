# =============================================================================
# aclue Platform Security Scanning Pipeline
# =============================================================================
#
# Comprehensive security scanning workflow for the aclue platform covering:
# - Static Application Security Testing (SAST)
# - Dependency vulnerability scanning
# - Secret detection and validation
# - Container security analysis
# - Infrastructure security checks
#
# Triggers:
# - Push to main branch (production deployments)
# - Pull requests (pre-merge validation)
# - Daily scheduled scans (04:00 UTC)
# - Manual workflow dispatch
#
# =============================================================================

name: '🔒 Security Scanning Pipeline'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily security scan at 04:00 UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  SCAN_RESULTS_PATH: 'security-reports'

jobs:
  # ==========================================================================
  # JOB: Pre-flight Security Validation
  # ==========================================================================
  preflight:
    name: '🚦 Pre-flight Security Checks'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_scan_frontend: ${{ steps.changes.outputs.frontend }}
      should_scan_backend: ${{ steps.changes.outputs.backend }}
      should_scan_docker: ${{ steps.changes.outputs.docker }}

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '🔍 Detect Changes'
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'web/**'
              - 'package*.json'
            backend:
              - 'backend/**'
              - 'requirements*.txt'
            docker:
              - '**/Dockerfile*'
              - 'docker-compose*.yml'
              - '.dockerignore'

      - name: '📊 Scan Summary'
        run: |
          echo "🔍 Security Scan Configuration:"
          echo "  Frontend Scan: ${{ steps.changes.outputs.frontend }}"
          echo "  Backend Scan: ${{ steps.changes.outputs.backend }}"
          echo "  Docker Scan: ${{ steps.changes.outputs.docker }}"
          echo "  Trigger: ${{ github.event_name }}"
          echo "  Branch: ${{ github.ref_name }}"

  # ==========================================================================
  # JOB: Secret Detection and Validation
  # ==========================================================================
  secret-detection:
    name: '🔐 Secret Detection'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: preflight

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '🔍 GitLeaks Secret Scan'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: '🔍 TruffleHog Secret Scan'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: '📊 Create Security Reports Directory'
        run: mkdir -p ${{ env.SCAN_RESULTS_PATH }}

      - name: '🔍 Detect Secrets Baseline Check'
        run: |
          pip install detect-secrets
          if [ -f .secrets.baseline ]; then
            detect-secrets audit .secrets.baseline
            detect-secrets scan --baseline .secrets.baseline
          else
            echo "⚠️ No secrets baseline found - creating one"
            detect-secrets scan --all-files --exclude-files '.*\.git/.*|.*node_modules/.*|.*\.secrets\.baseline' > ${{ env.SCAN_RESULTS_PATH }}/secrets-scan.json
          fi

      - name: '📤 Upload Secret Scan Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: ${{ env.SCAN_RESULTS_PATH }}/
          retention-days: 30

  # ==========================================================================
  # JOB: Frontend Security Analysis
  # ==========================================================================
  frontend-security:
    name: '🌐 Frontend Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [preflight, secret-detection]
    if: needs.preflight.outputs.should_scan_frontend == 'true' || github.event_name == 'schedule'

    defaults:
      run:
        working-directory: ./web

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4

      - name: '🟢 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: '📦 Install Dependencies'
        run: npm ci --prefer-offline --no-audit

      - name: '🔍 ESLint Security Analysis'
        run: |
          npm install --no-save eslint-plugin-security eslint-plugin-no-secrets
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../security-reports/eslint-security.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx --format unix || true

      - name: '🔍 npm Audit Security Check'
        run: |
          mkdir -p ../security-reports
          npm audit --audit-level=moderate --json > ../security-reports/npm-audit.json || true
          npm audit --audit-level=moderate || true

      - name: '🔍 Semgrep Security Analysis'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
        env:
          SEMGREP_RULES: p/security-audit
          SEMGREP_TIMEOUT: 300

      - name: '🔍 Snyk Security Scan'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json --file=web/package.json

      - name: '📊 TypeScript Security Check'
        run: |
          npx tsc --noEmit --strict || echo "⚠️ TypeScript strict mode warnings detected"

      - name: '📤 Upload Frontend Security Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-results
          path: security-reports/
          retention-days: 30

  # ==========================================================================
  # JOB: Backend Security Analysis
  # ==========================================================================
  backend-security:
    name: '🐍 Backend Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [preflight, secret-detection]
    if: needs.preflight.outputs.should_scan_backend == 'true' || github.event_name == 'schedule'

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4

      - name: '🐍 Setup Python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: '📦 Install Dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety semgrep

      - name: '🔍 Bandit Security Analysis'
        run: |
          mkdir -p ../security-reports
          bandit -r . -f json -o ../security-reports/bandit-report.json || true
          bandit -r . -ll --exclude tests/ || true

      - name: '🔍 Safety Dependency Check'
        run: |
          safety check --json --output ../security-reports/safety-report.json || true
          safety check --short-report || true

      - name: '🔍 Semgrep Python Security'
        run: |
          semgrep --config=p/python --json --output=../security-reports/semgrep-python.json . || true
          semgrep --config=p/python . || true

      - name: '🔍 Pip Audit Security Check'
        run: |
          pip install pip-audit
          pip-audit --format=json --output=../security-reports/pip-audit.json || true
          pip-audit || true

      - name: '🔍 CodeQL Analysis'
        uses: github/codeql-action/analyze@v3
        with:
          languages: python
          queries: security-and-quality

      - name: '📤 Upload Backend Security Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-security-results
          path: security-reports/
          retention-days: 30

  # ==========================================================================
  # JOB: Docker Security Analysis
  # ==========================================================================
  docker-security:
    name: '🐳 Docker Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [preflight, secret-detection]
    if: needs.preflight.outputs.should_scan_docker == 'true' || github.event_name == 'schedule'

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4

      - name: '🐳 Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: '🔍 Hadolint Dockerfile Linting'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: backend/Dockerfile
          format: sarif
          output-file: security-reports/hadolint.sarif

      - name: '🏗️ Build Docker Image for Scanning'
        run: |
          docker build -t aclue-backend:scan -f backend/Dockerfile backend/

      - name: '🔍 Trivy Container Security Scan'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aclue-backend:scan'
          format: 'sarif'
          output: 'security-reports/trivy-container.sarif'

      - name: '🔍 Trivy Filesystem Security Scan'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'security-reports/trivy-filesystem.sarif'

      - name: '🔍 Docker Scout Security Analysis'
        uses: docker/scout-action@v1
        if: github.event_name == 'push' || github.event_name == 'schedule'
        with:
          command: cves
          image: aclue-backend:scan
          sarif-file: security-reports/docker-scout.sarif
          summary: true

      - name: '📤 Upload Docker Security Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-results
          path: security-reports/
          retention-days: 30

      - name: '📤 Upload SARIF Results to GitHub Security'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-reports/

  # ==========================================================================
  # JOB: Infrastructure Security Analysis
  # ==========================================================================
  infrastructure-security:
    name: '🏗️ Infrastructure Security'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: preflight

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4

      - name: '🔍 Checkov IaC Security Scan'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: security-reports/checkov.sarif

      - name: '🔍 Kubernetes Security Analysis'
        if: hashFiles('k8s/*.yaml') != ''
        run: |
          mkdir -p security-reports
          # Install kube-score for Kubernetes security analysis
          wget -O kube-score https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
          chmod +x kube-score
          ./kube-score score k8s/*.yaml > security-reports/kube-score.txt || true

      - name: '🔍 GitHub Actions Security'
        run: |
          mkdir -p security-reports
          # Check for potential security issues in GitHub Actions workflows
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "🔍 Analyzing $file"
            # Check for hardcoded secrets or suspicious patterns
            grep -n -i "password\|secret\|token\|key" "$file" || true
          done > security-reports/github-actions-analysis.txt

      - name: '📤 Upload Infrastructure Security Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-security-results
          path: security-reports/
          retention-days: 30

  # ==========================================================================
  # JOB: Security Report Consolidation
  # ==========================================================================
  security-report:
    name: '📊 Security Report Generation'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [secret-detection, frontend-security, backend-security, docker-security, infrastructure-security]
    if: always()

    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4

      - name: '📥 Download All Security Results'
        uses: actions/download-artifact@v4
        with:
          path: all-security-reports/

      - name: '📊 Generate Consolidated Security Report'
        run: |
          mkdir -p consolidated-security-report

          echo "# 🔒 aclue Platform Security Scan Report" > consolidated-security-report/security-summary.md
          echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> consolidated-security-report/security-summary.md
          echo "Commit: ${{ github.sha }}" >> consolidated-security-report/security-summary.md
          echo "Branch: ${{ github.ref_name }}" >> consolidated-security-report/security-summary.md
          echo "" >> consolidated-security-report/security-summary.md

          echo "## 📋 Scan Summary" >> consolidated-security-report/security-summary.md
          echo "" >> consolidated-security-report/security-summary.md

          # Count findings from each scan type
          if [ -d "all-security-reports/secret-scan-results" ]; then
            echo "✅ Secret Detection: Completed" >> consolidated-security-report/security-summary.md
          fi

          if [ -d "all-security-reports/frontend-security-results" ]; then
            echo "✅ Frontend Security: Completed" >> consolidated-security-report/security-summary.md
          fi

          if [ -d "all-security-reports/backend-security-results" ]; then
            echo "✅ Backend Security: Completed" >> consolidated-security-report/security-summary.md
          fi

          if [ -d "all-security-reports/docker-security-results" ]; then
            echo "✅ Container Security: Completed" >> consolidated-security-report/security-summary.md
          fi

          if [ -d "all-security-reports/infrastructure-security-results" ]; then
            echo "✅ Infrastructure Security: Completed" >> consolidated-security-report/security-summary.md
          fi

          echo "" >> consolidated-security-report/security-summary.md
          echo "## 🔗 Detailed Reports" >> consolidated-security-report/security-summary.md
          echo "Individual scan results are available in the workflow artifacts." >> consolidated-security-report/security-summary.md

          # Archive all results
          tar -czf consolidated-security-report/all-security-results.tar.gz all-security-reports/

      - name: '📤 Upload Consolidated Security Report'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: consolidated-security-report
          path: consolidated-security-report/
          retention-days: 90

      - name: '📊 Security Scan Status'
        run: |
          echo "🔒 Security scanning pipeline completed"
          echo "📊 Reports generated and uploaded to artifacts"
          echo "🔍 Check the consolidated security report for detailed findings"

          # Set exit code based on critical findings (implement logic as needed)
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
            echo "🚨 Production deployment - strict security validation"
            # Add logic to fail on critical/high severity findings
          fi

  # ==========================================================================
  # JOB: Security Notification
  # ==========================================================================
  security-notification:
    name: '🚨 Security Notifications'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [security-report]
    if: always() && (failure() || needs.security-report.result == 'failure')

    steps:
      - name: '🚨 Security Alert'
        run: |
          echo "🚨 Security scan detected issues requiring attention"
          echo "📊 Check the security report artifacts for detailed findings"
          echo "🔧 Review and address security findings before deployment"
