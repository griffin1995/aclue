{"version":3,"names":["NeuralNetworkBackground","cov_1675zoult8","f","s","default","_default","nodeCount","b","connectionDistance","animationSpeed","colors","primary","secondary","accent","connections","canvasRef","_react","useRef","animationRef","nodesRef","dimensions","setDimensions","useState","width","height","useEffect","updateDimensions","window","innerWidth","innerHeight","addEventListener","removeEventListener","nodes","nodeTypes","i","push","id","x","Math","random","y","vx","vy","size","opacity","pulsePhase","PI","type","floor","length","current","canvas","ctx","getContext","animate","clearRect","hexToRgba","hex","alpha","r","parseInt","slice","g","forEach","node","max","min","sin","j","nodeA","nodeB","dx","dy","distance","sqrt","from","to","strength","connection","beginPath","moveTo","lineTo","gradient","createLinearGradient","addColorStop","strokeStyle","lineWidth","stroke","arc","color","createRadialGradient","fillStyle","fill","requestAnimationFrame","cancelAnimationFrame","_jsxruntime","jsx","ref","className","style","zIndex","background"],"sources":["/home/jack/Documents/aclue-preprod/web/src/components/ui/NeuralNetworkBackground.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface Node {\n  id: number;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  size: number;\n  opacity: number;\n  pulsePhase: number;\n  type: 'primary' | 'secondary' | 'accent';\n}\n\ninterface Connection {\n  from: Node;\n  to: Node;\n  opacity: number;\n  strength: number;\n}\n\ninterface NeuralNetworkBackgroundProps {\n  nodeCount?: number;\n  connectionDistance?: number;\n  animationSpeed?: number;\n  colors?: {\n    primary: string;\n    secondary: string;\n    accent: string;\n    connections: string;\n  };\n}\n\nexport const NeuralNetworkBackground: React.FC<NeuralNetworkBackgroundProps> = ({\n  nodeCount = 80,\n  connectionDistance = 150,\n  animationSpeed = 0.5,\n  colors = {\n    primary: '#3b82f6',\n    secondary: '#8b5cf6',\n    accent: '#06b6d4',\n    connections: '#3b82f6'\n  }\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const nodesRef = useRef<Node[]>([]);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const updateDimensions = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n\n  // Initialize nodes\n  useEffect(() => {\n    if (dimensions.width === 0 || dimensions.height === 0) return;\n\n    const nodes: Node[] = [];\n    const nodeTypes: Array<'primary' | 'secondary' | 'accent'> = ['primary', 'secondary', 'accent'];\n\n    for (let i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        x: Math.random() * dimensions.width,\n        y: Math.random() * dimensions.height,\n        vx: (Math.random() - 0.5) * animationSpeed,\n        vy: (Math.random() - 0.5) * animationSpeed,\n        size: Math.random() * 4 + 2,\n        opacity: Math.random() * 0.7 + 0.3,\n        pulsePhase: Math.random() * Math.PI * 2,\n        type: nodeTypes[Math.floor(Math.random() * nodeTypes.length)] as \"primary\" | \"secondary\" | \"accent\"\n      });\n    }\n\n    nodesRef.current = nodes;\n  }, [dimensions, nodeCount, animationSpeed]);\n\n  // Animation loop\n  useEffect(() => {\n    if (!canvasRef.current || dimensions.width === 0 || dimensions.height === 0) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    const animate = () => {\n      ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n      // Helper function to convert hex to rgba\n      const hexToRgba = (hex: string, alpha: number) => {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n      };\n\n      // Update nodes\n      nodesRef.current.forEach(node => {\n        // Update position\n        node.x += node.vx;\n        node.y += node.vy;\n\n        // Bounce off edges\n        if (node.x <= 0 || node.x >= dimensions.width) {\n          node.vx *= -1;\n          node.x = Math.max(0, Math.min(dimensions.width, node.x));\n        }\n        if (node.y <= 0 || node.y >= dimensions.height) {\n          node.vy *= -1;\n          node.y = Math.max(0, Math.min(dimensions.height, node.y));\n        }\n\n        // Update pulse\n        node.pulsePhase += 0.02;\n        node.opacity = 0.3 + 0.4 * Math.sin(node.pulsePhase);\n      });\n\n      // Find connections\n      const connections: Connection[] = [];\n      for (let i = 0; i < nodesRef.current.length; i++) {\n        for (let j = i + 1; j < nodesRef.current.length; j++) {\n          const nodeA = nodesRef.current[i];\n          const nodeB = nodesRef.current[j];\n\n          if (!nodeA || !nodeB) continue;\n\n          const dx = nodeA.x - nodeB.x;\n          const dy = nodeA.y - nodeB.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < connectionDistance) {\n            const opacity = Math.max(0, 1 - distance / connectionDistance);\n            connections.push({\n              from: nodeA,\n              to: nodeB,\n              opacity: opacity * 0.3,\n              strength: opacity\n            });\n          }\n        }\n      }\n\n      // Draw connections\n      connections.forEach(connection => {\n        ctx.beginPath();\n        ctx.moveTo(connection.from.x, connection.from.y);\n        ctx.lineTo(connection.to.x, connection.to.y);\n        \n        // Create gradient for connection\n        const gradient = ctx.createLinearGradient(\n          connection.from.x, connection.from.y,\n          connection.to.x, connection.to.y\n        );\n        \n        gradient.addColorStop(0, hexToRgba(colors.connections, connection.opacity));\n        gradient.addColorStop(0.5, hexToRgba(colors.accent, connection.opacity * 0.5));\n        gradient.addColorStop(1, hexToRgba(colors.connections, connection.opacity));\n        \n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = connection.strength * 1.5;\n        ctx.stroke();\n      });\n\n      // Draw nodes\n      nodesRef.current.forEach(node => {\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\n        \n        // Get color based on type\n        let color = colors.primary;\n        if (node.type === 'secondary') color = colors.secondary;\n        if (node.type === 'accent') color = colors.accent;\n        \n        // Create radial gradient for glow effect\n        const gradient = ctx.createRadialGradient(\n          node.x, node.y, 0,\n          node.x, node.y, node.size * 3\n        );\n        \n        gradient.addColorStop(0, hexToRgba(color, node.opacity));\n        gradient.addColorStop(0.3, hexToRgba(color, node.opacity * 0.5));\n        gradient.addColorStop(1, hexToRgba(color, 0));\n        \n        ctx.fillStyle = gradient;\n        ctx.fill();\n        \n        // Inner bright core\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, node.size * 0.4, 0, Math.PI * 2);\n        ctx.fillStyle = hexToRgba(color, Math.min(1, node.opacity * 1.5));\n        ctx.fill();\n      });\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [dimensions, connectionDistance, colors]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed inset-0 w-full h-full pointer-events-none\"\n      style={{\n        zIndex: -1,\n        background: 'radial-gradient(ellipse at center, rgba(59, 130, 246, 0.05) 0%, rgba(139, 92, 246, 0.05) 35%, rgba(6, 182, 212, 0.05) 70%, transparent 100%)'\n      }}\n    />\n  );\n};\n\nexport default NeuralNetworkBackground;"],"mappingsiCaA,uBAAuB,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAvBH,uBAAA;;EAqMbI,OAAuC,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAvCE,QAAA;;;;;;;;yEAtOmD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiC5C,MAAML,uBAAA,GAAkEA,CAAC;EAC9EM,SAAA;EAAA;EAAA,CAAAL,cAAA,GAAAM,CAAA,WAAY,EAAE;EACdC,kBAAA;EAAA;EAAA,CAAAP,cAAA,GAAAM,CAAA,WAAqB,GAAG;EACxBE,cAAA;EAAA;EAAA,CAAAR,cAAA,GAAAM,CAAA,WAAiB,GAAG;EACpBG,MAAA;EAAA;EAAA,CAAAT,cAAA,GAAAM,CAAA,WAAS;IACPI,OAAA,EAAS;IACTC,SAAA,EAAW;IACXC,MAAA,EAAQ;IACRC,WAAA,EAAa;EACf,CAAC;AAAA,CACF;EAAA;EAAAb,cAAA,GAAAC,CAAA;EACC,MAAMa,SAAA;EAAA;EAAA,CAAAd,cAAA,GAAAE,CAAA,QAAY,IAAAa,MAAA,CAAAC,MAAM,EAAoB;EAC5C,MAAMC,YAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAe,IAAAa,MAAA,CAAAC,MAAM;EAC3B,MAAME,QAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAW,IAAAa,MAAA,CAAAC,MAAM,EAAS,EAAE;EAClC,MAAM,CAACG,UAAA,EAAYC,aAAA,CAAc;EAAA;EAAA,CAAApB,cAAA,GAAAE,CAAA,QAAG,IAAAa,MAAA,CAAAM,QAAQ,EAAC;IAAEC,KAAA,EAAO;IAAGC,MAAA,EAAQ;EAAE;EAAA;EAAAvB,cAAA,GAAAE,CAAA;EAEnE,IAAAa,MAAA,CAAAS,SAAS,EAAC;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACR,MAAMuB,gBAAA,GAAmBA,CAAA;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACvBkB,aAAA,CAAc;QACZE,KAAA,EAAOI,MAAA,CAAOC,UAAU;QACxBJ,MAAA,EAAQG,MAAA,CAAOE;MACjB;IACF;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IAEAuB,gBAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IACAwB,MAAA,CAAOG,gBAAgB,CAAC,UAAUJ,gBAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAElC,OAAO,MAAM;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAwB,MAAA,CAAOI,mBAAmB,CAAC,UAAUL,gBAAA;IAAA;EACpD,GAAG,EAAE;EAEL;EAAA;EAAAzB,cAAA,GAAAE,CAAA;EACA,IAAAa,MAAA,CAAAS,SAAS,EAAC;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAa,UAAA,CAAWG,KAAK,KAAK;IAAA;IAAA,CAAAtB,cAAA,GAAAM,CAAA,WAAKa,UAAA,CAAWI,MAAM,KAAK,IAAG;MAAA;MAAAvB,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAM,CAAA;IAAA;IAEvD,MAAMyB,KAAA;IAAA;IAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAgB,EAAE;IACxB,MAAM8B,SAAA;IAAA;IAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAuD,CAAC,WAAW,aAAa,SAAS;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAE/F,KAAK,IAAI+B,CAAA;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAI,IAAG+B,CAAA,GAAI5B,SAAA,EAAW4B,CAAA,IAAK;MAAA;MAAAjC,cAAA,GAAAE,CAAA;MAClC6B,KAAA,CAAMG,IAAI,CAAC;QACTC,EAAA,EAAIF,CAAA;QACJG,CAAA,EAAGC,IAAA,CAAKC,MAAM,KAAKnB,UAAA,CAAWG,KAAK;QACnCiB,CAAA,EAAGF,IAAA,CAAKC,MAAM,KAAKnB,UAAA,CAAWI,MAAM;QACpCiB,EAAA,EAAI,CAACH,IAAA,CAAKC,MAAM,KAAK,GAAE,IAAK9B,cAAA;QAC5BiC,EAAA,EAAI,CAACJ,IAAA,CAAKC,MAAM,KAAK,GAAE,IAAK9B,cAAA;QAC5BkC,IAAA,EAAML,IAAA,CAAKC,MAAM,KAAK,IAAI;QAC1BK,OAAA,EAASN,IAAA,CAAKC,MAAM,KAAK,MAAM;QAC/BM,UAAA,EAAYP,IAAA,CAAKC,MAAM,KAAKD,IAAA,CAAKQ,EAAE,GAAG;QACtCC,IAAA,EAAMd,SAAS,CAACK,IAAA,CAAKU,KAAK,CAACV,IAAA,CAAKC,MAAM,KAAKN,SAAA,CAAUgB,MAAM;MAC7D;IACF;IAAA;IAAAhD,cAAA,GAAAE,CAAA;IAEAgB,QAAA,CAAS+B,OAAO,GAAGlB,KAAA;EACrB,GAAG,CAACZ,UAAA,EAAYd,SAAA,EAAWG,cAAA,CAAe;EAE1C;EAAA;EAAAR,cAAA,GAAAE,CAAA;EACA,IAAAa,MAAA,CAAAS,SAAS,EAAC;IAAA;IAAAxB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAM,CAAA,YAACQ,SAAA,CAAUmC,OAAO;IAAA;IAAA,CAAAjD,cAAA,GAAAM,CAAA,WAAIa,UAAA,CAAWG,KAAK,KAAK;IAAA;IAAA,CAAAtB,cAAA,GAAAM,CAAA,WAAKa,UAAA,CAAWI,MAAM,KAAK,IAAG;MAAA;MAAAvB,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAM,CAAA;IAAA;IAE7E,MAAM4C,MAAA;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,QAASY,SAAA,CAAUmC,OAAO;IAChC,MAAME,GAAA;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAMgD,MAAA,CAAOE,UAAU,CAAC;IAAA;IAAApD,cAAA,GAAAE,CAAA;IAC9B,IAAI,CAACiD,GAAA,EAAK;MAAA;MAAAnD,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAE,CAAA;IAEVgD,MAAA,CAAO5B,KAAK,GAAGH,UAAA,CAAWG,KAAK;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAC/BgD,MAAA,CAAO3B,MAAM,GAAGJ,UAAA,CAAWI,MAAM;IAAA;IAAAvB,cAAA,GAAAE,CAAA;IAEjC,MAAMmD,OAAA,GAAUA,CAAA;MAAA;MAAArD,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACdiD,GAAA,CAAIG,SAAS,CAAC,GAAG,GAAGnC,UAAA,CAAWG,KAAK,EAAEH,UAAA,CAAWI,MAAM;MAEvD;MAAA;MAAAvB,cAAA,GAAAE,CAAA;MACA,MAAMqD,SAAA,GAAYA,CAACC,GAAA,EAAaC,KAAA;QAAA;QAAAzD,cAAA,GAAAC,CAAA;QAC9B,MAAMyD,CAAA;QAAA;QAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAIyD,QAAA,CAASH,GAAA,CAAII,KAAK,CAAC,GAAG,IAAI;QACpC,MAAMC,CAAA;QAAA;QAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAIyD,QAAA,CAASH,GAAA,CAAII,KAAK,CAAC,GAAG,IAAI;QACpC,MAAMtD,CAAA;QAAA;QAAA,CAAAN,cAAA,GAAAE,CAAA,QAAIyD,QAAA,CAASH,GAAA,CAAII,KAAK,CAAC,GAAG,IAAI;QAAA;QAAA5D,cAAA,GAAAE,CAAA;QACpC,OAAO,QAAQwD,CAAA,KAAMG,CAAA,KAAMvD,CAAA,KAAMmD,KAAA,GAAQ;MAC3C;MAEA;MAAA;MAAAzD,cAAA,GAAAE,CAAA;MACAgB,QAAA,CAAS+B,OAAO,CAACa,OAAO,CAACC,IAAA;QAAA;QAAA/D,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACvB;QACA6D,IAAA,CAAK3B,CAAC,IAAI2B,IAAA,CAAKvB,EAAE;QAAA;QAAAxC,cAAA,GAAAE,CAAA;QACjB6D,IAAA,CAAKxB,CAAC,IAAIwB,IAAA,CAAKtB,EAAE;QAEjB;QAAA;QAAAzC,cAAA,GAAAE,CAAA;QACA;QAAI;QAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAyD,IAAA,CAAK3B,CAAC,IAAI;QAAA;QAAA,CAAApC,cAAA,GAAAM,CAAA,WAAKyD,IAAA,CAAK3B,CAAC,IAAIjB,UAAA,CAAWG,KAAK,GAAE;UAAA;UAAAtB,cAAA,GAAAM,CAAA;UAAAN,cAAA,GAAAE,CAAA;UAC7C6D,IAAA,CAAKvB,EAAE,IAAI,CAAC;UAAA;UAAAxC,cAAA,GAAAE,CAAA;UACZ6D,IAAA,CAAK3B,CAAC,GAAGC,IAAA,CAAK2B,GAAG,CAAC,GAAG3B,IAAA,CAAK4B,GAAG,CAAC9C,UAAA,CAAWG,KAAK,EAAEyC,IAAA,CAAK3B,CAAC;QACxD;QAAA;QAAA;UAAApC,cAAA,GAAAM,CAAA;QAAA;QAAAN,cAAA,GAAAE,CAAA;QACA;QAAI;QAAA,CAAAF,cAAA,GAAAM,CAAA,WAAAyD,IAAA,CAAKxB,CAAC,IAAI;QAAA;QAAA,CAAAvC,cAAA,GAAAM,CAAA,WAAKyD,IAAA,CAAKxB,CAAC,IAAIpB,UAAA,CAAWI,MAAM,GAAE;UAAA;UAAAvB,cAAA,GAAAM,CAAA;UAAAN,cAAA,GAAAE,CAAA;UAC9C6D,IAAA,CAAKtB,EAAE,IAAI,CAAC;UAAA;UAAAzC,cAAA,GAAAE,CAAA;UACZ6D,IAAA,CAAKxB,CAAC,GAAGF,IAAA,CAAK2B,GAAG,CAAC,GAAG3B,IAAA,CAAK4B,GAAG,CAAC9C,UAAA,CAAWI,MAAM,EAAEwC,IAAA,CAAKxB,CAAC;QACzD;QAAA;QAAA;UAAAvC,cAAA,GAAAM,CAAA;QAAA;QAEA;QAAAN,cAAA,GAAAE,CAAA;QACA6D,IAAA,CAAKnB,UAAU,IAAI;QAAA;QAAA5C,cAAA,GAAAE,CAAA;QACnB6D,IAAA,CAAKpB,OAAO,GAAG,MAAM,MAAMN,IAAA,CAAK6B,GAAG,CAACH,IAAA,CAAKnB,UAAU;MACrD;MAEA;MACA,MAAM/B,WAAA;MAAA;MAAA,CAAAb,cAAA,GAAAE,CAAA,QAA4B,EAAE;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACpC,KAAK,IAAI+B,CAAA;MAAA;MAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAI,IAAG+B,CAAA,GAAIf,QAAA,CAAS+B,OAAO,CAACD,MAAM,EAAEf,CAAA,IAAK;QAAA;QAAAjC,cAAA,GAAAE,CAAA;QAChD,KAAK,IAAIiE,CAAA;QAAA;QAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAI+B,CAAA,GAAI,IAAGkC,CAAA,GAAIjD,QAAA,CAAS+B,OAAO,CAACD,MAAM,EAAEmB,CAAA,IAAK;UACpD,MAAMC,KAAA;UAAA;UAAA,CAAApE,cAAA,GAAAE,CAAA,QAAQgB,QAAA,CAAS+B,OAAO,CAAChB,CAAA,CAAE;UACjC,MAAMoC,KAAA;UAAA;UAAA,CAAArE,cAAA,GAAAE,CAAA,QAAQgB,QAAA,CAAS+B,OAAO,CAACkB,CAAA,CAAE;UAAA;UAAAnE,cAAA,GAAAE,CAAA;UAEjC;UAAI;UAAA,CAAAF,cAAA,GAAAM,CAAA,YAAC8D,KAAA;UAAA;UAAA,CAAApE,cAAA,GAAAM,CAAA,WAAS,CAAC+D,KAAA,GAAO;YAAA;YAAArE,cAAA,GAAAM,CAAA;YAAAN,cAAA,GAAAE,CAAA;YAAA;UAAA;UAAA;UAAA;YAAAF,cAAA,GAAAM,CAAA;UAAA;UAEtB,MAAMgE,EAAA;UAAA;UAAA,CAAAtE,cAAA,GAAAE,CAAA,QAAKkE,KAAA,CAAMhC,CAAC,GAAGiC,KAAA,CAAMjC,CAAC;UAC5B,MAAMmC,EAAA;UAAA;UAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAKkE,KAAA,CAAM7B,CAAC,GAAG8B,KAAA,CAAM9B,CAAC;UAC5B,MAAMiC,QAAA;UAAA;UAAA,CAAAxE,cAAA,GAAAE,CAAA,QAAWmC,IAAA,CAAKoC,IAAI,CAACH,EAAA,GAAKA,EAAA,GAAKC,EAAA,GAAKA,EAAA;UAAA;UAAAvE,cAAA,GAAAE,CAAA;UAE1C,IAAIsE,QAAA,GAAWjE,kBAAA,EAAoB;YAAA;YAAAP,cAAA,GAAAM,CAAA;YACjC,MAAMqC,OAAA;YAAA;YAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAUmC,IAAA,CAAK2B,GAAG,CAAC,GAAG,IAAIQ,QAAA,GAAWjE,kBAAA;YAAA;YAAAP,cAAA,GAAAE,CAAA;YAC3CW,WAAA,CAAYqB,IAAI,CAAC;cACfwC,IAAA,EAAMN,KAAA;cACNO,EAAA,EAAIN,KAAA;cACJ1B,OAAA,EAASA,OAAA,GAAU;cACnBiC,QAAA,EAAUjC;YACZ;UACF;UAAA;UAAA;YAAA3C,cAAA,GAAAM,CAAA;UAAA;QACF;MACF;MAEA;MAAA;MAAAN,cAAA,GAAAE,CAAA;MACAW,WAAA,CAAYiD,OAAO,CAACe,UAAA;QAAA;QAAA7E,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAClBiD,GAAA,CAAI2B,SAAS;QAAA;QAAA9E,cAAA,GAAAE,CAAA;QACbiD,GAAA,CAAI4B,MAAM,CAACF,UAAA,CAAWH,IAAI,CAACtC,CAAC,EAAEyC,UAAA,CAAWH,IAAI,CAACnC,CAAC;QAAA;QAAAvC,cAAA,GAAAE,CAAA;QAC/CiD,GAAA,CAAI6B,MAAM,CAACH,UAAA,CAAWF,EAAE,CAACvC,CAAC,EAAEyC,UAAA,CAAWF,EAAE,CAACpC,CAAC;QAE3C;QACA,MAAM0C,QAAA;QAAA;QAAA,CAAAjF,cAAA,GAAAE,CAAA,SAAWiD,GAAA,CAAI+B,oBAAoB,CACvCL,UAAA,CAAWH,IAAI,CAACtC,CAAC,EAAEyC,UAAA,CAAWH,IAAI,CAACnC,CAAC,EACpCsC,UAAA,CAAWF,EAAE,CAACvC,CAAC,EAAEyC,UAAA,CAAWF,EAAE,CAACpC,CAAC;QAAA;QAAAvC,cAAA,GAAAE,CAAA;QAGlC+E,QAAA,CAASE,YAAY,CAAC,GAAG5B,SAAA,CAAU9C,MAAA,CAAOI,WAAW,EAAEgE,UAAA,CAAWlC,OAAO;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QACzE+E,QAAA,CAASE,YAAY,CAAC,KAAK5B,SAAA,CAAU9C,MAAA,CAAOG,MAAM,EAAEiE,UAAA,CAAWlC,OAAO,GAAG;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QACzE+E,QAAA,CAASE,YAAY,CAAC,GAAG5B,SAAA,CAAU9C,MAAA,CAAOI,WAAW,EAAEgE,UAAA,CAAWlC,OAAO;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QAEzEiD,GAAA,CAAIiC,WAAW,GAAGH,QAAA;QAAA;QAAAjF,cAAA,GAAAE,CAAA;QAClBiD,GAAA,CAAIkC,SAAS,GAAGR,UAAA,CAAWD,QAAQ,GAAG;QAAA;QAAA5E,cAAA,GAAAE,CAAA;QACtCiD,GAAA,CAAImC,MAAM;MACZ;MAEA;MAAA;MAAAtF,cAAA,GAAAE,CAAA;MACAgB,QAAA,CAAS+B,OAAO,CAACa,OAAO,CAACC,IAAA;QAAA;QAAA/D,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACvBiD,GAAA,CAAI2B,SAAS;QAAA;QAAA9E,cAAA,GAAAE,CAAA;QACbiD,GAAA,CAAIoC,GAAG,CAACxB,IAAA,CAAK3B,CAAC,EAAE2B,IAAA,CAAKxB,CAAC,EAAEwB,IAAA,CAAKrB,IAAI,EAAE,GAAGL,IAAA,CAAKQ,EAAE,GAAG;QAEhD;QACA,IAAI2C,KAAA;QAAA;QAAA,CAAAxF,cAAA,GAAAE,CAAA,SAAQO,MAAA,CAAOC,OAAO;QAAA;QAAAV,cAAA,GAAAE,CAAA;QAC1B,IAAI6D,IAAA,CAAKjB,IAAI,KAAK,aAAa;UAAA;UAAA9C,cAAA,GAAAM,CAAA;UAAAN,cAAA,GAAAE,CAAA;UAAAsF,KAAA,GAAQ/E,MAAA,CAAOE,SAAS;QAAA;QAAA;QAAA;UAAAX,cAAA,GAAAM,CAAA;QAAA;QAAAN,cAAA,GAAAE,CAAA;QACvD,IAAI6D,IAAA,CAAKjB,IAAI,KAAK,UAAU;UAAA;UAAA9C,cAAA,GAAAM,CAAA;UAAAN,cAAA,GAAAE,CAAA;UAAAsF,KAAA,GAAQ/E,MAAA,CAAOG,MAAM;QAAA;QAAA;QAAA;UAAAZ,cAAA,GAAAM,CAAA;QAAA;QAEjD;QACA,MAAM2E,QAAA;QAAA;QAAA,CAAAjF,cAAA,GAAAE,CAAA,SAAWiD,GAAA,CAAIsC,oBAAoB,CACvC1B,IAAA,CAAK3B,CAAC,EAAE2B,IAAA,CAAKxB,CAAC,EAAE,GAChBwB,IAAA,CAAK3B,CAAC,EAAE2B,IAAA,CAAKxB,CAAC,EAAEwB,IAAA,CAAKrB,IAAI,GAAG;QAAA;QAAA1C,cAAA,GAAAE,CAAA;QAG9B+E,QAAA,CAASE,YAAY,CAAC,GAAG5B,SAAA,CAAUiC,KAAA,EAAOzB,IAAA,CAAKpB,OAAO;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QACtD+E,QAAA,CAASE,YAAY,CAAC,KAAK5B,SAAA,CAAUiC,KAAA,EAAOzB,IAAA,CAAKpB,OAAO,GAAG;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QAC3D+E,QAAA,CAASE,YAAY,CAAC,GAAG5B,SAAA,CAAUiC,KAAA,EAAO;QAAA;QAAAxF,cAAA,GAAAE,CAAA;QAE1CiD,GAAA,CAAIuC,SAAS,GAAGT,QAAA;QAAA;QAAAjF,cAAA,GAAAE,CAAA;QAChBiD,GAAA,CAAIwC,IAAI;QAER;QAAA;QAAA3F,cAAA,GAAAE,CAAA;QACAiD,GAAA,CAAI2B,SAAS;QAAA;QAAA9E,cAAA,GAAAE,CAAA;QACbiD,GAAA,CAAIoC,GAAG,CAACxB,IAAA,CAAK3B,CAAC,EAAE2B,IAAA,CAAKxB,CAAC,EAAEwB,IAAA,CAAKrB,IAAI,GAAG,KAAK,GAAGL,IAAA,CAAKQ,EAAE,GAAG;QAAA;QAAA7C,cAAA,GAAAE,CAAA;QACtDiD,GAAA,CAAIuC,SAAS,GAAGnC,SAAA,CAAUiC,KAAA,EAAOnD,IAAA,CAAK4B,GAAG,CAAC,GAAGF,IAAA,CAAKpB,OAAO,GAAG;QAAA;QAAA3C,cAAA,GAAAE,CAAA;QAC5DiD,GAAA,CAAIwC,IAAI;MACV;MAAA;MAAA3F,cAAA,GAAAE,CAAA;MAEAe,YAAA,CAAagC,OAAO,GAAG2C,qBAAA,CAAsBvC,OAAA;IAC/C;IAAA;IAAArD,cAAA,GAAAE,CAAA;IAEAmD,OAAA;IAAA;IAAArD,cAAA,GAAAE,CAAA;IAEA,OAAO;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACL,IAAIe,YAAA,CAAagC,OAAO,EAAE;QAAA;QAAAjD,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAE,CAAA;QACxB2F,oBAAA,CAAqB5E,YAAA,CAAagC,OAAO;MAC3C;MAAA;MAAA;QAAAjD,cAAA,GAAAM,CAAA;MAAA;IACF;EACF,GAAG,CAACa,UAAA,EAAYZ,kBAAA,EAAoBE,MAAA,CAAO;EAAA;EAAAT,cAAA,GAAAE,CAAA;EAE3C,oBACE,IAAA4F,WAAA,CAAAC,GAAA,EAAC;IACCC,GAAA,EAAKlF,SAAA;IACLmF,SAAA,EAAU;IACVC,KAAA,EAAO;MACLC,MAAA,EAAQ,CAAC;MACTC,UAAA,EAAY;IACd;;AAGN;MAEAhG,QAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,SAAeH,uBAAA","ignoreList":[]}