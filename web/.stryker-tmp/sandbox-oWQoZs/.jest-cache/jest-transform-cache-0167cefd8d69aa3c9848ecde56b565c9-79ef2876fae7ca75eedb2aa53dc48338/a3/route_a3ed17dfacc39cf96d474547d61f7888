ba11b748de81e500ab1f40a0df78f616
"use strict";

/* istanbul ignore next */
function cov_12uugm31ui() {
  var path = "/home/jack/Documents/aclue-preprod/web/src/app/api/test-newsletter/route.ts";
  var hash = "6af997c4ae53db40d90fbc1d93dca44260dbb34b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/jack/Documents/aclue-preprod/web/src/app/api/test-newsletter/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 78
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 77
        }
      },
      "7": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "8": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 17,
          column: 51
        }
      },
      "9": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 64
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "12": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "14": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 67
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 62
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/home/jack/Documents/aclue-preprod/web/src/app/api/test-newsletter/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\n/**\n * Test API route to debug newsletter connectivity\n * This will help us isolate if the issue is with server actions specifically\n * or with the entire Next.js server environment\n */\n\nexport async function POST(request: NextRequest) {\n  console.log('\uD83E\uDDEA API Route: Testing newsletter connectivity...');\n\n  try {\n    const BACKEND_URL = 'https://aclue-backend-production.up.railway.app';\n    const endpoint = '/api/v1/newsletter/signup';\n    const fullUrl = `${BACKEND_URL}${endpoint}`;\n\n    const payload = {\n      email: 'api-route-test@example.com',\n      source: 'api_route_test',\n      user_agent: 'Next.js API Route',\n      marketing_consent: true,\n    };\n\n    console.log('\uD83D\uDCE1 API Route calling:', fullUrl);\n    console.log('\uD83D\uDCCB API Route payload:', payload);\n\n    const response = await fetch(fullUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'User-Agent': 'aclue-Web-Server/1.0',\n      },\n      body: JSON.stringify(payload),\n      signal: AbortSignal.timeout(10000),\n    });\n\n    console.log('\u2705 API Route response status:', response.status);\n\n    const data = await response.json();\n    console.log('\uD83D\uDCE6 API Route response data:', data);\n\n    return NextResponse.json({\n      success: true,\n      backendResponse: data,\n      status: response.status,\n      message: 'API route connectivity test successful'\n    });\n\n  } catch (error: any) {\n    console.error('\uD83D\uDCA5 API Route error:', error);\n\n    return NextResponse.json({\n      success: false,\n      error: error.message,\n      name: error.name,\n      message: 'API route connectivity test failed'\n    }, { status: 500 });\n  }\n}"],
      names: ["POST", "request", "console", "log", "BACKEND_URL", "endpoint", "fullUrl", "payload", "email", "source", "user_agent", "marketing_consent", "response", "fetch", "method", "headers", "body", "JSON", "stringify", "signal", "AbortSignal", "timeout", "status", "data", "json", "NextResponse", "success", "backendResponse", "message", "error", "name"],
      mappings: ";;;;+BAQsBA;;;eAAAA;;;wBARoB;AAQnC,eAAeA,KAAKC,OAAoB;IAC7CC,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,MAAMC,cAAc;QACpB,MAAMC,WAAW;QACjB,MAAMC,UAAU,CAAC,EAAEF,YAAY,EAAEC,SAAS,CAAC;QAE3C,MAAME,UAAU;YACdC,OAAO;YACPC,QAAQ;YACRC,YAAY;YACZC,mBAAmB;QACrB;QAEAT,QAAQC,GAAG,CAAC,mCAAyBG;QACrCJ,QAAQC,GAAG,CAAC,mCAAyBI;QAErC,MAAMK,WAAW,MAAMC,MAAMP,SAAS;YACpCQ,QAAQ;YACRC,SAAS;gBACP,gBAAgB;gBAChB,UAAU;gBACV,cAAc;YAChB;YACAC,MAAMC,KAAKC,SAAS,CAACX;YACrBY,QAAQC,YAAYC,OAAO,CAAC;QAC9B;QAEAnB,QAAQC,GAAG,CAAC,gCAAgCS,SAASU,MAAM;QAE3D,MAAMC,OAAO,MAAMX,SAASY,IAAI;QAChCtB,QAAQC,GAAG,CAAC,yCAA+BoB;QAE3C,OAAOE,oBAAY,CAACD,IAAI,CAAC;YACvBE,SAAS;YACTC,iBAAiBJ;YACjBD,QAAQV,SAASU,MAAM;YACvBM,SAAS;QACX;IAEF,EAAE,OAAOC,OAAY;QACnB3B,QAAQ2B,KAAK,CAAC,iCAAuBA;QAErC,OAAOJ,oBAAY,CAACD,IAAI,CAAC;YACvBE,SAAS;YACTG,OAAOA,MAAMD,OAAO;YACpBE,MAAMD,MAAMC,IAAI;YAChBF,SAAS;QACX,GAAG;YAAEN,QAAQ;QAAI;IACnB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6af997c4ae53db40d90fbc1d93dca44260dbb34b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12uugm31ui = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12uugm31ui();
cov_12uugm31ui().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_12uugm31ui().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_12uugm31ui().f[0]++;
    cov_12uugm31ui().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_12uugm31ui().s[3]++, require("next/server"));
async function POST(request) {
  /* istanbul ignore next */
  cov_12uugm31ui().f[1]++;
  cov_12uugm31ui().s[4]++;
  console.log("\uD83E\uDDEA API Route: Testing newsletter connectivity...");
  /* istanbul ignore next */
  cov_12uugm31ui().s[5]++;
  try {
    const BACKEND_URL =
    /* istanbul ignore next */
    (cov_12uugm31ui().s[6]++, "https://aclue-backend-production.up.railway.app");
    const endpoint =
    /* istanbul ignore next */
    (cov_12uugm31ui().s[7]++, "/api/v1/newsletter/signup");
    const fullUrl =
    /* istanbul ignore next */
    (cov_12uugm31ui().s[8]++, `${BACKEND_URL}${endpoint}`);
    const payload =
    /* istanbul ignore next */
    (cov_12uugm31ui().s[9]++, {
      email: "api-route-test@example.com",
      source: "api_route_test",
      user_agent: "Next.js API Route",
      marketing_consent: true
    });
    /* istanbul ignore next */
    cov_12uugm31ui().s[10]++;
    console.log("\uD83D\uDCE1 API Route calling:", fullUrl);
    /* istanbul ignore next */
    cov_12uugm31ui().s[11]++;
    console.log("\uD83D\uDCCB API Route payload:", payload);
    const response =
    /* istanbul ignore next */
    (cov_12uugm31ui().s[12]++, await fetch(fullUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "User-Agent": "aclue-Web-Server/1.0"
      },
      body: JSON.stringify(payload),
      signal: AbortSignal.timeout(10000)
    }));
    /* istanbul ignore next */
    cov_12uugm31ui().s[13]++;
    console.log("✅ API Route response status:", response.status);
    const data =
    /* istanbul ignore next */
    (cov_12uugm31ui().s[14]++, await response.json());
    /* istanbul ignore next */
    cov_12uugm31ui().s[15]++;
    console.log("\uD83D\uDCE6 API Route response data:", data);
    /* istanbul ignore next */
    cov_12uugm31ui().s[16]++;
    return _server.NextResponse.json({
      success: true,
      backendResponse: data,
      status: response.status,
      message: "API route connectivity test successful"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12uugm31ui().s[17]++;
    console.error("\uD83D\uDCA5 API Route error:", error);
    /* istanbul ignore next */
    cov_12uugm31ui().s[18]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message,
      name: error.name,
      message: "API route connectivity test failed"
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTJ1dWdtMzF1aSIsImFjdHVhbENvdmVyYWdlIiwicyIsIlBPU1QiLCJyZXF1ZXN0IiwiZiIsImNvbnNvbGUiLCJsb2ciLCJCQUNLRU5EX1VSTCIsImVuZHBvaW50IiwiZnVsbFVybCIsInBheWxvYWQiLCJlbWFpbCIsInNvdXJjZSIsInVzZXJfYWdlbnQiLCJtYXJrZXRpbmdfY29uc2VudCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzaWduYWwiLCJBYm9ydFNpZ25hbCIsInRpbWVvdXQiLCJzdGF0dXMiLCJkYXRhIiwianNvbiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJzdWNjZXNzIiwiYmFja2VuZFJlc3BvbnNlIiwibWVzc2FnZSIsImVycm9yIiwibmFtZSJdLCJzb3VyY2VzIjpbIi9ob21lL2phY2svRG9jdW1lbnRzL2FjbHVlLXByZXByb2Qvd2ViL3NyYy9hcHAvYXBpL3Rlc3QtbmV3c2xldHRlci9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbi8qKlxuICogVGVzdCBBUEkgcm91dGUgdG8gZGVidWcgbmV3c2xldHRlciBjb25uZWN0aXZpdHlcbiAqIFRoaXMgd2lsbCBoZWxwIHVzIGlzb2xhdGUgaWYgdGhlIGlzc3VlIGlzIHdpdGggc2VydmVyIGFjdGlvbnMgc3BlY2lmaWNhbGx5XG4gKiBvciB3aXRoIHRoZSBlbnRpcmUgTmV4dC5qcyBzZXJ2ZXIgZW52aXJvbm1lbnRcbiAqL1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICBjb25zb2xlLmxvZygn8J+nqiBBUEkgUm91dGU6IFRlc3RpbmcgbmV3c2xldHRlciBjb25uZWN0aXZpdHkuLi4nKTtcblxuICB0cnkge1xuICAgIGNvbnN0IEJBQ0tFTkRfVVJMID0gJ2h0dHBzOi8vYWNsdWUtYmFja2VuZC1wcm9kdWN0aW9uLnVwLnJhaWx3YXkuYXBwJztcbiAgICBjb25zdCBlbmRwb2ludCA9ICcvYXBpL3YxL25ld3NsZXR0ZXIvc2lnbnVwJztcbiAgICBjb25zdCBmdWxsVXJsID0gYCR7QkFDS0VORF9VUkx9JHtlbmRwb2ludH1gO1xuXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIGVtYWlsOiAnYXBpLXJvdXRlLXRlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgc291cmNlOiAnYXBpX3JvdXRlX3Rlc3QnLFxuICAgICAgdXNlcl9hZ2VudDogJ05leHQuanMgQVBJIFJvdXRlJyxcbiAgICAgIG1hcmtldGluZ19jb25zZW50OiB0cnVlLFxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZygn8J+ToSBBUEkgUm91dGUgY2FsbGluZzonLCBmdWxsVXJsKTtcbiAgICBjb25zb2xlLmxvZygn8J+TiyBBUEkgUm91dGUgcGF5bG9hZDonLCBwYXlsb2FkKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZnVsbFVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdVc2VyLUFnZW50JzogJ0FjbHVlLVdlYi1TZXJ2ZXIvMS4wJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICAgIHNpZ25hbDogQWJvcnRTaWduYWwudGltZW91dCgxMDAwMCksXG4gICAgfSk7XG5cbiAgICBjb25zb2xlLmxvZygn4pyFIEFQSSBSb3V0ZSByZXNwb25zZSBzdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzKTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc29sZS5sb2coJ/Cfk6YgQVBJIFJvdXRlIHJlc3BvbnNlIGRhdGE6JywgZGF0YSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGJhY2tlbmRSZXNwb25zZTogZGF0YSxcbiAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgbWVzc2FnZTogJ0FQSSByb3V0ZSBjb25uZWN0aXZpdHkgdGVzdCBzdWNjZXNzZnVsJ1xuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCfwn5KlIEFQSSBSb3V0ZSBlcnJvcjonLCBlcnJvcik7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIG5hbWU6IGVycm9yLm5hbWUsXG4gICAgICBtZXNzYWdlOiAnQVBJIHJvdXRlIGNvbm5lY3Rpdml0eSB0ZXN0IGZhaWxlZCdcbiAgICB9LCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBYUk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtB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