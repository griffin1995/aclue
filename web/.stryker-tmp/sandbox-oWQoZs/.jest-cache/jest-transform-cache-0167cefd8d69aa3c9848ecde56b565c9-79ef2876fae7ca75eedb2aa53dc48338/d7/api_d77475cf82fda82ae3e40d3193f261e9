169aeb375d5ebc0d1486f0cf5d1f4291
/**
 * aclue API Client
 * 
 * Centralised HTTP client for all backend API communication.
 * Provides type-safe methods for authentication, data fetching,
 * and real-time interactions with the aclue backend.
 * 
 * Key Features:
 *   - Automatic JWT token management with refresh
 *   - Request/response interceptors for auth and error handling
 *   - Type-safe API methods with full TypeScript support
 *   - Automatic retry logic for failed requests
 *   - Comprehensive error handling and user feedback
 * 
 * Architecture:
 *   - TokenManager: Secure storage and management of JWT tokens
 *   - ApiClient: Main HTTP client with interceptors and methods
 *   - Convenience exports: Simplified API for common operations
 * 
 * Usage:
 *   import { api } from '@/lib/api';
 *   const user = await api.getCurrentUser();
 *   const products = await api.getProducts({ category: 'electronics' });
 */ // ==============================================================================
// IMPORTS AND DEPENDENCIES
// ==============================================================================
"use strict";

/* istanbul ignore next */
function cov_vtt3zf6ox() {
  var path = "/home/jack/Documents/aclue-preprod/web/src/lib/api.ts";
  var hash = "be5e9a58b0f2f56ebdf6671edb72e4ec1b6ff03a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/jack/Documents/aclue-preprod/web/src/lib/api.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "1": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 35,
          column: 7
        }
      },
      "2": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 35,
          column: 7
        }
      },
      "3": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 50,
          column: 3
        }
      },
      "4": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "5": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 25
        }
      },
      "6": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 24
        }
      },
      "7": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 28
        }
      },
      "8": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "9": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "10": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 56,
          column: 6
        }
      },
      "11": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "12": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 55
        }
      },
      "13": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 58
        }
      },
      "14": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 37
        }
      },
      "15": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "16": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 89
        }
      },
      "17": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 93
        }
      },
      "18": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "19": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 41
        }
      },
      "20": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "21": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 83
        }
      },
      "22": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 87
        }
      },
      "23": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "24": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "25": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "26": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 77
        }
      },
      "27": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 20
        }
      },
      "28": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 56
        }
      },
      "29": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 152,
          column: 56
        }
      },
      "30": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "31": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 80
        }
      },
      "32": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 20
        }
      },
      "33": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 32
        }
      },
      "34": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 33
        }
      },
      "35": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "36": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 73
        }
      },
      "37": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 76
        }
      },
      "38": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 68
        }
      },
      "39": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "40": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "41": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "42": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 30
        }
      },
      "43": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 55
        }
      },
      "44": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 229,
          column: 11
        }
      },
      "45": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 33
        }
      },
      "46": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 256,
          column: 43
        }
      },
      "47": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 250,
          column: 60
        }
      },
      "48": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "49": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 65
        }
      },
      "50": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 26
        }
      },
      "51": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 41
        }
      },
      "52": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "53": {
        start: {
          line: 260,
          column: 58
        },
        end: {
          line: 260,
          column: 66
        }
      },
      "54": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 261,
          column: 48
        }
      },
      "55": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "56": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "57": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 277,
          column: 23
        }
      },
      "58": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 270,
          column: 27
        }
      },
      "59": {
        start: {
          line: 273,
          column: 24
        },
        end: {
          line: 273,
          column: 82
        }
      },
      "60": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 274,
          column: 60
        }
      },
      "61": {
        start: {
          line: 276,
          column: 24
        },
        end: {
          line: 276,
          column: 51
        }
      },
      "62": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 46
        }
      },
      "63": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 41
        }
      },
      "64": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 311,
          column: 17
        }
      },
      "65": {
        start: {
          line: 284,
          column: 41
        },
        end: {
          line: 284,
          column: 76
        }
      },
      "66": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 287,
          column: 21
        }
      },
      "67": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 286,
          column: 70
        }
      },
      "68": {
        start: {
          line: 289,
          column: 37
        },
        end: {
          line: 291,
          column: 22
        }
      },
      "69": {
        start: {
          line: 292,
          column: 77
        },
        end: {
          line: 292,
          column: 90
        }
      },
      "70": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 79
        }
      },
      "71": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 58
        }
      },
      "72": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 85
        }
      },
      "73": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 299,
          column: 56
        }
      },
      "74": {
        start: {
          line: 302,
          column: 20
        },
        end: {
          line: 302,
          column: 58
        }
      },
      "75": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 303,
          column: 52
        }
      },
      "76": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 307,
          column: 21
        }
      },
      "77": {
        start: {
          line: 306,
          column: 24
        },
        end: {
          line: 306,
          column: 61
        }
      },
      "78": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 56
        }
      },
      "79": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 46
        }
      },
      "80": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 59
        }
      },
      "81": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "82": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "83": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 30
        }
      },
      "84": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 31
        }
      },
      "85": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 30
        }
      },
      "86": {
        start: {
          line: 356,
          column: 25
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "87": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "88": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 364,
          column: 52
        }
      },
      "89": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 115
        }
      },
      "90": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 89
        }
      },
      "91": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 60
        }
      },
      "92": {
        start: {
          line: 368,
          column: 15
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "93": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 64
        }
      },
      "94": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 44
        }
      },
      "95": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 32
        }
      },
      "96": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 81
        }
      },
      "97": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 44
        }
      },
      "98": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 24
        }
      },
      "99": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "100": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 59
        }
      },
      "101": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 61
        }
      },
      "102": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 398,
          column: 58
        }
      },
      "103": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 57
        }
      },
      "104": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 55
        }
      },
      "105": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 56
        }
      },
      "106": {
        start: {
          line: 409,
          column: 25
        },
        end: {
          line: 409,
          column: 59
        }
      },
      "107": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 416,
          column: 9
        }
      },
      "108": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 415,
          column: 14
        }
      },
      "109": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 29
        }
      },
      "110": {
        start: {
          line: 420,
          column: 25
        },
        end: {
          line: 420,
          column: 66
        }
      },
      "111": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 427,
          column: 9
        }
      },
      "112": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 426,
          column: 14
        }
      },
      "113": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 428,
          column: 29
        }
      },
      "114": {
        start: {
          line: 431,
          column: 25
        },
        end: {
          line: 431,
          column: 65
        }
      },
      "115": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 29
        }
      },
      "116": {
        start: {
          line: 435,
          column: 25
        },
        end: {
          line: 435,
          column: 67
        }
      },
      "117": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 29
        }
      },
      "118": {
        start: {
          line: 439,
          column: 25
        },
        end: {
          line: 439,
          column: 62
        }
      },
      "119": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 29
        }
      },
      "120": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 61
        }
      },
      "121": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 447,
          column: 64
        }
      },
      "122": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 63
        }
      },
      "123": {
        start: {
          line: 453,
          column: 25
        },
        end: {
          line: 453,
          column: 71
        }
      },
      "124": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 40
        }
      },
      "125": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 455,
          column: 24
        }
      },
      "126": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 51
        }
      },
      "127": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 463,
          column: 11
        }
      },
      "128": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 469,
          column: 11
        }
      },
      "129": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "130": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 69
        }
      },
      "131": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 61
        }
      },
      "132": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 67
        }
      },
      "133": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 60
        }
      },
      "134": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 66
        }
      },
      "135": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 496,
          column: 11
        }
      },
      "136": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 67
        }
      },
      "137": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 502,
          column: 61
        }
      },
      "138": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 63
        }
      },
      "139": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 61
        }
      },
      "140": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 61
        }
      },
      "141": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 516,
          column: 11
        }
      },
      "142": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 520,
          column: 71
        }
      },
      "143": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 523,
          column: 65
        }
      },
      "144": {
        start: {
          line: 526,
          column: 8
        },
        end: {
          line: 526,
          column: 81
        }
      },
      "145": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 529,
          column: 60
        }
      },
      "146": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 533,
          column: 75
        }
      },
      "147": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 538,
          column: 11
        }
      },
      "148": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 541,
          column: 68
        }
      },
      "149": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 544,
          column: 83
        }
      },
      "150": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 547,
          column: 68
        }
      },
      "151": {
        start: {
          line: 551,
          column: 8
        },
        end: {
          line: 551,
          column: 67
        }
      },
      "152": {
        start: {
          line: 554,
          column: 8
        },
        end: {
          line: 554,
          column: 58
        }
      },
      "153": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 557,
          column: 62
        }
      },
      "154": {
        start: {
          line: 560,
          column: 8
        },
        end: {
          line: 560,
          column: 68
        }
      },
      "155": {
        start: {
          line: 563,
          column: 8
        },
        end: {
          line: 563,
          column: 67
        }
      },
      "156": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 566,
          column: 67
        }
      },
      "157": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 67
        }
      },
      "158": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 63
        }
      },
      "159": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 577,
          column: 50
        }
      },
      "160": {
        start: {
          line: 580,
          column: 18
        },
        end: {
          line: 580,
          column: 33
        }
      },
      "161": {
        start: {
          line: 581,
          column: 21
        },
        end: {
          line: 581,
          column: 47
        }
      },
      "162": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 607,
          column: 1
        }
      },
      "163": {
        start: {
          line: 584,
          column: 19
        },
        end: {
          line: 584,
          column: 40
        }
      },
      "164": {
        start: {
          line: 585,
          column: 22
        },
        end: {
          line: 585,
          column: 46
        }
      },
      "165": {
        start: {
          line: 586,
          column: 16
        },
        end: {
          line: 586,
          column: 34
        }
      },
      "166": {
        start: {
          line: 587,
          column: 24
        },
        end: {
          line: 587,
          column: 50
        }
      },
      "167": {
        start: {
          line: 589,
          column: 27
        },
        end: {
          line: 589,
          column: 56
        }
      },
      "168": {
        start: {
          line: 591,
          column: 27
        },
        end: {
          line: 591,
          column: 56
        }
      },
      "169": {
        start: {
          line: 592,
          column: 29
        },
        end: {
          line: 592,
          column: 60
        }
      },
      "170": {
        start: {
          line: 593,
          column: 22
        },
        end: {
          line: 593,
          column: 46
        }
      },
      "171": {
        start: {
          line: 594,
          column: 23
        },
        end: {
          line: 594,
          column: 48
        }
      },
      "172": {
        start: {
          line: 596,
          column: 32
        },
        end: {
          line: 596,
          column: 66
        }
      },
      "173": {
        start: {
          line: 597,
          column: 36
        },
        end: {
          line: 597,
          column: 74
        }
      },
      "174": {
        start: {
          line: 599,
          column: 37
        },
        end: {
          line: 599,
          column: 76
        }
      },
      "175": {
        start: {
          line: 600,
          column: 34
        },
        end: {
          line: 600,
          column: 70
        }
      },
      "176": {
        start: {
          line: 602,
          column: 28
        },
        end: {
          line: 602,
          column: 58
        }
      },
      "177": {
        start: {
          line: 603,
          column: 22
        },
        end: {
          line: 603,
          column: 46
        }
      },
      "178": {
        start: {
          line: 604,
          column: 33
        },
        end: {
          line: 604,
          column: 68
        }
      },
      "179": {
        start: {
          line: 606,
          column: 25
        },
        end: {
          line: 606,
          column: 52
        }
      },
      "180": {
        start: {
          line: 608,
          column: 17
        },
        end: {
          line: 608,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 16
          }
        },
        loc: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 31
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 38,
            column: 9
          },
          end: {
            line: 38,
            column: 10
          }
        },
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 16
          }
        },
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 13
          },
          end: {
            line: 44,
            column: 14
          }
        },
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 18
          },
          end: {
            line: 47,
            column: 19
          }
        },
        loc: {
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 53,
            column: 9
          },
          end: {
            line: 53,
            column: 33
          }
        },
        loc: {
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 53
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 86,
            column: 6
          },
          end: {
            line: 86,
            column: 7
          }
        },
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 86
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 7
          }
        },
        loc: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 101
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 7
          }
        },
        loc: {
          start: {
            line: 116,
            column: 43
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 133,
            column: 6
          },
          end: {
            line: 133,
            column: 7
          }
        },
        loc: {
          start: {
            line: 133,
            column: 23
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 133
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 150,
            column: 6
          },
          end: {
            line: 150,
            column: 7
          }
        },
        loc: {
          start: {
            line: 150,
            column: 24
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 150
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 169,
            column: 6
          },
          end: {
            line: 169,
            column: 7
          }
        },
        loc: {
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 169
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 17
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 180
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 216,
            column: 6
          },
          end: {
            line: 216,
            column: 7
          }
        },
        loc: {
          start: {
            line: 216,
            column: 19
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 216
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 245,
            column: 6
          },
          end: {
            line: 245,
            column: 7
          }
        },
        loc: {
          start: {
            line: 245,
            column: 26
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 245
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 249,
            column: 45
          },
          end: {
            line: 249,
            column: 46
          }
        },
        loc: {
          start: {
            line: 249,
            column: 55
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 249
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 256,
            column: 11
          },
          end: {
            line: 256,
            column: 12
          }
        },
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 256,
            column: 41
          }
        },
        line: 256
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 260,
            column: 46
          },
          end: {
            line: 260,
            column: 47
          }
        },
        loc: {
          start: {
            line: 260,
            column: 58
          },
          end: {
            line: 260,
            column: 66
          }
        },
        line: 260
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 260,
            column: 68
          },
          end: {
            line: 260,
            column: 69
          }
        },
        loc: {
          start: {
            line: 260,
            column: 83
          },
          end: {
            line: 315,
            column: 9
          }
        },
        line: 260
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 266,
            column: 39
          },
          end: {
            line: 266,
            column: 40
          }
        },
        loc: {
          start: {
            line: 266,
            column: 58
          },
          end: {
            line: 271,
            column: 21
          }
        },
        line: 266
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 271,
            column: 28
          },
          end: {
            line: 271,
            column: 29
          }
        },
        loc: {
          start: {
            line: 271,
            column: 37
          },
          end: {
            line: 275,
            column: 21
          }
        },
        line: 271
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 275,
            column: 29
          },
          end: {
            line: 275,
            column: 30
          }
        },
        loc: {
          start: {
            line: 275,
            column: 36
          },
          end: {
            line: 277,
            column: 21
          }
        },
        line: 275
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 326,
            column: 6
          },
          end: {
            line: 326,
            column: 7
          }
        },
        loc: {
          start: {
            line: 326,
            column: 33
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 326
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 327,
            column: 33
          },
          end: {
            line: 327,
            column: 34
          }
        },
        loc: {
          start: {
            line: 327,
            column: 56
          },
          end: {
            line: 335,
            column: 9
          }
        },
        line: 327
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 355,
            column: 6
          },
          end: {
            line: 355,
            column: 7
          }
        },
        loc: {
          start: {
            line: 355,
            column: 25
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 355
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 391,
            column: 6
          },
          end: {
            line: 391,
            column: 7
          }
        },
        loc: {
          start: {
            line: 391,
            column: 38
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 391
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 27
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 408
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 34
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 419
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 430,
            column: 4
          },
          end: {
            line: 430,
            column: 5
          }
        },
        loc: {
          start: {
            line: 430,
            column: 33
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 430
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 35
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 434
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 30
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 438
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 443,
            column: 4
          },
          end: {
            line: 443,
            column: 5
          }
        },
        loc: {
          start: {
            line: 443,
            column: 22
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 443
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 25
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 446
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 35
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 449
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 19
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 452
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 457,
            column: 5
          }
        },
        loc: {
          start: {
            line: 457,
            column: 27
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 457
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 32
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 460
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 465,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        loc: {
          start: {
            line: 465,
            column: 41
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 465
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 29
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 471
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 30
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 477
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 31
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 480
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 38
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 483
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 30
          },
          end: {
            line: 488,
            column: 5
          }
        },
        line: 486
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 26
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 489
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 30
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 493
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 32
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 498
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 501,
            column: 4
          },
          end: {
            line: 501,
            column: 5
          }
        },
        loc: {
          start: {
            line: 501,
            column: 25
          },
          end: {
            line: 503,
            column: 5
          }
        },
        line: 501
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 504,
            column: 5
          }
        },
        loc: {
          start: {
            line: 504,
            column: 26
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 504
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 507,
            column: 4
          },
          end: {
            line: 507,
            column: 5
          }
        },
        loc: {
          start: {
            line: 507,
            column: 32
          },
          end: {
            line: 509,
            column: 5
          }
        },
        line: 507
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 510,
            column: 5
          }
        },
        loc: {
          start: {
            line: 510,
            column: 32
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 510
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 513,
            column: 4
          },
          end: {
            line: 513,
            column: 5
          }
        },
        loc: {
          start: {
            line: 513,
            column: 52
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 513
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 519,
            column: 4
          },
          end: {
            line: 519,
            column: 5
          }
        },
        loc: {
          start: {
            line: 519,
            column: 35
          },
          end: {
            line: 521,
            column: 5
          }
        },
        line: 519
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 522,
            column: 4
          },
          end: {
            line: 522,
            column: 5
          }
        },
        loc: {
          start: {
            line: 522,
            column: 35
          },
          end: {
            line: 524,
            column: 5
          }
        },
        line: 522
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 525,
            column: 4
          },
          end: {
            line: 525,
            column: 5
          }
        },
        loc: {
          start: {
            line: 525,
            column: 39
          },
          end: {
            line: 527,
            column: 5
          }
        },
        line: 525
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 528,
            column: 4
          },
          end: {
            line: 528,
            column: 5
          }
        },
        loc: {
          start: {
            line: 528,
            column: 30
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 528
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 40
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 532
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 535,
            column: 4
          },
          end: {
            line: 535,
            column: 5
          }
        },
        loc: {
          start: {
            line: 535,
            column: 37
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 535
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 32
          },
          end: {
            line: 542,
            column: 5
          }
        },
        line: 540
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 543,
            column: 4
          },
          end: {
            line: 543,
            column: 5
          }
        },
        loc: {
          start: {
            line: 543,
            column: 40
          },
          end: {
            line: 545,
            column: 5
          }
        },
        line: 543
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 35
          },
          end: {
            line: 548,
            column: 5
          }
        },
        line: 546
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 550,
            column: 4
          },
          end: {
            line: 550,
            column: 5
          }
        },
        loc: {
          start: {
            line: 550,
            column: 31
          },
          end: {
            line: 552,
            column: 5
          }
        },
        line: 550
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 553,
            column: 4
          },
          end: {
            line: 553,
            column: 5
          }
        },
        loc: {
          start: {
            line: 553,
            column: 25
          },
          end: {
            line: 555,
            column: 5
          }
        },
        line: 553
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 556,
            column: 4
          },
          end: {
            line: 556,
            column: 5
          }
        },
        loc: {
          start: {
            line: 556,
            column: 26
          },
          end: {
            line: 558,
            column: 5
          }
        },
        line: 556
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 5
          }
        },
        loc: {
          start: {
            line: 559,
            column: 36
          },
          end: {
            line: 561,
            column: 5
          }
        },
        line: 559
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 562,
            column: 4
          },
          end: {
            line: 562,
            column: 5
          }
        },
        loc: {
          start: {
            line: 562,
            column: 29
          },
          end: {
            line: 564,
            column: 5
          }
        },
        line: 562
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 565,
            column: 4
          },
          end: {
            line: 565,
            column: 5
          }
        },
        loc: {
          start: {
            line: 565,
            column: 35
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 565
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 569,
            column: 4
          },
          end: {
            line: 569,
            column: 5
          }
        },
        loc: {
          start: {
            line: 569,
            column: 28
          },
          end: {
            line: 571,
            column: 5
          }
        },
        line: 569
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 572,
            column: 5
          }
        },
        loc: {
          start: {
            line: 572,
            column: 34
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 572
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 576,
            column: 4
          },
          end: {
            line: 576,
            column: 5
          }
        },
        loc: {
          start: {
            line: 576,
            column: 24
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 576
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 584,
            column: 11
          },
          end: {
            line: 584,
            column: 12
          }
        },
        loc: {
          start: {
            line: 584,
            column: 19
          },
          end: {
            line: 584,
            column: 40
          }
        },
        line: 584
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 585,
            column: 14
          },
          end: {
            line: 585,
            column: 15
          }
        },
        loc: {
          start: {
            line: 585,
            column: 22
          },
          end: {
            line: 585,
            column: 46
          }
        },
        line: 585
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 586,
            column: 12
          },
          end: {
            line: 586,
            column: 13
          }
        },
        loc: {
          start: {
            line: 586,
            column: 16
          },
          end: {
            line: 586,
            column: 34
          }
        },
        line: 586
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 587,
            column: 20
          },
          end: {
            line: 587,
            column: 21
          }
        },
        loc: {
          start: {
            line: 587,
            column: 24
          },
          end: {
            line: 587,
            column: 50
          }
        },
        line: 587
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 589,
            column: 23
          },
          end: {
            line: 589,
            column: 24
          }
        },
        loc: {
          start: {
            line: 589,
            column: 27
          },
          end: {
            line: 589,
            column: 56
          }
        },
        line: 589
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 591,
            column: 17
          },
          end: {
            line: 591,
            column: 18
          }
        },
        loc: {
          start: {
            line: 591,
            column: 27
          },
          end: {
            line: 591,
            column: 56
          }
        },
        line: 591
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 592,
            column: 20
          },
          end: {
            line: 592,
            column: 21
          }
        },
        loc: {
          start: {
            line: 592,
            column: 29
          },
          end: {
            line: 592,
            column: 60
          }
        },
        line: 592
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 593,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        },
        loc: {
          start: {
            line: 593,
            column: 22
          },
          end: {
            line: 593,
            column: 46
          }
        },
        line: 593
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 594,
            column: 19
          },
          end: {
            line: 594,
            column: 20
          }
        },
        loc: {
          start: {
            line: 594,
            column: 23
          },
          end: {
            line: 594,
            column: 48
          }
        },
        line: 594
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 596,
            column: 24
          },
          end: {
            line: 596,
            column: 25
          }
        },
        loc: {
          start: {
            line: 596,
            column: 32
          },
          end: {
            line: 596,
            column: 66
          }
        },
        line: 596
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 597,
            column: 17
          },
          end: {
            line: 597,
            column: 18
          }
        },
        loc: {
          start: {
            line: 597,
            column: 36
          },
          end: {
            line: 597,
            column: 74
          }
        },
        line: 597
      },
      "80": {
        name: "(anonymous_80)",
        decl: {
          start: {
            line: 599,
            column: 29
          },
          end: {
            line: 599,
            column: 30
          }
        },
        loc: {
          start: {
            line: 599,
            column: 37
          },
          end: {
            line: 599,
            column: 76
          }
        },
        line: 599
      },
      "81": {
        name: "(anonymous_81)",
        decl: {
          start: {
            line: 600,
            column: 24
          },
          end: {
            line: 600,
            column: 25
          }
        },
        loc: {
          start: {
            line: 600,
            column: 34
          },
          end: {
            line: 600,
            column: 70
          }
        },
        line: 600
      },
      "82": {
        name: "(anonymous_82)",
        decl: {
          start: {
            line: 602,
            column: 20
          },
          end: {
            line: 602,
            column: 21
          }
        },
        loc: {
          start: {
            line: 602,
            column: 28
          },
          end: {
            line: 602,
            column: 58
          }
        },
        line: 602
      },
      "83": {
        name: "(anonymous_83)",
        decl: {
          start: {
            line: 603,
            column: 18
          },
          end: {
            line: 603,
            column: 19
          }
        },
        loc: {
          start: {
            line: 603,
            column: 22
          },
          end: {
            line: 603,
            column: 46
          }
        },
        line: 603
      },
      "84": {
        name: "(anonymous_84)",
        decl: {
          start: {
            line: 604,
            column: 24
          },
          end: {
            line: 604,
            column: 25
          }
        },
        loc: {
          start: {
            line: 604,
            column: 33
          },
          end: {
            line: 604,
            column: 68
          }
        },
        line: 604
      },
      "85": {
        name: "(anonymous_85)",
        decl: {
          start: {
            line: 606,
            column: 16
          },
          end: {
            line: 606,
            column: 17
          }
        },
        loc: {
          start: {
            line: 606,
            column: 25
          },
          end: {
            line: 606,
            column: 52
          }
        },
        line: 606
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 35
          },
          end: {
            line: 54,
            column: 38
          }
        }, {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 56,
            column: 5
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 54,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 54,
            column: 14
          }
        }, {
          start: {
            line: 54,
            column: 18
          },
          end: {
            line: 54,
            column: 32
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "3": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "4": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "7": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "8": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "9": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "10": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "11": {
        loc: {
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 21
          }
        }, {
          start: {
            line: 251,
            column: 25
          },
          end: {
            line: 251,
            column: 39
          }
        }],
        line: 251
      },
      "12": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "13": {
        loc: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 263,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 263,
            column: 46
          }
        }, {
          start: {
            line: 263,
            column: 50
          },
          end: {
            line: 263,
            column: 73
          }
        }],
        line: 263
      },
      "14": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "15": {
        loc: {
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 287,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 20
          },
          end: {
            line: 287,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "16": {
        loc: {
          start: {
            line: 305,
            column: 20
          },
          end: {
            line: 307,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 20
          },
          end: {
            line: 307,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "17": {
        loc: {
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        }, {
          start: {
            line: 331,
            column: 19
          },
          end: {
            line: 334,
            column: 13
          }
        }],
        line: 328
      },
      "18": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: 368,
            column: 15
          },
          end: {
            line: 377,
            column: 9
          }
        }],
        line: 362
      },
      "19": {
        loc: {
          start: {
            line: 365,
            column: 31
          },
          end: {
            line: 365,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 31
          },
          end: {
            line: 365,
            column: 59
          }
        }, {
          start: {
            line: 365,
            column: 63
          },
          end: {
            line: 365,
            column: 114
          }
        }],
        line: 365
      },
      "20": {
        loc: {
          start: {
            line: 366,
            column: 28
          },
          end: {
            line: 366,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 28
          },
          end: {
            line: 366,
            column: 53
          }
        }, {
          start: {
            line: 366,
            column: 57
          },
          end: {
            line: 366,
            column: 88
          }
        }],
        line: 366
      },
      "21": {
        loc: {
          start: {
            line: 368,
            column: 15
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 15
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: 373,
            column: 15
          },
          end: {
            line: 377,
            column: 9
          }
        }],
        line: 368
      },
      "22": {
        loc: {
          start: {
            line: 375,
            column: 31
          },
          end: {
            line: 375,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 31
          },
          end: {
            line: 375,
            column: 44
          }
        }, {
          start: {
            line: 375,
            column: 48
          },
          end: {
            line: 375,
            column: 80
          }
        }],
        line: 375
      },
      "23": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 394,
            column: 59
          }
        }, {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 396,
            column: 61
          }
        }, {
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 398,
            column: 58
          }
        }, {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 400,
            column: 57
          }
        }, {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 402,
            column: 55
          }
        }, {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 404,
            column: 56
          }
        }],
        line: 392
      },
      "24": {
        loc: {
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 416,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 416,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "25": {
        loc: {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 411,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 411,
            column: 25
          }
        }, {
          start: {
            line: 411,
            column: 29
          },
          end: {
            line: 411,
            column: 66
          }
        }],
        line: 411
      },
      "26": {
        loc: {
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 427,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "27": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 25
          }
        }, {
          start: {
            line: 422,
            column: 29
          },
          end: {
            line: 422,
            column: 66
          }
        }],
        line: 422
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0, 0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/jack/Documents/aclue-preprod/web/src/lib/api.ts"],
      sourcesContent: ["/**\n * aclue API Client\n * \n * Centralised HTTP client for all backend API communication.\n * Provides type-safe methods for authentication, data fetching,\n * and real-time interactions with the aclue backend.\n * \n * Key Features:\n *   - Automatic JWT token management with refresh\n *   - Request/response interceptors for auth and error handling\n *   - Type-safe API methods with full TypeScript support\n *   - Automatic retry logic for failed requests\n *   - Comprehensive error handling and user feedback\n * \n * Architecture:\n *   - TokenManager: Secure storage and management of JWT tokens\n *   - ApiClient: Main HTTP client with interceptors and methods\n *   - Convenience exports: Simplified API for common operations\n * \n * Usage:\n *   import { api } from '@/lib/api';\n *   const user = await api.getCurrentUser();\n *   const products = await api.getProducts({ category: 'electronics' });\n */\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { config, endpoints, appConfig } from '@/config';\nimport { \n  ApiResponse, \n  PaginatedResponse, \n  ApiError,\n  AuthResponse,\n  LoginRequest,\n  RegisterRequest,\n  RefreshTokenRequest,\n  User,\n  Product,\n  Category,\n  SearchQuery,\n  SearchResult,\n  SwipeSession,\n  SwipeRequest,\n  SwipeInteraction,\n  Recommendation,\n  RecommendationRequest,\n  RecommendationResponse,\n  GiftLink,\n  CreateGiftLinkRequest,\n  GiftLinkInteraction,\n  AnalyticsEvent\n} from '@/types';\n\n// ==============================================================================\n// TOKEN MANAGEMENT\n// ==============================================================================\n// Singleton class for secure JWT token storage and management\n\n/**\n * Secure JWT token manager with localStorage persistence.\n * \n * Manages access and refresh tokens for API authentication:\n *   - Singleton pattern ensures consistent token state\n *   - Automatic localStorage synchronisation\n *   - Secure token cleanup on logout\n *   - Server-side rendering safe (checks for window)\n * \n * Token Lifecycle:\n *   1. Tokens received from authentication endpoints\n *   2. Stored in localStorage and memory\n *   3. Access token used for API requests\n *   4. Refresh token used to renew expired access tokens\n *   5. Cleared on logout or authentication errors\n */\nclass TokenManager {\n  private static instance: TokenManager;  // Singleton instance\n  private accessToken: string | null = null;   // In-memory access token cache\n  private refreshToken: string | null = null;  // In-memory refresh token cache\n\n  /**\n   * Get singleton TokenManager instance.\n   * \n   * Creates new instance on first call and initialises tokens\n   * from localStorage if available.\n   * \n   * Returns:\n   *   TokenManager: Singleton instance\n   */\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n      // Initialize tokens from localStorage on first creation\n      TokenManager.instance.initializeFromStorage();\n    }\n    return TokenManager.instance;\n  }\n\n  /**\n   * Initialise tokens from localStorage on browser load.\n   * \n   * Safely checks for browser environment and loads previously\n   * stored tokens into memory cache.\n   * \n   * Note: Only runs in browser environment (SSR safe)\n   */\n  private initializeFromStorage(): void {\n    if (typeof window !== 'undefined') {\n      this.accessToken = localStorage.getItem(appConfig.storage.authToken);\n      this.refreshToken = localStorage.getItem(appConfig.storage.refreshToken);\n    }\n  }\n\n  /**\n   * Store new JWT tokens in memory and localStorage.\n   * \n   * Updates both in-memory cache and persistent storage\n   * for session continuity across browser reloads.\n   * \n   * Parameters:\n   *   accessToken: JWT access token for API requests\n   *   refreshToken: JWT refresh token for session renewal\n   */\n  setTokens(accessToken: string, refreshToken: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    \n    // Persist to localStorage for session continuity\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(appConfig.storage.authToken, accessToken);\n      localStorage.setItem(appConfig.storage.refreshToken, refreshToken);\n    }\n  }\n\n  /**\n   * Retrieve current access token for API requests.\n   * \n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   * \n   * Returns:\n   *   string | null: Current access token or null if not available\n   */\n  getAccessToken(): string | null {\n    // Return cached token if available\n    if (this.accessToken) return this.accessToken;\n    \n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem(appConfig.storage.authToken);\n    }\n    \n    return null;\n  }\n\n  /**\n   * Retrieve current refresh token for session renewal.\n   * \n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   * \n   * Returns:\n   *   string | null: Current refresh token or null if not available\n   */\n  getRefreshToken(): string | null {\n    // Return cached token if available\n    if (this.refreshToken) return this.refreshToken;\n    \n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem(appConfig.storage.refreshToken);\n    }\n    \n    return null;\n  }\n\n  /**\n   * Clear all stored tokens and user data.\n   * \n   * Removes tokens from both memory and localStorage.\n   * Called during logout or authentication errors.\n   * \n   * Security:\n   *   - Clears all authentication-related data\n   *   - Prevents token reuse after logout\n   *   - Ensures clean state for new authentication\n   */\n  clearTokens(): void {\n    // Clear memory cache\n    this.accessToken = null;\n    this.refreshToken = null;\n    \n    // Clear persistent storage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(appConfig.storage.authToken);\n      localStorage.removeItem(appConfig.storage.refreshToken);\n      localStorage.removeItem(appConfig.storage.user);\n    }\n  }\n}\n\n// ==============================================================================\n// API CLIENT\n// ==============================================================================\n// Main HTTP client with authentication and error handling\n\n/**\n * Comprehensive HTTP client for aclue API communication.\n * \n * Features:\n *   - Automatic JWT token attachment to requests\n *   - Token refresh on 401 errors with request retry\n *   - Consistent error handling and user feedback\n *   - Request/response interceptors for common patterns\n *   - Type-safe methods for all API endpoints\n * \n * Request Flow:\n *   1. Add Authorization header with current access token\n *   2. Send request to backend API\n *   3. Handle successful response or error\n *   4. On 401 error: refresh token and retry original request\n *   5. On refresh failure: clear tokens and redirect to login\n */\nclass ApiClient {\n  private client: AxiosInstance;      // Axios HTTP client instance\n  private tokenManager: TokenManager; // Token storage and management\n  private isRefreshing = false;       // Flag to prevent concurrent refresh attempts\n  private failedQueue: Array<{        // Queue for requests waiting on token refresh\n    resolve: (value: any) => void;\n    reject: (error: any) => void;\n  }> = [];\n\n  /**\n   * Initialise API client with configuration and interceptors.\n   * \n   * Sets up:\n   *   - Base URL from configuration\n   *   - Request/response timeouts\n   *   - Default headers\n   *   - Authentication and error interceptors\n   */\n  constructor() {\n    this.tokenManager = TokenManager.getInstance();\n    \n    // Create axios instance with base configuration\n    this.client = axios.create({\n      baseURL: config.apiUrl,              // Backend API base URL\n      timeout: 30000,                      // 30 second timeout for requests\n      headers: {\n        'Content-Type': 'application/json', // JSON request body format\n        'Accept': 'application/json',       // Expected response format\n      },\n    });\n\n    // Set up request/response interceptors\n    this.setupInterceptors();\n  }\n\n  /**\n   * Set up request and response interceptors for authentication and error handling.\n   * \n   * Request Interceptor:\n   *   - Automatically adds Authorization header with current access token\n   *   - Ensures all API requests are authenticated\n   * \n   * Response Interceptor:\n   *   - Handles 401 errors with automatic token refresh\n   *   - Queues failed requests during refresh process\n   *   - Retries original requests after successful refresh\n   *   - Redirects to login on refresh failure\n   */\n  private setupInterceptors(): void {\n    // ===========================================================================\n    // REQUEST INTERCEPTOR: Add authentication token to all requests\n    // ===========================================================================\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.tokenManager.getAccessToken();\n        if (token && config.headers) {\n          // Add Bearer token to Authorization header\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // ===========================================================================\n    // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh\n    // ===========================================================================\n    this.client.interceptors.response.use(\n      (response) => response, // Pass through successful responses\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized errors with automatic token refresh\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          \n          // If already refreshing, queue this request\n          if (this.isRefreshing) {\n            return new Promise((resolve, reject) => {\n              this.failedQueue.push({ resolve, reject });\n            }).then((token) => {\n              // Retry with new token\n              originalRequest.headers.Authorization = `Bearer ${token}`;\n              return this.client(originalRequest);\n            }).catch((err) => {\n              return Promise.reject(err);\n            });\n          }\n\n          // Mark request as retry to prevent infinite loops\n          originalRequest._retry = true;\n          this.isRefreshing = true;\n\n          try {\n            // Attempt to refresh the access token\n            const refreshToken = this.tokenManager.getRefreshToken();\n            if (!refreshToken) {\n              throw new Error('No refresh token available');\n            }\n\n            // Call refresh endpoint\n            const response = await this.refreshAccessToken({ refresh_token: refreshToken });\n            const { access_token, refresh_token: newRefreshToken } = response.data;\n\n            // Store new tokens\n            this.tokenManager.setTokens(access_token, newRefreshToken);\n            \n            // Process queued requests with new token\n            this.processQueue(access_token, null);\n            \n            // Retry original request with new token\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            return this.client(originalRequest);\n            \n          } catch (refreshError) {\n            // Refresh failed - clear tokens and redirect to login\n            this.processQueue(null, refreshError);\n            this.tokenManager.clearTokens();\n            \n            // Redirect to login if we're in the browser\n            if (typeof window !== 'undefined') {\n              window.location.href = '/auth/login';\n            }\n            \n            return Promise.reject(refreshError);\n          } finally {\n            this.isRefreshing = false;\n          }\n        }\n\n        // Handle other errors with consistent error formatting\n        return Promise.reject(this.handleError(error));\n      }\n    );\n  }\n\n  /**\n   * Process queued requests after token refresh attempt.\n   * \n   * During token refresh, multiple requests may fail with 401 errors.\n   * These requests are queued and processed once refresh completes.\n   * \n   * Parameters:\n   *   token: New access token (null if refresh failed)\n   *   error: Refresh error (null if refresh succeeded)\n   */\n  private processQueue(token: string | null, error: any): void {\n    this.failedQueue.forEach(({ resolve, reject }) => {\n      if (error) {\n        // Refresh failed - reject all queued requests\n        reject(error);\n      } else {\n        // Refresh succeeded - resolve with new token\n        resolve(token);\n      }\n    });\n    \n    // Clear the queue\n    this.failedQueue = [];\n  }\n\n  /**\n   * Convert axios errors to standardised ApiError format.\n   * \n   * Provides consistent error handling across all API methods\n   * with user-friendly messages and debugging information.\n   * \n   * Error Types:\n   *   - Response errors: Server returned error status (400, 500, etc.)\n   *   - Network errors: Request failed to reach server\n   *   - Request errors: Invalid request configuration\n   * \n   * Parameters:\n   *   error: Axios error object\n   * \n   * Returns:\n   *   ApiError: Standardised error with message, code, and details\n   */\n  private handleError(error: any): ApiError {\n    const apiError: ApiError = {\n      message: appConfig.errors.unknown,\n      code: 'UNKNOWN_ERROR',\n      status: 500,\n      timestamp: new Date().toISOString(),\n    };\n\n    if (error.response) {\n      // Server responded with error status (4xx, 5xx)\n      apiError.status = error.response.status;\n      apiError.message = error.response.data?.message || this.getErrorMessageByStatus(error.response.status);\n      apiError.code = error.response.data?.code || `HTTP_${error.response.status}`;\n      apiError.details = error.response.data?.details;\n    } else if (error.request) {\n      // Network error - request made but no response received\n      apiError.message = appConfig.errors.network;\n      apiError.code = 'NETWORK_ERROR';\n      apiError.status = 0;\n    } else {\n      // Request setup error - something wrong with request configuration\n      apiError.message = error.message || appConfig.errors.unknown;\n      apiError.code = 'REQUEST_ERROR';\n    }\n\n    return apiError;\n  }\n\n  /**\n   * Get user-friendly error message for HTTP status codes.\n   * \n   * Maps common HTTP status codes to localised error messages\n   * from application configuration.\n   * \n   * Parameters:\n   *   status: HTTP status code\n   * \n   * Returns:\n   *   string: User-friendly error message\n   */\n  private getErrorMessageByStatus(status: number): string {\n    switch (status) {\n      case 400:\n        return appConfig.errors.validation;   // \"Please check your input and try again\"\n      case 401:\n        return appConfig.errors.unauthorized; // \"Please log in to continue\"\n      case 403:\n        return appConfig.errors.forbidden;    // \"You don't have permission to do this\"\n      case 404:\n        return appConfig.errors.notFound;     // \"The requested item was not found\"\n      case 500:\n        return appConfig.errors.server;       // \"Something went wrong on our end\"\n      default:\n        return appConfig.errors.unknown;      // \"An unexpected error occurred\"\n    }\n  }\n\n  // Generic request methods\n  async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.get(url, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.post(url, data, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.put(url, data, config);\n    return response.data;\n  }\n\n  async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.patch(url, data, config);\n    return response.data;\n  }\n\n  async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.delete(url, config);\n    return response.data;\n  }\n\n  // Authentication methods\n  async login(data: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.login, data);\n  }\n\n  async register(data: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.register, data);\n  }\n\n  async refreshAccessToken(data: RefreshTokenRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.refresh, data);\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    const response = await this.post<void>(endpoints.auth.logout);\n    this.tokenManager.clearTokens();\n    return response;\n  }\n\n  async getCurrentUser(): Promise<ApiResponse<User>> {\n    return this.get<User>(endpoints.auth.me);\n  }\n\n  async forgotPassword(email: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.forgotPassword, { email });\n  }\n\n  async resetPassword(token: string, password: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.resetPassword, { token, password });\n  }\n\n  async verifyEmail(token: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.verifyEmail, { token });\n  }\n\n  // User methods\n  async updateProfile(data: Partial<User>): Promise<ApiResponse<User>> {\n    return this.put<User>(endpoints.users.updateProfile, data);\n  }\n\n  async getUserPreferences(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.preferences);\n  }\n\n  async updateUserPreferences(data: any): Promise<ApiResponse<any>> {\n    return this.put(endpoints.users.preferences, data);\n  }\n\n  async getUserStatistics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.statistics);\n  }\n\n  async deleteAccount(): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.users.deleteAccount);\n  }\n\n  // Product methods\n  async getProducts(params?: any): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.list, { params });\n  }\n\n  async searchProducts(query: SearchQuery): Promise<ApiResponse<SearchResult>> {\n    return this.post<SearchResult>(endpoints.products.search, query);\n  }\n\n  async getProduct(id: string): Promise<ApiResponse<Product>> {\n    return this.get<Product>(endpoints.products.byId(id));\n  }\n\n  async getCategories(): Promise<ApiResponse<Category[]>> {\n    return this.get<Category[]>(endpoints.products.categories);\n  }\n\n  async getFeaturedProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.featured);\n  }\n\n  async getTrendingProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.trending);\n  }\n\n  async getProductsByCategory(categoryId: string, params?: any): Promise<PaginatedResponse<Product>> {\n    return this.get<Product[]>(endpoints.products.byCategory(categoryId), { params });\n  }\n\n  // Swipe methods\n  async createSwipeSession(data: any): Promise<ApiResponse<SwipeSession>> {\n    return this.post<SwipeSession>(endpoints.swipes.createSession, data);\n  }\n\n  async getCurrentSwipeSession(): Promise<ApiResponse<SwipeSession>> {\n    return this.get<SwipeSession>(endpoints.swipes.currentSession);\n  }\n\n  async recordSwipe(sessionId: string, data: SwipeRequest): Promise<ApiResponse<SwipeInteraction>> {\n    return this.post<SwipeInteraction>(endpoints.swipes.interactions(sessionId), data);\n  }\n\n  async getSwipeAnalytics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.swipes.analytics);\n  }\n\n  // Recommendation methods\n  async generateRecommendations(data: RecommendationRequest): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.generate, data);\n  }\n\n  async getRecommendations(params?: any): Promise<PaginatedResponse<Recommendation>> {\n    return this.get<Recommendation[]>(endpoints.recommendations.list, { params });\n  }\n\n  async getRecommendation(id: string): Promise<ApiResponse<Recommendation>> {\n    return this.get<Recommendation>(endpoints.recommendations.byId(id));\n  }\n\n  async provideFeedback(id: string, feedback: any): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.recommendations.feedback(id), feedback);\n  }\n\n  async refreshRecommendations(): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.refresh);\n  }\n\n  // Gift Link methods\n  async createGiftLink(data: CreateGiftLinkRequest): Promise<ApiResponse<GiftLink>> {\n    return this.post<GiftLink>(endpoints.giftLinks.create, data);\n  }\n\n  async getGiftLinks(): Promise<ApiResponse<GiftLink[]>> {\n    return this.get<GiftLink[]>(endpoints.giftLinks.list);\n  }\n\n  async getGiftLink(id: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byId(id));\n  }\n\n  async getGiftLinkByToken(token: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byToken(token));\n  }\n\n  async deleteGiftLink(id: string): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.giftLinks.delete(id));\n  }\n\n  async getGiftLinkAnalytics(id: string): Promise<ApiResponse<GiftLinkInteraction[]>> {\n    return this.get<GiftLinkInteraction[]>(endpoints.giftLinks.analytics(id));\n  }\n\n  // Analytics methods\n  async trackEvent(event: AnalyticsEvent): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.analytics.track, event);\n  }\n\n  async getAnalyticsDashboard(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.analytics.dashboard);\n  }\n\n  // Health check\n  async healthCheck(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.health);\n  }\n}\n\n// Create and export API client instance\nexport const apiClient = new ApiClient();\n\n// Export token manager for external use\nexport const tokenManager = TokenManager.getInstance();\n\n// Export convenience methods\nexport const api = {\n  // Auth\n  login: (data: LoginRequest) => apiClient.login(data),\n  register: (data: RegisterRequest) => apiClient.register(data),\n  logout: () => apiClient.logout(),\n  getCurrentUser: () => apiClient.getCurrentUser(),\n  \n  // Users\n  getUserStatistics: () => apiClient.getUserStatistics(),\n  \n  // Products\n  getProducts: (params?: any) => apiClient.getProducts(params),\n  searchProducts: (query: SearchQuery) => apiClient.searchProducts(query),\n  getProduct: (id: string) => apiClient.getProduct(id),\n  getCategories: () => apiClient.getCategories(),\n  \n  // Swipes\n  createSwipeSession: (data: any) => apiClient.createSwipeSession(data),\n  recordSwipe: (sessionId: string, data: SwipeRequest) => apiClient.recordSwipe(sessionId, data),\n  \n  // Recommendations\n  generateRecommendations: (data: RecommendationRequest) => apiClient.generateRecommendations(data),\n  getRecommendations: (params?: any) => apiClient.getRecommendations(params),\n  \n  // Gift Links\n  createGiftLink: (data: CreateGiftLinkRequest) => apiClient.createGiftLink(data),\n  getGiftLinks: () => apiClient.getGiftLinks(),\n  getGiftLinkByToken: (token: string) => apiClient.getGiftLinkByToken(token),\n  \n  // Analytics\n  trackEvent: (event: AnalyticsEvent) => apiClient.trackEvent(event),\n};\n\nexport default apiClient;"],
      names: ["api", "apiClient", "tokenManager", "TokenManager", "getInstance", "instance", "initializeFromStorage", "window", "accessToken", "localStorage", "getItem", "appConfig", "storage", "authToken", "refreshToken", "setTokens", "setItem", "getAccessToken", "getRefreshToken", "clearTokens", "removeItem", "user", "ApiClient", "constructor", "isRefreshing", "failedQueue", "client", "axios", "create", "baseURL", "config", "apiUrl", "timeout", "headers", "setupInterceptors", "interceptors", "request", "use", "token", "Authorization", "error", "Promise", "reject", "response", "originalRequest", "status", "_retry", "resolve", "push", "then", "catch", "err", "Error", "refreshAccessToken", "refresh_token", "access_token", "newRefreshToken", "data", "processQueue", "refreshError", "location", "href", "handleError", "forEach", "apiError", "message", "errors", "unknown", "code", "timestamp", "Date", "toISOString", "getErrorMessageByStatus", "details", "network", "validation", "unauthorized", "forbidden", "notFound", "server", "get", "url", "hasOwnProperty", "success", "post", "put", "patch", "delete", "login", "endpoints", "auth", "register", "refresh", "logout", "getCurrentUser", "me", "forgotPassword", "email", "resetPassword", "password", "verifyEmail", "updateProfile", "users", "getUserPreferences", "preferences", "updateUserPreferences", "getUserStatistics", "statistics", "deleteAccount", "getProducts", "params", "products", "list", "searchProducts", "query", "search", "getProduct", "id", "byId", "getCategories", "categories", "getFeaturedProducts", "featured", "getTrendingProducts", "trending", "getProductsByCategory", "categoryId", "byCategory", "createSwipeSession", "swipes", "createSession", "getCurrentSwipeSession", "currentSession", "recordSwipe", "sessionId", "interactions", "getSwipeAnalytics", "analytics", "generateRecommendations", "recommendations", "generate", "getRecommendations", "getRecommendation", "provideFeedback", "feedback", "refreshRecommendations", "createGiftLink", "giftLinks", "getGiftLinks", "getGiftLink", "getGiftLinkByToken", "byToken", "deleteGiftLink", "getGiftLinkAnalytics", "trackEvent", "event", "track", "getAnalyticsDashboard", "dashboard", "healthCheck", "health"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "be5e9a58b0f2f56ebdf6671edb72e4ec1b6ff03a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vtt3zf6ox = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vtt3zf6ox();
cov_vtt3zf6ox().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_vtt3zf6ox().f[0]++;
  cov_vtt3zf6ox().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_vtt3zf6ox().s[3]++;
_export(exports, {
  api: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[1]++;
    cov_vtt3zf6ox().s[4]++;
    return api;
  },
  apiClient: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[2]++;
    cov_vtt3zf6ox().s[5]++;
    return apiClient;
  },
  default: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[3]++;
    cov_vtt3zf6ox().s[6]++;
    return _default;
  },
  tokenManager: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[4]++;
    cov_vtt3zf6ox().s[7]++;
    return tokenManager;
  }
});
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_vtt3zf6ox().s[8]++, _interop_require_default(require("axios")));
const _config =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[9]++, require("../config"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_vtt3zf6ox().f[5]++;
  cov_vtt3zf6ox().s[10]++;
  return /* istanbul ignore next */(cov_vtt3zf6ox().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_vtt3zf6ox().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_vtt3zf6ox().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_vtt3zf6ox().b[0][1]++, {
    default: obj
  });
}
// ==============================================================================
// TOKEN MANAGEMENT
// ==============================================================================
// Singleton class for secure JWT token storage and management
/**
 * Secure JWT token manager with localStorage persistence.
 * 
 * Manages access and refresh tokens for API authentication:
 *   - Singleton pattern ensures consistent token state
 *   - Automatic localStorage synchronisation
 *   - Secure token cleanup on logout
 *   - Server-side rendering safe (checks for window)
 * 
 * Token Lifecycle:
 *   1. Tokens received from authentication endpoints
 *   2. Stored in localStorage and memory
 *   3. Access token used for API requests
 *   4. Refresh token used to renew expired access tokens
 *   5. Cleared on logout or authentication errors
 */
class TokenManager {
  /**
  * Get singleton TokenManager instance.
  * 
  * Creates new instance on first call and initialises tokens
  * from localStorage if available.
  * 
  * Returns:
  *   TokenManager: Singleton instance
  */
  static getInstance() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[6]++;
    cov_vtt3zf6ox().s[11]++;
    if (!TokenManager.instance) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[2][0]++;
      cov_vtt3zf6ox().s[12]++;
      TokenManager.instance = new TokenManager();
      // Initialize tokens from localStorage on first creation
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[13]++;
      TokenManager.instance.initializeFromStorage();
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[2][1]++;
    }
    cov_vtt3zf6ox().s[14]++;
    return TokenManager.instance;
  }
  /**
  * Initialise tokens from localStorage on browser load.
  * 
  * Safely checks for browser environment and loads previously
  * stored tokens into memory cache.
  * 
  * Note: Only runs in browser environment (SSR safe)
  */
  initializeFromStorage() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[7]++;
    cov_vtt3zf6ox().s[15]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[3][0]++;
      cov_vtt3zf6ox().s[16]++;
      this.accessToken = localStorage.getItem(_config.appConfig.storage.authToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[17]++;
      this.refreshToken = localStorage.getItem(_config.appConfig.storage.refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[3][1]++;
    }
  }
  /**
  * Store new JWT tokens in memory and localStorage.
  * 
  * Updates both in-memory cache and persistent storage
  * for session continuity across browser reloads.
  * 
  * Parameters:
  *   accessToken: JWT access token for API requests
  *   refreshToken: JWT refresh token for session renewal
  */
  setTokens(accessToken, refreshToken) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[8]++;
    cov_vtt3zf6ox().s[18]++;
    this.accessToken = accessToken;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[19]++;
    this.refreshToken = refreshToken;
    // Persist to localStorage for session continuity
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[20]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[4][0]++;
      cov_vtt3zf6ox().s[21]++;
      localStorage.setItem(_config.appConfig.storage.authToken, accessToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[22]++;
      localStorage.setItem(_config.appConfig.storage.refreshToken, refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[4][1]++;
    }
  }
  /**
  * Retrieve current access token for API requests.
  * 
  * Checks memory cache first, then falls back to localStorage.
  * Returns null if no token is available.
  * 
  * Returns:
  *   string | null: Current access token or null if not available
  */
  getAccessToken() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[9]++;
    cov_vtt3zf6ox().s[23]++;
    // Return cached token if available
    if (this.accessToken) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[5][0]++;
      cov_vtt3zf6ox().s[24]++;
      return this.accessToken;
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[5][1]++;
    }
    // Fallback to localStorage (handles page reloads)
    cov_vtt3zf6ox().s[25]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[6][0]++;
      cov_vtt3zf6ox().s[26]++;
      return localStorage.getItem(_config.appConfig.storage.authToken);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[6][1]++;
    }
    cov_vtt3zf6ox().s[27]++;
    return null;
  }
  /**
  * Retrieve current refresh token for session renewal.
  * 
  * Checks memory cache first, then falls back to localStorage.
  * Returns null if no token is available.
  * 
  * Returns:
  *   string | null: Current refresh token or null if not available
  */
  getRefreshToken() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[10]++;
    cov_vtt3zf6ox().s[28]++;
    // Return cached token if available
    if (this.refreshToken) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[7][0]++;
      cov_vtt3zf6ox().s[29]++;
      return this.refreshToken;
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[7][1]++;
    }
    // Fallback to localStorage (handles page reloads)
    cov_vtt3zf6ox().s[30]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[8][0]++;
      cov_vtt3zf6ox().s[31]++;
      return localStorage.getItem(_config.appConfig.storage.refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[8][1]++;
    }
    cov_vtt3zf6ox().s[32]++;
    return null;
  }
  /**
  * Clear all stored tokens and user data.
  * 
  * Removes tokens from both memory and localStorage.
  * Called during logout or authentication errors.
  * 
  * Security:
  *   - Clears all authentication-related data
  *   - Prevents token reuse after logout
  *   - Ensures clean state for new authentication
  */
  clearTokens() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[11]++;
    cov_vtt3zf6ox().s[33]++;
    // Clear memory cache
    this.accessToken = null;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[34]++;
    this.refreshToken = null;
    // Clear persistent storage
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[35]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[9][0]++;
      cov_vtt3zf6ox().s[36]++;
      localStorage.removeItem(_config.appConfig.storage.authToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[37]++;
      localStorage.removeItem(_config.appConfig.storage.refreshToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[38]++;
      localStorage.removeItem(_config.appConfig.storage.user);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[9][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[12]++;
    cov_vtt3zf6ox().s[39]++;
    this.accessToken = null // In-memory access token cache
    ;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[40]++;
    this.refreshToken = null // In-memory refresh token cache
    ;
  }
}
// ==============================================================================
// API CLIENT
// ==============================================================================
// Main HTTP client with authentication and error handling
/**
 * Comprehensive HTTP client for aclue API communication.
 * 
 * Features:
 *   - Automatic JWT token attachment to requests
 *   - Token refresh on 401 errors with request retry
 *   - Consistent error handling and user feedback
 *   - Request/response interceptors for common patterns
 *   - Type-safe methods for all API endpoints
 * 
 * Request Flow:
 *   1. Add Authorization header with current access token
 *   2. Send request to backend API
 *   3. Handle successful response or error
 *   4. On 401 error: refresh token and retry original request
 *   5. On refresh failure: clear tokens and redirect to login
 */
class ApiClient {
  /**
  * Initialise API client with configuration and interceptors.
  * 
  * Sets up:
  *   - Base URL from configuration
  *   - Request/response timeouts
  *   - Default headers
  *   - Authentication and error interceptors
  */
  constructor() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[13]++;
    cov_vtt3zf6ox().s[41]++;
    this.isRefreshing = false // Flag to prevent concurrent refresh attempts
    ;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[42]++;
    this.failedQueue = [];
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[43]++;
    this.tokenManager = TokenManager.getInstance();
    // Create axios instance with base configuration
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[44]++;
    this.client = _axios.default.create({
      baseURL: _config.config.apiUrl,
      timeout: 30000,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    });
    // Set up request/response interceptors
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[45]++;
    this.setupInterceptors();
  }
  /**
  * Set up request and response interceptors for authentication and error handling.
  * 
  * Request Interceptor:
  *   - Automatically adds Authorization header with current access token
  *   - Ensures all API requests are authenticated
  * 
  * Response Interceptor:
  *   - Handles 401 errors with automatic token refresh
  *   - Queues failed requests during refresh process
  *   - Retries original requests after successful refresh
  *   - Redirects to login on refresh failure
  */
  setupInterceptors() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[14]++;
    cov_vtt3zf6ox().s[46]++;
    // ===========================================================================
    // REQUEST INTERCEPTOR: Add authentication token to all requests
    // ===========================================================================
    this.client.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[15]++;
      const token =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().s[47]++, this.tokenManager.getAccessToken());
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[11][0]++, token) &&
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[11][1]++, config.headers)) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[10][0]++;
        cov_vtt3zf6ox().s[49]++;
        // Add Bearer token to Authorization header
        config.headers.Authorization = `Bearer ${token}`;
      } else
      /* istanbul ignore next */
      {
        cov_vtt3zf6ox().b[10][1]++;
      }
      cov_vtt3zf6ox().s[50]++;
      return config;
    }, error => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[16]++;
      cov_vtt3zf6ox().s[51]++;
      return Promise.reject(error);
    });
    // ===========================================================================
    // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh
    // ===========================================================================
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[52]++;
    this.client.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[17]++;
      cov_vtt3zf6ox().s[53]++;
      return response;
    }, async error => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[18]++;
      const originalRequest =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().s[54]++, error.config);
      // Handle 401 Unauthorized errors with automatic token refresh
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[55]++;
      if (
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[13][0]++, error.response?.status === 401) &&
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[13][1]++, !originalRequest._retry)) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[12][0]++;
        cov_vtt3zf6ox().s[56]++;
        // If already refreshing, queue this request
        if (this.isRefreshing) {
          /* istanbul ignore next */
          cov_vtt3zf6ox().b[14][0]++;
          cov_vtt3zf6ox().s[57]++;
          return new Promise((resolve, reject) => {
            /* istanbul ignore next */
            cov_vtt3zf6ox().f[19]++;
            cov_vtt3zf6ox().s[58]++;
            this.failedQueue.push({
              resolve,
              reject
            });
          }).then(token => {
            /* istanbul ignore next */
            cov_vtt3zf6ox().f[20]++;
            cov_vtt3zf6ox().s[59]++;
            // Retry with new token
            originalRequest.headers.Authorization = `Bearer ${token}`;
            /* istanbul ignore next */
            cov_vtt3zf6ox().s[60]++;
            return this.client(originalRequest);
          }).catch(err => {
            /* istanbul ignore next */
            cov_vtt3zf6ox().f[21]++;
            cov_vtt3zf6ox().s[61]++;
            return Promise.reject(err);
          });
        } else
        /* istanbul ignore next */
        {
          cov_vtt3zf6ox().b[14][1]++;
        }
        // Mark request as retry to prevent infinite loops
        cov_vtt3zf6ox().s[62]++;
        originalRequest._retry = true;
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[63]++;
        this.isRefreshing = true;
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[64]++;
        try {
          // Attempt to refresh the access token
          const refreshToken =
          /* istanbul ignore next */
          (cov_vtt3zf6ox().s[65]++, this.tokenManager.getRefreshToken());
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[66]++;
          if (!refreshToken) {
            /* istanbul ignore next */
            cov_vtt3zf6ox().b[15][0]++;
            cov_vtt3zf6ox().s[67]++;
            throw new Error("No refresh token available");
          } else
          /* istanbul ignore next */
          {
            cov_vtt3zf6ox().b[15][1]++;
          }
          // Call refresh endpoint
          const response =
          /* istanbul ignore next */
          (cov_vtt3zf6ox().s[68]++, await this.refreshAccessToken({
            refresh_token: refreshToken
          }));
          const {
            access_token,
            refresh_token: newRefreshToken
          } =
          /* istanbul ignore next */
          (cov_vtt3zf6ox().s[69]++, response.data);
          // Store new tokens
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[70]++;
          this.tokenManager.setTokens(access_token, newRefreshToken);
          // Process queued requests with new token
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[71]++;
          this.processQueue(access_token, null);
          // Retry original request with new token
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[72]++;
          originalRequest.headers.Authorization = `Bearer ${access_token}`;
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[73]++;
          return this.client(originalRequest);
        } catch (refreshError) {
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[74]++;
          // Refresh failed - clear tokens and redirect to login
          this.processQueue(null, refreshError);
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[75]++;
          this.tokenManager.clearTokens();
          // Redirect to login if we're in the browser
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[76]++;
          if (typeof window !== "undefined") {
            /* istanbul ignore next */
            cov_vtt3zf6ox().b[16][0]++;
            cov_vtt3zf6ox().s[77]++;
            window.location.href = "/auth/login";
          } else
          /* istanbul ignore next */
          {
            cov_vtt3zf6ox().b[16][1]++;
          }
          cov_vtt3zf6ox().s[78]++;
          return Promise.reject(refreshError);
        } finally {
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[79]++;
          this.isRefreshing = false;
        }
      } else
      /* istanbul ignore next */
      {
        cov_vtt3zf6ox().b[12][1]++;
      }
      // Handle other errors with consistent error formatting
      cov_vtt3zf6ox().s[80]++;
      return Promise.reject(this.handleError(error));
    });
  }
  /**
  * Process queued requests after token refresh attempt.
  * 
  * During token refresh, multiple requests may fail with 401 errors.
  * These requests are queued and processed once refresh completes.
  * 
  * Parameters:
  *   token: New access token (null if refresh failed)
  *   error: Refresh error (null if refresh succeeded)
  */
  processQueue(token, error) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[22]++;
    cov_vtt3zf6ox().s[81]++;
    this.failedQueue.forEach(({
      resolve,
      reject
    }) => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[23]++;
      cov_vtt3zf6ox().s[82]++;
      if (error) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[17][0]++;
        cov_vtt3zf6ox().s[83]++;
        // Refresh failed - reject all queued requests
        reject(error);
      } else {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[17][1]++;
        cov_vtt3zf6ox().s[84]++;
        // Refresh succeeded - resolve with new token
        resolve(token);
      }
    });
    // Clear the queue
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[85]++;
    this.failedQueue = [];
  }
  /**
  * Convert axios errors to standardised ApiError format.
  * 
  * Provides consistent error handling across all API methods
  * with user-friendly messages and debugging information.
  * 
  * Error Types:
  *   - Response errors: Server returned error status (400, 500, etc.)
  *   - Network errors: Request failed to reach server
  *   - Request errors: Invalid request configuration
  * 
  * Parameters:
  *   error: Axios error object
  * 
  * Returns:
  *   ApiError: Standardised error with message, code, and details
  */
  handleError(error) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[24]++;
    const apiError =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[86]++, {
      message: _config.appConfig.errors.unknown,
      code: "UNKNOWN_ERROR",
      status: 500,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[87]++;
    if (error.response) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[18][0]++;
      cov_vtt3zf6ox().s[88]++;
      // Server responded with error status (4xx, 5xx)
      apiError.status = error.response.status;
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[89]++;
      apiError.message =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[19][0]++, error.response.data?.message) ||
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[19][1]++, this.getErrorMessageByStatus(error.response.status));
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[90]++;
      apiError.code =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[20][0]++, error.response.data?.code) ||
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[20][1]++, `HTTP_${error.response.status}`);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[91]++;
      apiError.details = error.response.data?.details;
    } else {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[18][1]++;
      cov_vtt3zf6ox().s[92]++;
      if (error.request) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[21][0]++;
        cov_vtt3zf6ox().s[93]++;
        // Network error - request made but no response received
        apiError.message = _config.appConfig.errors.network;
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[94]++;
        apiError.code = "NETWORK_ERROR";
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[95]++;
        apiError.status = 0;
      } else {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[21][1]++;
        cov_vtt3zf6ox().s[96]++;
        // Request setup error - something wrong with request configuration
        apiError.message =
        /* istanbul ignore next */
        (cov_vtt3zf6ox().b[22][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_vtt3zf6ox().b[22][1]++, _config.appConfig.errors.unknown);
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[97]++;
        apiError.code = "REQUEST_ERROR";
      }
    }
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[98]++;
    return apiError;
  }
  /**
  * Get user-friendly error message for HTTP status codes.
  * 
  * Maps common HTTP status codes to localised error messages
  * from application configuration.
  * 
  * Parameters:
  *   status: HTTP status code
  * 
  * Returns:
  *   string: User-friendly error message
  */
  getErrorMessageByStatus(status) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[25]++;
    cov_vtt3zf6ox().s[99]++;
    switch (status) {
      case 400:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][0]++;
        cov_vtt3zf6ox().s[100]++;
        return _config.appConfig.errors.validation;
      // "Please check your input and try again"
      case 401:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][1]++;
        cov_vtt3zf6ox().s[101]++;
        return _config.appConfig.errors.unauthorized;
      // "Please log in to continue"
      case 403:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][2]++;
        cov_vtt3zf6ox().s[102]++;
        return _config.appConfig.errors.forbidden;
      // "You don't have permission to do this"
      case 404:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][3]++;
        cov_vtt3zf6ox().s[103]++;
        return _config.appConfig.errors.notFound;
      // "The requested item was not found"
      case 500:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][4]++;
        cov_vtt3zf6ox().s[104]++;
        return _config.appConfig.errors.server;
      // "Something went wrong on our end"
      default:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][5]++;
        cov_vtt3zf6ox().s[105]++;
        return _config.appConfig.errors.unknown;
      // "An unexpected error occurred"
    }
  }
  // Generic request methods
  async get(url, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[26]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[106]++, await this.client.get(url, config));
    // Handle direct response from backend (not wrapped in ApiResponse)
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[25][0]++, response.data) &&
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[25][1]++, !response.data.hasOwnProperty("data"))) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[24][0]++;
      cov_vtt3zf6ox().s[108]++;
      return {
        data: response.data,
        success: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[24][1]++;
    }
    cov_vtt3zf6ox().s[109]++;
    return response.data;
  }
  async post(url, data, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[27]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[110]++, await this.client.post(url, data, config));
    // Handle direct response from backend (not wrapped in ApiResponse)
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[111]++;
    if (
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[27][0]++, response.data) &&
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[27][1]++, !response.data.hasOwnProperty("data"))) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[26][0]++;
      cov_vtt3zf6ox().s[112]++;
      return {
        data: response.data,
        success: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[26][1]++;
    }
    cov_vtt3zf6ox().s[113]++;
    return response.data;
  }
  async put(url, data, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[28]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[114]++, await this.client.put(url, data, config));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[115]++;
    return response.data;
  }
  async patch(url, data, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[29]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[116]++, await this.client.patch(url, data, config));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[117]++;
    return response.data;
  }
  async delete(url, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[30]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[118]++, await this.client.delete(url, config));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[119]++;
    return response.data;
  }
  // Authentication methods
  async login(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[31]++;
    cov_vtt3zf6ox().s[120]++;
    return this.post(_config.endpoints.auth.login, data);
  }
  async register(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[32]++;
    cov_vtt3zf6ox().s[121]++;
    return this.post(_config.endpoints.auth.register, data);
  }
  async refreshAccessToken(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[33]++;
    cov_vtt3zf6ox().s[122]++;
    return this.post(_config.endpoints.auth.refresh, data);
  }
  async logout() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[34]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[123]++, await this.post(_config.endpoints.auth.logout));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[124]++;
    this.tokenManager.clearTokens();
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[125]++;
    return response;
  }
  async getCurrentUser() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[35]++;
    cov_vtt3zf6ox().s[126]++;
    return this.get(_config.endpoints.auth.me);
  }
  async forgotPassword(email) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[36]++;
    cov_vtt3zf6ox().s[127]++;
    return this.post(_config.endpoints.auth.forgotPassword, {
      email
    });
  }
  async resetPassword(token, password) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[37]++;
    cov_vtt3zf6ox().s[128]++;
    return this.post(_config.endpoints.auth.resetPassword, {
      token,
      password
    });
  }
  async verifyEmail(token) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[38]++;
    cov_vtt3zf6ox().s[129]++;
    return this.post(_config.endpoints.auth.verifyEmail, {
      token
    });
  }
  // User methods
  async updateProfile(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[39]++;
    cov_vtt3zf6ox().s[130]++;
    return this.put(_config.endpoints.users.updateProfile, data);
  }
  async getUserPreferences() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[40]++;
    cov_vtt3zf6ox().s[131]++;
    return this.get(_config.endpoints.users.preferences);
  }
  async updateUserPreferences(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[41]++;
    cov_vtt3zf6ox().s[132]++;
    return this.put(_config.endpoints.users.preferences, data);
  }
  async getUserStatistics() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[42]++;
    cov_vtt3zf6ox().s[133]++;
    return this.get(_config.endpoints.users.statistics);
  }
  async deleteAccount() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[43]++;
    cov_vtt3zf6ox().s[134]++;
    return this.delete(_config.endpoints.users.deleteAccount);
  }
  // Product methods
  async getProducts(params) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[44]++;
    cov_vtt3zf6ox().s[135]++;
    return this.get(_config.endpoints.products.list, {
      params
    });
  }
  async searchProducts(query) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[45]++;
    cov_vtt3zf6ox().s[136]++;
    return this.post(_config.endpoints.products.search, query);
  }
  async getProduct(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[46]++;
    cov_vtt3zf6ox().s[137]++;
    return this.get(_config.endpoints.products.byId(id));
  }
  async getCategories() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[47]++;
    cov_vtt3zf6ox().s[138]++;
    return this.get(_config.endpoints.products.categories);
  }
  async getFeaturedProducts() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[48]++;
    cov_vtt3zf6ox().s[139]++;
    return this.get(_config.endpoints.products.featured);
  }
  async getTrendingProducts() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[49]++;
    cov_vtt3zf6ox().s[140]++;
    return this.get(_config.endpoints.products.trending);
  }
  async getProductsByCategory(categoryId, params) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[50]++;
    cov_vtt3zf6ox().s[141]++;
    return this.get(_config.endpoints.products.byCategory(categoryId), {
      params
    });
  }
  // Swipe methods
  async createSwipeSession(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[51]++;
    cov_vtt3zf6ox().s[142]++;
    return this.post(_config.endpoints.swipes.createSession, data);
  }
  async getCurrentSwipeSession() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[52]++;
    cov_vtt3zf6ox().s[143]++;
    return this.get(_config.endpoints.swipes.currentSession);
  }
  async recordSwipe(sessionId, data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[53]++;
    cov_vtt3zf6ox().s[144]++;
    return this.post(_config.endpoints.swipes.interactions(sessionId), data);
  }
  async getSwipeAnalytics() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[54]++;
    cov_vtt3zf6ox().s[145]++;
    return this.get(_config.endpoints.swipes.analytics);
  }
  // Recommendation methods
  async generateRecommendations(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[55]++;
    cov_vtt3zf6ox().s[146]++;
    return this.post(_config.endpoints.recommendations.generate, data);
  }
  async getRecommendations(params) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[56]++;
    cov_vtt3zf6ox().s[147]++;
    return this.get(_config.endpoints.recommendations.list, {
      params
    });
  }
  async getRecommendation(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[57]++;
    cov_vtt3zf6ox().s[148]++;
    return this.get(_config.endpoints.recommendations.byId(id));
  }
  async provideFeedback(id, feedback) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[58]++;
    cov_vtt3zf6ox().s[149]++;
    return this.post(_config.endpoints.recommendations.feedback(id), feedback);
  }
  async refreshRecommendations() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[59]++;
    cov_vtt3zf6ox().s[150]++;
    return this.post(_config.endpoints.recommendations.refresh);
  }
  // Gift Link methods
  async createGiftLink(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[60]++;
    cov_vtt3zf6ox().s[151]++;
    return this.post(_config.endpoints.giftLinks.create, data);
  }
  async getGiftLinks() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[61]++;
    cov_vtt3zf6ox().s[152]++;
    return this.get(_config.endpoints.giftLinks.list);
  }
  async getGiftLink(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[62]++;
    cov_vtt3zf6ox().s[153]++;
    return this.get(_config.endpoints.giftLinks.byId(id));
  }
  async getGiftLinkByToken(token) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[63]++;
    cov_vtt3zf6ox().s[154]++;
    return this.get(_config.endpoints.giftLinks.byToken(token));
  }
  async deleteGiftLink(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[64]++;
    cov_vtt3zf6ox().s[155]++;
    return this.delete(_config.endpoints.giftLinks.delete(id));
  }
  async getGiftLinkAnalytics(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[65]++;
    cov_vtt3zf6ox().s[156]++;
    return this.get(_config.endpoints.giftLinks.analytics(id));
  }
  // Analytics methods
  async trackEvent(event) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[66]++;
    cov_vtt3zf6ox().s[157]++;
    return this.post(_config.endpoints.analytics.track, event);
  }
  async getAnalyticsDashboard() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[67]++;
    cov_vtt3zf6ox().s[158]++;
    return this.get(_config.endpoints.analytics.dashboard);
  }
  // Health check
  async healthCheck() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[68]++;
    cov_vtt3zf6ox().s[159]++;
    return this.get(_config.endpoints.health);
  }
}
const apiClient =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[160]++, new ApiClient());
const tokenManager =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[161]++, TokenManager.getInstance());
const api =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[162]++, {
  // Auth
  login: data => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[69]++;
    cov_vtt3zf6ox().s[163]++;
    return apiClient.login(data);
  },
  register: data => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[70]++;
    cov_vtt3zf6ox().s[164]++;
    return apiClient.register(data);
  },
  logout: () => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[71]++;
    cov_vtt3zf6ox().s[165]++;
    return apiClient.logout();
  },
  getCurrentUser: () => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[72]++;
    cov_vtt3zf6ox().s[166]++;
    return apiClient.getCurrentUser();
  },
  // Users
  getUserStatistics: () => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[73]++;
    cov_vtt3zf6ox().s[167]++;
    return apiClient.getUserStatistics();
  },
  // Products
  getProducts: params => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[74]++;
    cov_vtt3zf6ox().s[168]++;
    return apiClient.getProducts(params);
  },
  searchProducts: query => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[75]++;
    cov_vtt3zf6ox().s[169]++;
    return apiClient.searchProducts(query);
  },
  getProduct: id => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[76]++;
    cov_vtt3zf6ox().s[170]++;
    return apiClient.getProduct(id);
  },
  getCategories: () => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[77]++;
    cov_vtt3zf6ox().s[171]++;
    return apiClient.getCategories();
  },
  // Swipes
  createSwipeSession: data => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[78]++;
    cov_vtt3zf6ox().s[172]++;
    return apiClient.createSwipeSession(data);
  },
  recordSwipe: (sessionId, data) => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[79]++;
    cov_vtt3zf6ox().s[173]++;
    return apiClient.recordSwipe(sessionId, data);
  },
  // Recommendations
  generateRecommendations: data => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[80]++;
    cov_vtt3zf6ox().s[174]++;
    return apiClient.generateRecommendations(data);
  },
  getRecommendations: params => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[81]++;
    cov_vtt3zf6ox().s[175]++;
    return apiClient.getRecommendations(params);
  },
  // Gift Links
  createGiftLink: data => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[82]++;
    cov_vtt3zf6ox().s[176]++;
    return apiClient.createGiftLink(data);
  },
  getGiftLinks: () => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[83]++;
    cov_vtt3zf6ox().s[177]++;
    return apiClient.getGiftLinks();
  },
  getGiftLinkByToken: token => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[84]++;
    cov_vtt3zf6ox().s[178]++;
    return apiClient.getGiftLinkByToken(token);
  },
  // Analytics
  trackEvent: event => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[85]++;
    cov_vtt3zf6ox().s[179]++;
    return apiClient.trackEvent(event);
  }
});
const _default =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[180]++, apiClient);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,