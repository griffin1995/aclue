9da5953ea2d945171424c70965ee44f6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDarkMode", {
    enumerable: true,
    get: function() {
        return useDarkMode;
    }
});
const _react = require("react");
const _config = require("../config");
function useDarkMode() {
    const [theme, setThemeState] = (0, _react.useState)("system");
    const [isDark, setIsDark] = (0, _react.useState)(false);
    // Initialize theme from localStorage
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined") {
            const savedTheme = localStorage.getItem(_config.appConfig.storage.theme);
            if (savedTheme && [
                "light",
                "dark",
                "system"
            ].includes(savedTheme)) {
                setThemeState(savedTheme);
            }
        }
    }, []);
    // Update dark mode state based on theme preference
    (0, _react.useEffect)(()=>{
        const updateDarkMode = ()=>{
            let shouldBeDark = false;
            if (theme === "dark") {
                shouldBeDark = true;
            } else if (theme === "light") {
                shouldBeDark = false;
            } else if (theme === "system") {
                shouldBeDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
            }
            setIsDark(shouldBeDark);
            // Update DOM
            if (typeof window !== "undefined") {
                const root = window.document.documentElement;
                if (shouldBeDark) {
                    root.classList.add("dark");
                } else {
                    root.classList.remove("dark");
                }
            }
        };
        updateDarkMode();
        // Listen for system theme changes
        const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
        const handleChange = ()=>{
            if (theme === "system") {
                updateDarkMode();
            }
        };
        mediaQuery.addEventListener("change", handleChange);
        return ()=>mediaQuery.removeEventListener("change", handleChange);
    }, [
        theme
    ]);
    // Set theme and persist to localStorage
    const setTheme = (newTheme)=>{
        setThemeState(newTheme);
        if (typeof window !== "undefined") {
            localStorage.setItem(_config.appConfig.storage.theme, newTheme);
        }
    };
    // Toggle between light and dark mode
    const toggleTheme = ()=>{
        if (theme === "system") {
            // If currently system, toggle to the opposite of current dark state
            setTheme(isDark ? "light" : "dark");
        } else {
            // If manually set, toggle between light and dark
            setTheme(theme === "light" ? "dark" : "light");
        }
    };
    return {
        theme,
        isDark,
        setTheme,
        toggleTheme
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phY2svRG9jdW1lbnRzL2FjbHVlLXByZXByb2Qvd2ViL3NyYy9ob29rcy91c2VEYXJrTW9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgYXBwQ29uZmlnIH0gZnJvbSAnQC9jb25maWcnO1xuXG5leHBvcnQgdHlwZSBUaGVtZSA9ICdsaWdodCcgfCAnZGFyaycgfCAnc3lzdGVtJztcblxuaW50ZXJmYWNlIFVzZURhcmtNb2RlUmV0dXJuIHtcbiAgdGhlbWU6IFRoZW1lO1xuICBpc0Rhcms6IGJvb2xlYW47XG4gIHNldFRoZW1lOiAodGhlbWU6IFRoZW1lKSA9PiB2b2lkO1xuICB0b2dnbGVUaGVtZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURhcmtNb2RlKCk6IFVzZURhcmtNb2RlUmV0dXJuIHtcbiAgY29uc3QgW3RoZW1lLCBzZXRUaGVtZVN0YXRlXSA9IHVzZVN0YXRlPFRoZW1lPignc3lzdGVtJyk7XG4gIGNvbnN0IFtpc0RhcmssIHNldElzRGFya10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGVtZSBmcm9tIGxvY2FsU3RvcmFnZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2F2ZWRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGFwcENvbmZpZy5zdG9yYWdlLnRoZW1lKSBhcyBUaGVtZTtcbiAgICAgIGlmIChzYXZlZFRoZW1lICYmIFsnbGlnaHQnLCAnZGFyaycsICdzeXN0ZW0nXS5pbmNsdWRlcyhzYXZlZFRoZW1lKSkge1xuICAgICAgICBzZXRUaGVtZVN0YXRlKHNhdmVkVGhlbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuXG4gIC8vIFVwZGF0ZSBkYXJrIG1vZGUgc3RhdGUgYmFzZWQgb24gdGhlbWUgcHJlZmVyZW5jZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZURhcmtNb2RlID0gKCkgPT4ge1xuICAgICAgbGV0IHNob3VsZEJlRGFyayA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhlbWUgPT09ICdkYXJrJykge1xuICAgICAgICBzaG91bGRCZURhcmsgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh0aGVtZSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgICBzaG91bGRCZURhcmsgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAodGhlbWUgPT09ICdzeXN0ZW0nKSB7XG4gICAgICAgIHNob3VsZEJlRGFyayA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlcztcbiAgICAgIH1cblxuICAgICAgc2V0SXNEYXJrKHNob3VsZEJlRGFyayk7XG5cbiAgICAgIC8vIFVwZGF0ZSBET01cbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCByb290ID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgaWYgKHNob3VsZEJlRGFyaykge1xuICAgICAgICAgIHJvb3QuY2xhc3NMaXN0LmFkZCgnZGFyaycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvb3QuY2xhc3NMaXN0LnJlbW92ZSgnZGFyaycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVwZGF0ZURhcmtNb2RlKCk7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHN5c3RlbSB0aGVtZSBjaGFuZ2VzXG4gICAgY29uc3QgbWVkaWFRdWVyeSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyk7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoZW1lID09PSAnc3lzdGVtJykge1xuICAgICAgICB1cGRhdGVEYXJrTW9kZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBtZWRpYVF1ZXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUNoYW5nZSk7XG4gICAgcmV0dXJuICgpID0+IG1lZGlhUXVlcnkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlQ2hhbmdlKTtcbiAgfSwgW3RoZW1lXSk7XG5cbiAgLy8gU2V0IHRoZW1lIGFuZCBwZXJzaXN0IHRvIGxvY2FsU3RvcmFnZVxuICBjb25zdCBzZXRUaGVtZSA9IChuZXdUaGVtZTogVGhlbWUpID0+IHtcbiAgICBzZXRUaGVtZVN0YXRlKG5ld1RoZW1lKTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGFwcENvbmZpZy5zdG9yYWdlLnRoZW1lLCBuZXdUaGVtZSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRvZ2dsZSBiZXR3ZWVuIGxpZ2h0IGFuZCBkYXJrIG1vZGVcbiAgY29uc3QgdG9nZ2xlVGhlbWUgPSAoKSA9PiB7XG4gICAgaWYgKHRoZW1lID09PSAnc3lzdGVtJykge1xuICAgICAgLy8gSWYgY3VycmVudGx5IHN5c3RlbSwgdG9nZ2xlIHRvIHRoZSBvcHBvc2l0ZSBvZiBjdXJyZW50IGRhcmsgc3RhdGVcbiAgICAgIHNldFRoZW1lKGlzRGFyayA/ICdsaWdodCcgOiAnZGFyaycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBtYW51YWxseSBzZXQsIHRvZ2dsZSBiZXR3ZWVuIGxpZ2h0IGFuZCBkYXJrXG4gICAgICBzZXRUaGVtZSh0aGVtZSA9PT0gJ2xpZ2h0JyA/ICdkYXJrJyA6ICdsaWdodCcpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHRoZW1lLFxuICAgIGlzRGFyayxcbiAgICBzZXRUaGVtZSxcbiAgICB0b2dnbGVUaGVtZSxcbiAgfTtcbn0iXSwibmFtZXMiOlsidXNlRGFya01vZGUiLCJ0aGVtZSIsInNldFRoZW1lU3RhdGUiLCJ1c2VTdGF0ZSIsImlzRGFyayIsInNldElzRGFyayIsInVzZUVmZmVjdCIsIndpbmRvdyIsInNhdmVkVGhlbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiYXBwQ29uZmlnIiwic3RvcmFnZSIsImluY2x1ZGVzIiwidXBkYXRlRGFya01vZGUiLCJzaG91bGRCZURhcmsiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsInJvb3QiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIm1lZGlhUXVlcnkiLCJoYW5kbGVDaGFuZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldFRoZW1lIiwibmV3VGhlbWUiLCJzZXRJdGVtIiwidG9nZ2xlVGhlbWUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBWWdCQTs7O2VBQUFBOzs7dUJBWm9CO3dCQUNWO0FBV25CLFNBQVNBO0lBQ2QsTUFBTSxDQUFDQyxPQUFPQyxjQUFjLEdBQUdDLElBQUFBLGVBQVEsRUFBUTtJQUMvQyxNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR0YsSUFBQUEsZUFBUSxFQUFDO0lBRXJDLHFDQUFxQztJQUNyQ0csSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUksT0FBT0MsV0FBVyxhQUFhO1lBQ2pDLE1BQU1DLGFBQWFDLGFBQWFDLE9BQU8sQ0FBQ0MsaUJBQVMsQ0FBQ0MsT0FBTyxDQUFDWCxLQUFLO1lBQy9ELElBQUlPLGNBQWM7Z0JBQUM7Z0JBQVM7Z0JBQVE7YUFBUyxDQUFDSyxRQUFRLENBQUNMLGFBQWE7Z0JBQ2xFTixjQUFjTTtZQUNoQjtRQUNGO0lBQ0YsR0FBRyxFQUFFO0lBRUwsbURBQW1EO0lBQ25ERixJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsTUFBTVEsaUJBQWlCO1lBQ3JCLElBQUlDLGVBQWU7WUFFbkIsSUFBSWQsVUFBVSxRQUFRO2dCQUNwQmMsZUFBZTtZQUNqQixPQUFPLElBQUlkLFVBQVUsU0FBUztnQkFDNUJjLGVBQWU7WUFDakIsT0FBTyxJQUFJZCxVQUFVLFVBQVU7Z0JBQzdCYyxlQUFlUixPQUFPUyxVQUFVLENBQUMsZ0NBQWdDQyxPQUFPO1lBQzFFO1lBRUFaLFVBQVVVO1lBRVYsYUFBYTtZQUNiLElBQUksT0FBT1IsV0FBVyxhQUFhO2dCQUNqQyxNQUFNVyxPQUFPWCxPQUFPWSxRQUFRLENBQUNDLGVBQWU7Z0JBQzVDLElBQUlMLGNBQWM7b0JBQ2hCRyxLQUFLRyxTQUFTLENBQUNDLEdBQUcsQ0FBQztnQkFDckIsT0FBTztvQkFDTEosS0FBS0csU0FBUyxDQUFDRSxNQUFNLENBQUM7Z0JBQ3hCO1lBQ0Y7UUFDRjtRQUVBVDtRQUVBLGtDQUFrQztRQUNsQyxNQUFNVSxhQUFhakIsT0FBT1MsVUFBVSxDQUFDO1FBQ3JDLE1BQU1TLGVBQWU7WUFDbkIsSUFBSXhCLFVBQVUsVUFBVTtnQkFDdEJhO1lBQ0Y7UUFDRjtRQUVBVSxXQUFXRSxnQkFBZ0IsQ0FBQyxVQUFVRDtRQUN0QyxPQUFPLElBQU1ELFdBQVdHLG1CQUFtQixDQUFDLFVBQVVGO0lBQ3hELEdBQUc7UUFBQ3hCO0tBQU07SUFFVix3Q0FBd0M7SUFDeEMsTUFBTTJCLFdBQVcsQ0FBQ0M7UUFDaEIzQixjQUFjMkI7UUFDZCxJQUFJLE9BQU90QixXQUFXLGFBQWE7WUFDakNFLGFBQWFxQixPQUFPLENBQUNuQixpQkFBUyxDQUFDQyxPQUFPLENBQUNYLEtBQUssRUFBRTRCO1FBQ2hEO0lBQ0Y7SUFFQSxxQ0FBcUM7SUFDckMsTUFBTUUsY0FBYztRQUNsQixJQUFJOUIsVUFBVSxVQUFVO1lBQ3RCLG9FQUFvRTtZQUNwRTJCLFNBQVN4QixTQUFTLFVBQVU7UUFDOUIsT0FBTztZQUNMLGlEQUFpRDtZQUNqRHdCLFNBQVMzQixVQUFVLFVBQVUsU0FBUztRQUN4QztJQUNGO0lBRUEsT0FBTztRQUNMQTtRQUNBRztRQUNBd0I7UUFDQUc7SUFDRjtBQUNGIn0=