e3340089ca41409012a1e07358c32911
/**
 * aclue API Client
 * 
 * Centralised HTTP client for all backend API communication.
 * Provides type-safe methods for authentication, data fetching,
 * and real-time interactions with the aclue backend.
 * 
 * Key Features:
 *   - Automatic JWT token management with refresh
 *   - Request/response interceptors for auth and error handling
 *   - Type-safe API methods with full TypeScript support
 *   - Automatic retry logic for failed requests
 *   - Comprehensive error handling and user feedback
 * 
 * Architecture:
 *   - TokenManager: Secure storage and management of JWT tokens
 *   - ApiClient: Main HTTP client with interceptors and methods
 *   - Convenience exports: Simplified API for common operations
 * 
 * Usage:
 *   import { api } from '@/lib/api';
 *   const user = await api.getCurrentUser();
 *   const products = await api.getProducts({ category: 'electronics' });
 */ // ==============================================================================
// IMPORTS AND DEPENDENCIES
// ==============================================================================
"use strict";

/* istanbul ignore next */
function cov_vtt3zf6ox() {
  var path = "/home/jack/Documents/aclue-preprod/web/src/lib/api.ts";
  var hash = "019d8e761f0a56c664d558b1f4cae15c8983d1f6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/jack/Documents/aclue-preprod/web/src/lib/api.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "1": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 35,
          column: 7
        }
      },
      "2": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 35,
          column: 7
        }
      },
      "3": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 50,
          column: 3
        }
      },
      "4": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 19
        }
      },
      "5": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 25
        }
      },
      "6": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 24
        }
      },
      "7": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 28
        }
      },
      "8": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "9": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "10": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 56,
          column: 6
        }
      },
      "11": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "12": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 55
        }
      },
      "13": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 58
        }
      },
      "14": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 37
        }
      },
      "15": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "16": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 89
        }
      },
      "17": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 93
        }
      },
      "18": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "19": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 41
        }
      },
      "20": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "21": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 83
        }
      },
      "22": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 87
        }
      },
      "23": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "24": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "25": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "26": {
        start: {
          line: 138,
          column: 26
        },
        end: {
          line: 138,
          column: 83
        }
      },
      "27": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 33
        }
      },
      "28": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 20
        }
      },
      "29": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 56
        }
      },
      "30": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 56
        }
      },
      "31": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "32": {
        start: {
          line: 156,
          column: 26
        },
        end: {
          line: 156,
          column: 86
        }
      },
      "33": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 33
        }
      },
      "34": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 20
        }
      },
      "35": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 32
        }
      },
      "36": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 33
        }
      },
      "37": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "38": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 73
        }
      },
      "39": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 76
        }
      },
      "40": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 68
        }
      },
      "41": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "42": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "43": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "44": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 30
        }
      },
      "45": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 55
        }
      },
      "46": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "47": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 233,
          column: 33
        }
      },
      "48": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 258,
          column: 43
        }
      },
      "49": {
        start: {
          line: 252,
          column: 26
        },
        end: {
          line: 252,
          column: 60
        }
      },
      "50": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "51": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 65
        }
      },
      "52": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 26
        }
      },
      "53": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 258,
          column: 41
        }
      },
      "54": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "55": {
        start: {
          line: 262,
          column: 58
        },
        end: {
          line: 262,
          column: 66
        }
      },
      "56": {
        start: {
          line: 263,
          column: 36
        },
        end: {
          line: 263,
          column: 48
        }
      },
      "57": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "58": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 280,
          column: 17
        }
      },
      "59": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 279,
          column: 23
        }
      },
      "60": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 272,
          column: 27
        }
      },
      "61": {
        start: {
          line: 275,
          column: 24
        },
        end: {
          line: 275,
          column: 82
        }
      },
      "62": {
        start: {
          line: 276,
          column: 24
        },
        end: {
          line: 276,
          column: 60
        }
      },
      "63": {
        start: {
          line: 278,
          column: 24
        },
        end: {
          line: 278,
          column: 51
        }
      },
      "64": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 46
        }
      },
      "65": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 41
        }
      },
      "66": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "67": {
        start: {
          line: 286,
          column: 41
        },
        end: {
          line: 286,
          column: 76
        }
      },
      "68": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 289,
          column: 21
        }
      },
      "69": {
        start: {
          line: 288,
          column: 24
        },
        end: {
          line: 288,
          column: 70
        }
      },
      "70": {
        start: {
          line: 291,
          column: 37
        },
        end: {
          line: 293,
          column: 22
        }
      },
      "71": {
        start: {
          line: 294,
          column: 77
        },
        end: {
          line: 294,
          column: 90
        }
      },
      "72": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 79
        }
      },
      "73": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 58
        }
      },
      "74": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 300,
          column: 85
        }
      },
      "75": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 56
        }
      },
      "76": {
        start: {
          line: 304,
          column: 20
        },
        end: {
          line: 304,
          column: 58
        }
      },
      "77": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 52
        }
      },
      "78": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 309,
          column: 21
        }
      },
      "79": {
        start: {
          line: 308,
          column: 24
        },
        end: {
          line: 308,
          column: 61
        }
      },
      "80": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 56
        }
      },
      "81": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 46
        }
      },
      "82": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 59
        }
      },
      "83": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "84": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "85": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 30
        }
      },
      "86": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 335,
          column: 31
        }
      },
      "87": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 30
        }
      },
      "88": {
        start: {
          line: 358,
          column: 25
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "89": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "90": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 52
        }
      },
      "91": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 115
        }
      },
      "92": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 89
        }
      },
      "93": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 60
        }
      },
      "94": {
        start: {
          line: 370,
          column: 15
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "95": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 64
        }
      },
      "96": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 44
        }
      },
      "97": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 32
        }
      },
      "98": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 81
        }
      },
      "99": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 44
        }
      },
      "100": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 24
        }
      },
      "101": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "102": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 59
        }
      },
      "103": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 398,
          column: 61
        }
      },
      "104": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 58
        }
      },
      "105": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 57
        }
      },
      "106": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 55
        }
      },
      "107": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 56
        }
      },
      "108": {
        start: {
          line: 411,
          column: 25
        },
        end: {
          line: 411,
          column: 59
        }
      },
      "109": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "110": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 417,
          column: 14
        }
      },
      "111": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 29
        }
      },
      "112": {
        start: {
          line: 422,
          column: 25
        },
        end: {
          line: 422,
          column: 66
        }
      },
      "113": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "114": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 428,
          column: 14
        }
      },
      "115": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 29
        }
      },
      "116": {
        start: {
          line: 433,
          column: 25
        },
        end: {
          line: 433,
          column: 65
        }
      },
      "117": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 29
        }
      },
      "118": {
        start: {
          line: 437,
          column: 25
        },
        end: {
          line: 437,
          column: 67
        }
      },
      "119": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 29
        }
      },
      "120": {
        start: {
          line: 441,
          column: 25
        },
        end: {
          line: 441,
          column: 62
        }
      },
      "121": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 29
        }
      },
      "122": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 61
        }
      },
      "123": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 64
        }
      },
      "124": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 63
        }
      },
      "125": {
        start: {
          line: 455,
          column: 25
        },
        end: {
          line: 455,
          column: 71
        }
      },
      "126": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 456,
          column: 40
        }
      },
      "127": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 457,
          column: 24
        }
      },
      "128": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 460,
          column: 51
        }
      },
      "129": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 465,
          column: 11
        }
      },
      "130": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 471,
          column: 11
        }
      },
      "131": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 476,
          column: 11
        }
      },
      "132": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 69
        }
      },
      "133": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 61
        }
      },
      "134": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 67
        }
      },
      "135": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 60
        }
      },
      "136": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 66
        }
      },
      "137": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 498,
          column: 11
        }
      },
      "138": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 67
        }
      },
      "139": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 504,
          column: 61
        }
      },
      "140": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 63
        }
      },
      "141": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 61
        }
      },
      "142": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 513,
          column: 61
        }
      },
      "143": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 518,
          column: 11
        }
      },
      "144": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 522,
          column: 71
        }
      },
      "145": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 65
        }
      },
      "146": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 528,
          column: 81
        }
      },
      "147": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 531,
          column: 60
        }
      },
      "148": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 535,
          column: 75
        }
      },
      "149": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 540,
          column: 11
        }
      },
      "150": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 68
        }
      },
      "151": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 546,
          column: 83
        }
      },
      "152": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 549,
          column: 68
        }
      },
      "153": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 553,
          column: 67
        }
      },
      "154": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 556,
          column: 58
        }
      },
      "155": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 559,
          column: 62
        }
      },
      "156": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 562,
          column: 68
        }
      },
      "157": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 565,
          column: 67
        }
      },
      "158": {
        start: {
          line: 568,
          column: 8
        },
        end: {
          line: 568,
          column: 67
        }
      },
      "159": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 67
        }
      },
      "160": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 575,
          column: 63
        }
      },
      "161": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 579,
          column: 50
        }
      },
      "162": {
        start: {
          line: 582,
          column: 18
        },
        end: {
          line: 582,
          column: 33
        }
      },
      "163": {
        start: {
          line: 583,
          column: 21
        },
        end: {
          line: 583,
          column: 47
        }
      },
      "164": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 649,
          column: 1
        }
      },
      "165": {
        start: {
          line: 587,
          column: 23
        },
        end: {
          line: 587,
          column: 44
        }
      },
      "166": {
        start: {
          line: 588,
          column: 26
        },
        end: {
          line: 588,
          column: 50
        }
      },
      "167": {
        start: {
          line: 589,
          column: 20
        },
        end: {
          line: 589,
          column: 38
        }
      },
      "168": {
        start: {
          line: 590,
          column: 28
        },
        end: {
          line: 590,
          column: 54
        }
      },
      "169": {
        start: {
          line: 591,
          column: 25
        },
        end: {
          line: 591,
          column: 59
        }
      },
      "170": {
        start: {
          line: 592,
          column: 33
        },
        end: {
          line: 592,
          column: 64
        }
      },
      "171": {
        start: {
          line: 593,
          column: 42
        },
        end: {
          line: 593,
          column: 82
        }
      },
      "172": {
        start: {
          line: 594,
          column: 30
        },
        end: {
          line: 594,
          column: 58
        }
      },
      "173": {
        start: {
          line: 598,
          column: 31
        },
        end: {
          line: 598,
          column: 60
        }
      },
      "174": {
        start: {
          line: 599,
          column: 28
        },
        end: {
          line: 599,
          column: 58
        }
      },
      "175": {
        start: {
          line: 600,
          column: 35
        },
        end: {
          line: 600,
          column: 72
        }
      },
      "176": {
        start: {
          line: 601,
          column: 27
        },
        end: {
          line: 601,
          column: 56
        }
      },
      "177": {
        start: {
          line: 602,
          column: 27
        },
        end: {
          line: 602,
          column: 52
        }
      },
      "178": {
        start: {
          line: 606,
          column: 31
        },
        end: {
          line: 606,
          column: 60
        }
      },
      "179": {
        start: {
          line: 607,
          column: 33
        },
        end: {
          line: 607,
          column: 64
        }
      },
      "180": {
        start: {
          line: 608,
          column: 26
        },
        end: {
          line: 608,
          column: 50
        }
      },
      "181": {
        start: {
          line: 609,
          column: 27
        },
        end: {
          line: 609,
          column: 52
        }
      },
      "182": {
        start: {
          line: 610,
          column: 25
        },
        end: {
          line: 610,
          column: 56
        }
      },
      "183": {
        start: {
          line: 611,
          column: 25
        },
        end: {
          line: 611,
          column: 56
        }
      },
      "184": {
        start: {
          line: 612,
          column: 45
        },
        end: {
          line: 612,
          column: 96
        }
      },
      "185": {
        start: {
          line: 616,
          column: 31
        },
        end: {
          line: 616,
          column: 65
        }
      },
      "186": {
        start: {
          line: 617,
          column: 31
        },
        end: {
          line: 617,
          column: 65
        }
      },
      "187": {
        start: {
          line: 618,
          column: 40
        },
        end: {
          line: 618,
          column: 78
        }
      },
      "188": {
        start: {
          line: 619,
          column: 26
        },
        end: {
          line: 619,
          column: 55
        }
      },
      "189": {
        start: {
          line: 621,
          column: 30
        },
        end: {
          line: 621,
          column: 64
        }
      },
      "190": {
        start: {
          line: 625,
          column: 26
        },
        end: {
          line: 625,
          column: 65
        }
      },
      "191": {
        start: {
          line: 626,
          column: 38
        },
        end: {
          line: 626,
          column: 74
        }
      },
      "192": {
        start: {
          line: 627,
          column: 33
        },
        end: {
          line: 627,
          column: 64
        }
      },
      "193": {
        start: {
          line: 628,
          column: 41
        },
        end: {
          line: 628,
          column: 80
        }
      },
      "194": {
        start: {
          line: 629,
          column: 21
        },
        end: {
          line: 629,
          column: 55
        }
      },
      "195": {
        start: {
          line: 631,
          column: 45
        },
        end: {
          line: 631,
          column: 84
        }
      },
      "196": {
        start: {
          line: 635,
          column: 24
        },
        end: {
          line: 635,
          column: 54
        }
      },
      "197": {
        start: {
          line: 636,
          column: 20
        },
        end: {
          line: 636,
          column: 44
        }
      },
      "198": {
        start: {
          line: 637,
          column: 23
        },
        end: {
          line: 637,
          column: 48
        }
      },
      "199": {
        start: {
          line: 638,
          column: 29
        },
        end: {
          line: 638,
          column: 64
        }
      },
      "200": {
        start: {
          line: 639,
          column: 22
        },
        end: {
          line: 639,
          column: 50
        }
      },
      "201": {
        start: {
          line: 640,
          column: 28
        },
        end: {
          line: 640,
          column: 62
        }
      },
      "202": {
        start: {
          line: 644,
          column: 29
        },
        end: {
          line: 644,
          column: 56
        }
      },
      "203": {
        start: {
          line: 645,
          column: 26
        },
        end: {
          line: 645,
          column: 59
        }
      },
      "204": {
        start: {
          line: 648,
          column: 16
        },
        end: {
          line: 648,
          column: 39
        }
      },
      "205": {
        start: {
          line: 650,
          column: 17
        },
        end: {
          line: 650,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 16
          }
        },
        loc: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 31
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 38,
            column: 9
          },
          end: {
            line: 38,
            column: 10
          }
        },
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 16
          }
        },
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 13
          },
          end: {
            line: 44,
            column: 14
          }
        },
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 18
          },
          end: {
            line: 47,
            column: 19
          }
        },
        loc: {
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "5": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 53,
            column: 9
          },
          end: {
            line: 53,
            column: 33
          }
        },
        loc: {
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 53
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 86,
            column: 6
          },
          end: {
            line: 86,
            column: 7
          }
        },
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 86
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 7
          }
        },
        loc: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 101
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 7
          }
        },
        loc: {
          start: {
            line: 116,
            column: 43
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 133,
            column: 6
          },
          end: {
            line: 133,
            column: 7
          }
        },
        loc: {
          start: {
            line: 133,
            column: 23
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 133
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 151,
            column: 6
          },
          end: {
            line: 151,
            column: 7
          }
        },
        loc: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 151
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 171,
            column: 6
          },
          end: {
            line: 171,
            column: 7
          }
        },
        loc: {
          start: {
            line: 171,
            column: 20
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 171
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 17
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 182
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 218,
            column: 6
          },
          end: {
            line: 218,
            column: 7
          }
        },
        loc: {
          start: {
            line: 218,
            column: 19
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 218
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 247,
            column: 6
          },
          end: {
            line: 247,
            column: 7
          }
        },
        loc: {
          start: {
            line: 247,
            column: 26
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 247
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 251,
            column: 45
          },
          end: {
            line: 251,
            column: 46
          }
        },
        loc: {
          start: {
            line: 251,
            column: 55
          },
          end: {
            line: 258,
            column: 9
          }
        },
        line: 251
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 258,
            column: 11
          },
          end: {
            line: 258,
            column: 12
          }
        },
        loc: {
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 258,
            column: 41
          }
        },
        line: 258
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 262,
            column: 46
          },
          end: {
            line: 262,
            column: 47
          }
        },
        loc: {
          start: {
            line: 262,
            column: 58
          },
          end: {
            line: 262,
            column: 66
          }
        },
        line: 262
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 262,
            column: 68
          },
          end: {
            line: 262,
            column: 69
          }
        },
        loc: {
          start: {
            line: 262,
            column: 83
          },
          end: {
            line: 317,
            column: 9
          }
        },
        line: 262
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 268,
            column: 39
          },
          end: {
            line: 268,
            column: 40
          }
        },
        loc: {
          start: {
            line: 268,
            column: 58
          },
          end: {
            line: 273,
            column: 21
          }
        },
        line: 268
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 273,
            column: 28
          },
          end: {
            line: 273,
            column: 29
          }
        },
        loc: {
          start: {
            line: 273,
            column: 37
          },
          end: {
            line: 277,
            column: 21
          }
        },
        line: 273
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 277,
            column: 29
          },
          end: {
            line: 277,
            column: 30
          }
        },
        loc: {
          start: {
            line: 277,
            column: 36
          },
          end: {
            line: 279,
            column: 21
          }
        },
        line: 277
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 328,
            column: 6
          },
          end: {
            line: 328,
            column: 7
          }
        },
        loc: {
          start: {
            line: 328,
            column: 33
          },
          end: {
            line: 340,
            column: 5
          }
        },
        line: 328
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 329,
            column: 33
          },
          end: {
            line: 329,
            column: 34
          }
        },
        loc: {
          start: {
            line: 329,
            column: 56
          },
          end: {
            line: 337,
            column: 9
          }
        },
        line: 329
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 357,
            column: 6
          },
          end: {
            line: 357,
            column: 7
          }
        },
        loc: {
          start: {
            line: 357,
            column: 25
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 357
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 393,
            column: 6
          },
          end: {
            line: 393,
            column: 7
          }
        },
        loc: {
          start: {
            line: 393,
            column: 38
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 393
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 410,
            column: 5
          }
        },
        loc: {
          start: {
            line: 410,
            column: 27
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 410
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 421,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        },
        loc: {
          start: {
            line: 421,
            column: 34
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 421
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 33
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 432
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 35
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 436
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 440,
            column: 4
          },
          end: {
            line: 440,
            column: 5
          }
        },
        loc: {
          start: {
            line: 440,
            column: 30
          },
          end: {
            line: 443,
            column: 5
          }
        },
        line: 440
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 445,
            column: 5
          }
        },
        loc: {
          start: {
            line: 445,
            column: 22
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 445
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 25
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 448
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 451,
            column: 4
          },
          end: {
            line: 451,
            column: 5
          }
        },
        loc: {
          start: {
            line: 451,
            column: 35
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 451
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 19
          },
          end: {
            line: 458,
            column: 5
          }
        },
        line: 454
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 459,
            column: 4
          },
          end: {
            line: 459,
            column: 5
          }
        },
        loc: {
          start: {
            line: 459,
            column: 27
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 459
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 32
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 462
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 467,
            column: 5
          }
        },
        loc: {
          start: {
            line: 467,
            column: 41
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 467
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 473,
            column: 4
          },
          end: {
            line: 473,
            column: 5
          }
        },
        loc: {
          start: {
            line: 473,
            column: 29
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 473
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 30
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 479
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 31
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 482
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 38
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 485
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 30
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 488
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 491,
            column: 4
          },
          end: {
            line: 491,
            column: 5
          }
        },
        loc: {
          start: {
            line: 491,
            column: 26
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 491
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 495,
            column: 4
          },
          end: {
            line: 495,
            column: 5
          }
        },
        loc: {
          start: {
            line: 495,
            column: 30
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 495
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 32
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 500
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 25
          },
          end: {
            line: 505,
            column: 5
          }
        },
        line: 503
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 506,
            column: 4
          },
          end: {
            line: 506,
            column: 5
          }
        },
        loc: {
          start: {
            line: 506,
            column: 26
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 506
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 32
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 509
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 32
          },
          end: {
            line: 514,
            column: 5
          }
        },
        line: 512
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 515,
            column: 4
          },
          end: {
            line: 515,
            column: 5
          }
        },
        loc: {
          start: {
            line: 515,
            column: 52
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 515
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 521,
            column: 5
          }
        },
        loc: {
          start: {
            line: 521,
            column: 35
          },
          end: {
            line: 523,
            column: 5
          }
        },
        line: 521
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 524,
            column: 4
          },
          end: {
            line: 524,
            column: 5
          }
        },
        loc: {
          start: {
            line: 524,
            column: 35
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 524
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 5
          }
        },
        loc: {
          start: {
            line: 527,
            column: 39
          },
          end: {
            line: 529,
            column: 5
          }
        },
        line: 527
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 530,
            column: 4
          },
          end: {
            line: 530,
            column: 5
          }
        },
        loc: {
          start: {
            line: 530,
            column: 30
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 530
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 534,
            column: 4
          },
          end: {
            line: 534,
            column: 5
          }
        },
        loc: {
          start: {
            line: 534,
            column: 40
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 534
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 537,
            column: 4
          },
          end: {
            line: 537,
            column: 5
          }
        },
        loc: {
          start: {
            line: 537,
            column: 37
          },
          end: {
            line: 541,
            column: 5
          }
        },
        line: 537
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 542,
            column: 4
          },
          end: {
            line: 542,
            column: 5
          }
        },
        loc: {
          start: {
            line: 542,
            column: 32
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 542
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 40
          },
          end: {
            line: 547,
            column: 5
          }
        },
        line: 545
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 35
          },
          end: {
            line: 550,
            column: 5
          }
        },
        line: 548
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 552,
            column: 4
          },
          end: {
            line: 552,
            column: 5
          }
        },
        loc: {
          start: {
            line: 552,
            column: 31
          },
          end: {
            line: 554,
            column: 5
          }
        },
        line: 552
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 555,
            column: 4
          },
          end: {
            line: 555,
            column: 5
          }
        },
        loc: {
          start: {
            line: 555,
            column: 25
          },
          end: {
            line: 557,
            column: 5
          }
        },
        line: 555
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 558,
            column: 4
          },
          end: {
            line: 558,
            column: 5
          }
        },
        loc: {
          start: {
            line: 558,
            column: 26
          },
          end: {
            line: 560,
            column: 5
          }
        },
        line: 558
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 561,
            column: 4
          },
          end: {
            line: 561,
            column: 5
          }
        },
        loc: {
          start: {
            line: 561,
            column: 36
          },
          end: {
            line: 563,
            column: 5
          }
        },
        line: 561
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 564,
            column: 4
          },
          end: {
            line: 564,
            column: 5
          }
        },
        loc: {
          start: {
            line: 564,
            column: 29
          },
          end: {
            line: 566,
            column: 5
          }
        },
        line: 564
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 5
          }
        },
        loc: {
          start: {
            line: 567,
            column: 35
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 567
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 28
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 571
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 34
          },
          end: {
            line: 576,
            column: 5
          }
        },
        line: 574
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 578,
            column: 4
          },
          end: {
            line: 578,
            column: 5
          }
        },
        loc: {
          start: {
            line: 578,
            column: 24
          },
          end: {
            line: 580,
            column: 5
          }
        },
        line: 578
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 587,
            column: 15
          },
          end: {
            line: 587,
            column: 16
          }
        },
        loc: {
          start: {
            line: 587,
            column: 23
          },
          end: {
            line: 587,
            column: 44
          }
        },
        line: 587
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 588,
            column: 18
          },
          end: {
            line: 588,
            column: 19
          }
        },
        loc: {
          start: {
            line: 588,
            column: 26
          },
          end: {
            line: 588,
            column: 50
          }
        },
        line: 588
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 589,
            column: 16
          },
          end: {
            line: 589,
            column: 17
          }
        },
        loc: {
          start: {
            line: 589,
            column: 20
          },
          end: {
            line: 589,
            column: 38
          }
        },
        line: 589
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 590,
            column: 24
          },
          end: {
            line: 590,
            column: 25
          }
        },
        loc: {
          start: {
            line: 590,
            column: 28
          },
          end: {
            line: 590,
            column: 54
          }
        },
        line: 590
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 591,
            column: 17
          },
          end: {
            line: 591,
            column: 18
          }
        },
        loc: {
          start: {
            line: 591,
            column: 25
          },
          end: {
            line: 591,
            column: 59
          }
        },
        line: 591
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 592,
            column: 24
          },
          end: {
            line: 592,
            column: 25
          }
        },
        loc: {
          start: {
            line: 592,
            column: 33
          },
          end: {
            line: 592,
            column: 64
          }
        },
        line: 592
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 593,
            column: 23
          },
          end: {
            line: 593,
            column: 24
          }
        },
        loc: {
          start: {
            line: 593,
            column: 42
          },
          end: {
            line: 593,
            column: 82
          }
        },
        line: 593
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 594,
            column: 21
          },
          end: {
            line: 594,
            column: 22
          }
        },
        loc: {
          start: {
            line: 594,
            column: 30
          },
          end: {
            line: 594,
            column: 58
          }
        },
        line: 594
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 598,
            column: 23
          },
          end: {
            line: 598,
            column: 24
          }
        },
        loc: {
          start: {
            line: 598,
            column: 31
          },
          end: {
            line: 598,
            column: 60
          }
        },
        line: 598
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 599,
            column: 24
          },
          end: {
            line: 599,
            column: 25
          }
        },
        loc: {
          start: {
            line: 599,
            column: 28
          },
          end: {
            line: 599,
            column: 58
          }
        },
        line: 599
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 600,
            column: 27
          },
          end: {
            line: 600,
            column: 28
          }
        },
        loc: {
          start: {
            line: 600,
            column: 35
          },
          end: {
            line: 600,
            column: 72
          }
        },
        line: 600
      },
      "80": {
        name: "(anonymous_80)",
        decl: {
          start: {
            line: 601,
            column: 23
          },
          end: {
            line: 601,
            column: 24
          }
        },
        loc: {
          start: {
            line: 601,
            column: 27
          },
          end: {
            line: 601,
            column: 56
          }
        },
        line: 601
      },
      "81": {
        name: "(anonymous_81)",
        decl: {
          start: {
            line: 602,
            column: 23
          },
          end: {
            line: 602,
            column: 24
          }
        },
        loc: {
          start: {
            line: 602,
            column: 27
          },
          end: {
            line: 602,
            column: 52
          }
        },
        line: 602
      },
      "82": {
        name: "(anonymous_82)",
        decl: {
          start: {
            line: 606,
            column: 21
          },
          end: {
            line: 606,
            column: 22
          }
        },
        loc: {
          start: {
            line: 606,
            column: 31
          },
          end: {
            line: 606,
            column: 60
          }
        },
        line: 606
      },
      "83": {
        name: "(anonymous_83)",
        decl: {
          start: {
            line: 607,
            column: 24
          },
          end: {
            line: 607,
            column: 25
          }
        },
        loc: {
          start: {
            line: 607,
            column: 33
          },
          end: {
            line: 607,
            column: 64
          }
        },
        line: 607
      },
      "84": {
        name: "(anonymous_84)",
        decl: {
          start: {
            line: 608,
            column: 20
          },
          end: {
            line: 608,
            column: 21
          }
        },
        loc: {
          start: {
            line: 608,
            column: 26
          },
          end: {
            line: 608,
            column: 50
          }
        },
        line: 608
      },
      "85": {
        name: "(anonymous_85)",
        decl: {
          start: {
            line: 609,
            column: 23
          },
          end: {
            line: 609,
            column: 24
          }
        },
        loc: {
          start: {
            line: 609,
            column: 27
          },
          end: {
            line: 609,
            column: 52
          }
        },
        line: 609
      },
      "86": {
        name: "(anonymous_86)",
        decl: {
          start: {
            line: 610,
            column: 21
          },
          end: {
            line: 610,
            column: 22
          }
        },
        loc: {
          start: {
            line: 610,
            column: 25
          },
          end: {
            line: 610,
            column: 56
          }
        },
        line: 610
      },
      "87": {
        name: "(anonymous_87)",
        decl: {
          start: {
            line: 611,
            column: 21
          },
          end: {
            line: 611,
            column: 22
          }
        },
        loc: {
          start: {
            line: 611,
            column: 25
          },
          end: {
            line: 611,
            column: 56
          }
        },
        line: 611
      },
      "88": {
        name: "(anonymous_88)",
        decl: {
          start: {
            line: 612,
            column: 23
          },
          end: {
            line: 612,
            column: 24
          }
        },
        loc: {
          start: {
            line: 612,
            column: 45
          },
          end: {
            line: 612,
            column: 96
          }
        },
        line: 612
      },
      "89": {
        name: "(anonymous_89)",
        decl: {
          start: {
            line: 616,
            column: 23
          },
          end: {
            line: 616,
            column: 24
          }
        },
        loc: {
          start: {
            line: 616,
            column: 31
          },
          end: {
            line: 616,
            column: 65
          }
        },
        line: 616
      },
      "90": {
        name: "(anonymous_90)",
        decl: {
          start: {
            line: 617,
            column: 27
          },
          end: {
            line: 617,
            column: 28
          }
        },
        loc: {
          start: {
            line: 617,
            column: 31
          },
          end: {
            line: 617,
            column: 65
          }
        },
        line: 617
      },
      "91": {
        name: "(anonymous_91)",
        decl: {
          start: {
            line: 618,
            column: 21
          },
          end: {
            line: 618,
            column: 22
          }
        },
        loc: {
          start: {
            line: 618,
            column: 40
          },
          end: {
            line: 618,
            column: 78
          }
        },
        line: 618
      },
      "92": {
        name: "(anonymous_92)",
        decl: {
          start: {
            line: 619,
            column: 22
          },
          end: {
            line: 619,
            column: 23
          }
        },
        loc: {
          start: {
            line: 619,
            column: 26
          },
          end: {
            line: 619,
            column: 55
          }
        },
        line: 619
      },
      "93": {
        name: "(anonymous_93)",
        decl: {
          start: {
            line: 621,
            column: 22
          },
          end: {
            line: 621,
            column: 23
          }
        },
        loc: {
          start: {
            line: 621,
            column: 30
          },
          end: {
            line: 621,
            column: 64
          }
        },
        line: 621
      },
      "94": {
        name: "(anonymous_94)",
        decl: {
          start: {
            line: 625,
            column: 18
          },
          end: {
            line: 625,
            column: 19
          }
        },
        loc: {
          start: {
            line: 625,
            column: 26
          },
          end: {
            line: 625,
            column: 65
          }
        },
        line: 625
      },
      "95": {
        name: "(anonymous_95)",
        decl: {
          start: {
            line: 626,
            column: 28
          },
          end: {
            line: 626,
            column: 29
          }
        },
        loc: {
          start: {
            line: 626,
            column: 38
          },
          end: {
            line: 626,
            column: 74
          }
        },
        line: 626
      },
      "96": {
        name: "(anonymous_96)",
        decl: {
          start: {
            line: 627,
            column: 27
          },
          end: {
            line: 627,
            column: 28
          }
        },
        loc: {
          start: {
            line: 627,
            column: 33
          },
          end: {
            line: 627,
            column: 64
          }
        },
        line: 627
      },
      "97": {
        name: "(anonymous_97)",
        decl: {
          start: {
            line: 628,
            column: 25
          },
          end: {
            line: 628,
            column: 26
          }
        },
        loc: {
          start: {
            line: 628,
            column: 41
          },
          end: {
            line: 628,
            column: 80
          }
        },
        line: 628
      },
      "98": {
        name: "(anonymous_98)",
        decl: {
          start: {
            line: 629,
            column: 17
          },
          end: {
            line: 629,
            column: 18
          }
        },
        loc: {
          start: {
            line: 629,
            column: 21
          },
          end: {
            line: 629,
            column: 55
          }
        },
        line: 629
      },
      "99": {
        name: "(anonymous_99)",
        decl: {
          start: {
            line: 631,
            column: 37
          },
          end: {
            line: 631,
            column: 38
          }
        },
        loc: {
          start: {
            line: 631,
            column: 45
          },
          end: {
            line: 631,
            column: 84
          }
        },
        line: 631
      },
      "100": {
        name: "(anonymous_100)",
        decl: {
          start: {
            line: 635,
            column: 16
          },
          end: {
            line: 635,
            column: 17
          }
        },
        loc: {
          start: {
            line: 635,
            column: 24
          },
          end: {
            line: 635,
            column: 54
          }
        },
        line: 635
      },
      "101": {
        name: "(anonymous_101)",
        decl: {
          start: {
            line: 636,
            column: 16
          },
          end: {
            line: 636,
            column: 17
          }
        },
        loc: {
          start: {
            line: 636,
            column: 20
          },
          end: {
            line: 636,
            column: 44
          }
        },
        line: 636
      },
      "102": {
        name: "(anonymous_102)",
        decl: {
          start: {
            line: 637,
            column: 17
          },
          end: {
            line: 637,
            column: 18
          }
        },
        loc: {
          start: {
            line: 637,
            column: 23
          },
          end: {
            line: 637,
            column: 48
          }
        },
        line: 637
      },
      "103": {
        name: "(anonymous_103)",
        decl: {
          start: {
            line: 638,
            column: 20
          },
          end: {
            line: 638,
            column: 21
          }
        },
        loc: {
          start: {
            line: 638,
            column: 29
          },
          end: {
            line: 638,
            column: 64
          }
        },
        line: 638
      },
      "104": {
        name: "(anonymous_104)",
        decl: {
          start: {
            line: 639,
            column: 16
          },
          end: {
            line: 639,
            column: 17
          }
        },
        loc: {
          start: {
            line: 639,
            column: 22
          },
          end: {
            line: 639,
            column: 50
          }
        },
        line: 639
      },
      "105": {
        name: "(anonymous_105)",
        decl: {
          start: {
            line: 640,
            column: 22
          },
          end: {
            line: 640,
            column: 23
          }
        },
        loc: {
          start: {
            line: 640,
            column: 28
          },
          end: {
            line: 640,
            column: 62
          }
        },
        line: 640
      },
      "106": {
        name: "(anonymous_106)",
        decl: {
          start: {
            line: 644,
            column: 20
          },
          end: {
            line: 644,
            column: 21
          }
        },
        loc: {
          start: {
            line: 644,
            column: 29
          },
          end: {
            line: 644,
            column: 56
          }
        },
        line: 644
      },
      "107": {
        name: "(anonymous_107)",
        decl: {
          start: {
            line: 645,
            column: 22
          },
          end: {
            line: 645,
            column: 23
          }
        },
        loc: {
          start: {
            line: 645,
            column: 26
          },
          end: {
            line: 645,
            column: 59
          }
        },
        line: 645
      },
      "108": {
        name: "(anonymous_108)",
        decl: {
          start: {
            line: 648,
            column: 12
          },
          end: {
            line: 648,
            column: 13
          }
        },
        loc: {
          start: {
            line: 648,
            column: 16
          },
          end: {
            line: 648,
            column: 39
          }
        },
        line: 648
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 35
          },
          end: {
            line: 54,
            column: 38
          }
        }, {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 56,
            column: 5
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 54,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 54,
            column: 14
          }
        }, {
          start: {
            line: 54,
            column: 18
          },
          end: {
            line: 54,
            column: 32
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "3": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "4": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "7": {
        loc: {
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 139,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 19
          },
          end: {
            line: 139,
            column: 24
          }
        }, {
          start: {
            line: 139,
            column: 28
          },
          end: {
            line: 139,
            column: 32
          }
        }],
        line: 139
      },
      "8": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 153,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 153,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "9": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "10": {
        loc: {
          start: {
            line: 157,
            column: 19
          },
          end: {
            line: 157,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 19
          },
          end: {
            line: 157,
            column: 24
          }
        }, {
          start: {
            line: 157,
            column: 28
          },
          end: {
            line: 157,
            column: 32
          }
        }],
        line: 157
      },
      "11": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "12": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "13": {
        loc: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 21
          }
        }, {
          start: {
            line: 253,
            column: 25
          },
          end: {
            line: 253,
            column: 39
          }
        }],
        line: 253
      },
      "14": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "15": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 46
          }
        }, {
          start: {
            line: 265,
            column: 50
          },
          end: {
            line: 265,
            column: 73
          }
        }],
        line: 265
      },
      "16": {
        loc: {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 280,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 280,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "17": {
        loc: {
          start: {
            line: 287,
            column: 20
          },
          end: {
            line: 289,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 20
          },
          end: {
            line: 289,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "18": {
        loc: {
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 309,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 309,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "19": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        }, {
          start: {
            line: 333,
            column: 19
          },
          end: {
            line: 336,
            column: 13
          }
        }],
        line: 330
      },
      "20": {
        loc: {
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: 370,
            column: 15
          },
          end: {
            line: 379,
            column: 9
          }
        }],
        line: 364
      },
      "21": {
        loc: {
          start: {
            line: 367,
            column: 31
          },
          end: {
            line: 367,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 31
          },
          end: {
            line: 367,
            column: 59
          }
        }, {
          start: {
            line: 367,
            column: 63
          },
          end: {
            line: 367,
            column: 114
          }
        }],
        line: 367
      },
      "22": {
        loc: {
          start: {
            line: 368,
            column: 28
          },
          end: {
            line: 368,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 28
          },
          end: {
            line: 368,
            column: 53
          }
        }, {
          start: {
            line: 368,
            column: 57
          },
          end: {
            line: 368,
            column: 88
          }
        }],
        line: 368
      },
      "23": {
        loc: {
          start: {
            line: 370,
            column: 15
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 15
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: 375,
            column: 15
          },
          end: {
            line: 379,
            column: 9
          }
        }],
        line: 370
      },
      "24": {
        loc: {
          start: {
            line: 377,
            column: 31
          },
          end: {
            line: 377,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 31
          },
          end: {
            line: 377,
            column: 44
          }
        }, {
          start: {
            line: 377,
            column: 48
          },
          end: {
            line: 377,
            column: 80
          }
        }],
        line: 377
      },
      "25": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 396,
            column: 59
          }
        }, {
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 398,
            column: 61
          }
        }, {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 400,
            column: 58
          }
        }, {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 402,
            column: 57
          }
        }, {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 404,
            column: 55
          }
        }, {
          start: {
            line: 405,
            column: 12
          },
          end: {
            line: 406,
            column: 56
          }
        }],
        line: 394
      },
      "26": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "27": {
        loc: {
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 413,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 413,
            column: 25
          }
        }, {
          start: {
            line: 413,
            column: 29
          },
          end: {
            line: 413,
            column: 66
          }
        }],
        line: 413
      },
      "28": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 429,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "29": {
        loc: {
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 424,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 424,
            column: 25
          }
        }, {
          start: {
            line: 424,
            column: 29
          },
          end: {
            line: 424,
            column: 66
          }
        }],
        line: 424
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0, 0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/jack/Documents/aclue-preprod/web/src/lib/api.ts"],
      sourcesContent: ["/**\n * aclue API Client\n * \n * Centralised HTTP client for all backend API communication.\n * Provides type-safe methods for authentication, data fetching,\n * and real-time interactions with the aclue backend.\n * \n * Key Features:\n *   - Automatic JWT token management with refresh\n *   - Request/response interceptors for auth and error handling\n *   - Type-safe API methods with full TypeScript support\n *   - Automatic retry logic for failed requests\n *   - Comprehensive error handling and user feedback\n * \n * Architecture:\n *   - TokenManager: Secure storage and management of JWT tokens\n *   - ApiClient: Main HTTP client with interceptors and methods\n *   - Convenience exports: Simplified API for common operations\n * \n * Usage:\n *   import { api } from '@/lib/api';\n *   const user = await api.getCurrentUser();\n *   const products = await api.getProducts({ category: 'electronics' });\n */\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { config, endpoints, appConfig } from '@/config';\nimport { \n  ApiResponse, \n  PaginatedResponse, \n  ApiError,\n  AuthResponse,\n  LoginRequest,\n  RegisterRequest,\n  RefreshTokenRequest,\n  User,\n  Product,\n  Category,\n  SearchQuery,\n  SearchResult,\n  SwipeSession,\n  SwipeRequest,\n  SwipeInteraction,\n  Recommendation,\n  RecommendationRequest,\n  RecommendationResponse,\n  GiftLink,\n  CreateGiftLinkRequest,\n  GiftLinkInteraction,\n  AnalyticsEvent\n} from '@/types';\n\n// ==============================================================================\n// TOKEN MANAGEMENT\n// ==============================================================================\n// Singleton class for secure JWT token storage and management\n\n/**\n * Secure JWT token manager with localStorage persistence.\n * \n * Manages access and refresh tokens for API authentication:\n *   - Singleton pattern ensures consistent token state\n *   - Automatic localStorage synchronisation\n *   - Secure token cleanup on logout\n *   - Server-side rendering safe (checks for window)\n * \n * Token Lifecycle:\n *   1. Tokens received from authentication endpoints\n *   2. Stored in localStorage and memory\n *   3. Access token used for API requests\n *   4. Refresh token used to renew expired access tokens\n *   5. Cleared on logout or authentication errors\n */\nclass TokenManager {\n  private static instance: TokenManager;  // Singleton instance\n  private accessToken: string | null = null;   // In-memory access token cache\n  private refreshToken: string | null = null;  // In-memory refresh token cache\n\n  /**\n   * Get singleton TokenManager instance.\n   * \n   * Creates new instance on first call and initialises tokens\n   * from localStorage if available.\n   * \n   * Returns:\n   *   TokenManager: Singleton instance\n   */\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n      // Initialize tokens from localStorage on first creation\n      TokenManager.instance.initializeFromStorage();\n    }\n    return TokenManager.instance;\n  }\n\n  /**\n   * Initialise tokens from localStorage on browser load.\n   * \n   * Safely checks for browser environment and loads previously\n   * stored tokens into memory cache.\n   * \n   * Note: Only runs in browser environment (SSR safe)\n   */\n  private initializeFromStorage(): void {\n    if (typeof window !== 'undefined') {\n      this.accessToken = localStorage.getItem(appConfig.storage.authToken);\n      this.refreshToken = localStorage.getItem(appConfig.storage.refreshToken);\n    }\n  }\n\n  /**\n   * Store new JWT tokens in memory and localStorage.\n   * \n   * Updates both in-memory cache and persistent storage\n   * for session continuity across browser reloads.\n   * \n   * Parameters:\n   *   accessToken: JWT access token for API requests\n   *   refreshToken: JWT refresh token for session renewal\n   */\n  setTokens(accessToken: string, refreshToken: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    \n    // Persist to localStorage for session continuity\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(appConfig.storage.authToken, accessToken);\n      localStorage.setItem(appConfig.storage.refreshToken, refreshToken);\n    }\n  }\n\n  /**\n   * Retrieve current access token for API requests.\n   *\n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   *\n   * Returns:\n   *   string | null: Current access token or null if not available\n   */\n  getAccessToken(): string | null {\n    // Return cached token if available\n    if (this.accessToken) return this.accessToken;\n\n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem(appConfig.storage.authToken);\n      return token || null; // Ensure we return null instead of undefined\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieve current refresh token for session renewal.\n   *\n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   *\n   * Returns:\n   *   string | null: Current refresh token or null if not available\n   */\n  getRefreshToken(): string | null {\n    // Return cached token if available\n    if (this.refreshToken) return this.refreshToken;\n\n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem(appConfig.storage.refreshToken);\n      return token || null; // Ensure we return null instead of undefined\n    }\n\n    return null;\n  }\n\n  /**\n   * Clear all stored tokens and user data.\n   * \n   * Removes tokens from both memory and localStorage.\n   * Called during logout or authentication errors.\n   * \n   * Security:\n   *   - Clears all authentication-related data\n   *   - Prevents token reuse after logout\n   *   - Ensures clean state for new authentication\n   */\n  clearTokens(): void {\n    // Clear memory cache\n    this.accessToken = null;\n    this.refreshToken = null;\n    \n    // Clear persistent storage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(appConfig.storage.authToken);\n      localStorage.removeItem(appConfig.storage.refreshToken);\n      localStorage.removeItem(appConfig.storage.user);\n    }\n  }\n}\n\n// ==============================================================================\n// API CLIENT\n// ==============================================================================\n// Main HTTP client with authentication and error handling\n\n/**\n * Comprehensive HTTP client for aclue API communication.\n * \n * Features:\n *   - Automatic JWT token attachment to requests\n *   - Token refresh on 401 errors with request retry\n *   - Consistent error handling and user feedback\n *   - Request/response interceptors for common patterns\n *   - Type-safe methods for all API endpoints\n * \n * Request Flow:\n *   1. Add Authorization header with current access token\n *   2. Send request to backend API\n *   3. Handle successful response or error\n *   4. On 401 error: refresh token and retry original request\n *   5. On refresh failure: clear tokens and redirect to login\n */\nclass ApiClient {\n  private client: AxiosInstance;      // Axios HTTP client instance\n  private tokenManager: TokenManager; // Token storage and management\n  private isRefreshing = false;       // Flag to prevent concurrent refresh attempts\n  private failedQueue: Array<{        // Queue for requests waiting on token refresh\n    resolve: (value: any) => void;\n    reject: (error: any) => void;\n  }> = [];\n\n  /**\n   * Initialise API client with configuration and interceptors.\n   * \n   * Sets up:\n   *   - Base URL from configuration\n   *   - Request/response timeouts\n   *   - Default headers\n   *   - Authentication and error interceptors\n   */\n  constructor() {\n    this.tokenManager = TokenManager.getInstance();\n    \n    // Create axios instance with base configuration\n    this.client = axios.create({\n      baseURL: config.apiUrl,              // Backend API base URL\n      timeout: 30000,                      // 30 second timeout for requests\n      headers: {\n        'Content-Type': 'application/json', // JSON request body format\n        'Accept': 'application/json',       // Expected response format\n      },\n    });\n\n    // Set up request/response interceptors\n    this.setupInterceptors();\n  }\n\n  /**\n   * Set up request and response interceptors for authentication and error handling.\n   * \n   * Request Interceptor:\n   *   - Automatically adds Authorization header with current access token\n   *   - Ensures all API requests are authenticated\n   * \n   * Response Interceptor:\n   *   - Handles 401 errors with automatic token refresh\n   *   - Queues failed requests during refresh process\n   *   - Retries original requests after successful refresh\n   *   - Redirects to login on refresh failure\n   */\n  private setupInterceptors(): void {\n    // ===========================================================================\n    // REQUEST INTERCEPTOR: Add authentication token to all requests\n    // ===========================================================================\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.tokenManager.getAccessToken();\n        if (token && config.headers) {\n          // Add Bearer token to Authorization header\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // ===========================================================================\n    // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh\n    // ===========================================================================\n    this.client.interceptors.response.use(\n      (response) => response, // Pass through successful responses\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized errors with automatic token refresh\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          \n          // If already refreshing, queue this request\n          if (this.isRefreshing) {\n            return new Promise((resolve, reject) => {\n              this.failedQueue.push({ resolve, reject });\n            }).then((token) => {\n              // Retry with new token\n              originalRequest.headers.Authorization = `Bearer ${token}`;\n              return this.client(originalRequest);\n            }).catch((err) => {\n              return Promise.reject(err);\n            });\n          }\n\n          // Mark request as retry to prevent infinite loops\n          originalRequest._retry = true;\n          this.isRefreshing = true;\n\n          try {\n            // Attempt to refresh the access token\n            const refreshToken = this.tokenManager.getRefreshToken();\n            if (!refreshToken) {\n              throw new Error('No refresh token available');\n            }\n\n            // Call refresh endpoint\n            const response = await this.refreshAccessToken({ refresh_token: refreshToken });\n            const { access_token, refresh_token: newRefreshToken } = response.data;\n\n            // Store new tokens\n            this.tokenManager.setTokens(access_token, newRefreshToken);\n            \n            // Process queued requests with new token\n            this.processQueue(access_token, null);\n            \n            // Retry original request with new token\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            return this.client(originalRequest);\n            \n          } catch (refreshError) {\n            // Refresh failed - clear tokens and redirect to login\n            this.processQueue(null, refreshError);\n            this.tokenManager.clearTokens();\n            \n            // Redirect to login if we're in the browser\n            if (typeof window !== 'undefined') {\n              window.location.href = '/auth/login';\n            }\n            \n            return Promise.reject(refreshError);\n          } finally {\n            this.isRefreshing = false;\n          }\n        }\n\n        // Handle other errors with consistent error formatting\n        return Promise.reject(this.handleError(error));\n      }\n    );\n  }\n\n  /**\n   * Process queued requests after token refresh attempt.\n   * \n   * During token refresh, multiple requests may fail with 401 errors.\n   * These requests are queued and processed once refresh completes.\n   * \n   * Parameters:\n   *   token: New access token (null if refresh failed)\n   *   error: Refresh error (null if refresh succeeded)\n   */\n  private processQueue(token: string | null, error: any): void {\n    this.failedQueue.forEach(({ resolve, reject }) => {\n      if (error) {\n        // Refresh failed - reject all queued requests\n        reject(error);\n      } else {\n        // Refresh succeeded - resolve with new token\n        resolve(token);\n      }\n    });\n    \n    // Clear the queue\n    this.failedQueue = [];\n  }\n\n  /**\n   * Convert axios errors to standardised ApiError format.\n   * \n   * Provides consistent error handling across all API methods\n   * with user-friendly messages and debugging information.\n   * \n   * Error Types:\n   *   - Response errors: Server returned error status (400, 500, etc.)\n   *   - Network errors: Request failed to reach server\n   *   - Request errors: Invalid request configuration\n   * \n   * Parameters:\n   *   error: Axios error object\n   * \n   * Returns:\n   *   ApiError: Standardised error with message, code, and details\n   */\n  private handleError(error: any): ApiError {\n    const apiError: ApiError = {\n      message: appConfig.errors.unknown,\n      code: 'UNKNOWN_ERROR',\n      status: 500,\n      timestamp: new Date().toISOString(),\n    };\n\n    if (error.response) {\n      // Server responded with error status (4xx, 5xx)\n      apiError.status = error.response.status;\n      apiError.message = error.response.data?.message || this.getErrorMessageByStatus(error.response.status);\n      apiError.code = error.response.data?.code || `HTTP_${error.response.status}`;\n      apiError.details = error.response.data?.details;\n    } else if (error.request) {\n      // Network error - request made but no response received\n      apiError.message = appConfig.errors.network;\n      apiError.code = 'NETWORK_ERROR';\n      apiError.status = 0;\n    } else {\n      // Request setup error - something wrong with request configuration\n      apiError.message = error.message || appConfig.errors.unknown;\n      apiError.code = 'REQUEST_ERROR';\n    }\n\n    return apiError;\n  }\n\n  /**\n   * Get user-friendly error message for HTTP status codes.\n   * \n   * Maps common HTTP status codes to localised error messages\n   * from application configuration.\n   * \n   * Parameters:\n   *   status: HTTP status code\n   * \n   * Returns:\n   *   string: User-friendly error message\n   */\n  private getErrorMessageByStatus(status: number): string {\n    switch (status) {\n      case 400:\n        return appConfig.errors.validation;   // \"Please check your input and try again\"\n      case 401:\n        return appConfig.errors.unauthorized; // \"Please log in to continue\"\n      case 403:\n        return appConfig.errors.forbidden;    // \"You don't have permission to do this\"\n      case 404:\n        return appConfig.errors.notFound;     // \"The requested item was not found\"\n      case 500:\n        return appConfig.errors.server;       // \"Something went wrong on our end\"\n      default:\n        return appConfig.errors.unknown;      // \"An unexpected error occurred\"\n    }\n  }\n\n  // Generic request methods\n  async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.get(url, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.post(url, data, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.put(url, data, config);\n    return response.data;\n  }\n\n  async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.patch(url, data, config);\n    return response.data;\n  }\n\n  async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.delete(url, config);\n    return response.data;\n  }\n\n  // Authentication methods\n  async login(data: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.login, data);\n  }\n\n  async register(data: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.register, data);\n  }\n\n  async refreshAccessToken(data: RefreshTokenRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.refresh, data);\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    const response = await this.post<void>(endpoints.auth.logout);\n    this.tokenManager.clearTokens();\n    return response;\n  }\n\n  async getCurrentUser(): Promise<ApiResponse<User>> {\n    return this.get<User>(endpoints.auth.me);\n  }\n\n  async forgotPassword(email: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.forgotPassword, { email });\n  }\n\n  async resetPassword(token: string, password: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.resetPassword, { token, password });\n  }\n\n  async verifyEmail(token: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.verifyEmail, { token });\n  }\n\n  // User methods\n  async updateProfile(data: Partial<User>): Promise<ApiResponse<User>> {\n    return this.put<User>(endpoints.users.updateProfile, data);\n  }\n\n  async getUserPreferences(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.preferences);\n  }\n\n  async updateUserPreferences(data: any): Promise<ApiResponse<any>> {\n    return this.put(endpoints.users.preferences, data);\n  }\n\n  async getUserStatistics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.statistics);\n  }\n\n  async deleteAccount(): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.users.deleteAccount);\n  }\n\n  // Product methods\n  async getProducts(params?: any): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.list, { params });\n  }\n\n  async searchProducts(query: SearchQuery): Promise<ApiResponse<SearchResult>> {\n    return this.post<SearchResult>(endpoints.products.search, query);\n  }\n\n  async getProduct(id: string): Promise<ApiResponse<Product>> {\n    return this.get<Product>(endpoints.products.byId(id));\n  }\n\n  async getCategories(): Promise<ApiResponse<Category[]>> {\n    return this.get<Category[]>(endpoints.products.categories);\n  }\n\n  async getFeaturedProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.featured);\n  }\n\n  async getTrendingProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.trending);\n  }\n\n  async getProductsByCategory(categoryId: string, params?: any): Promise<PaginatedResponse<Product>> {\n    return this.get<Product[]>(endpoints.products.byCategory(categoryId), { params });\n  }\n\n  // Swipe methods\n  async createSwipeSession(data: any): Promise<ApiResponse<SwipeSession>> {\n    return this.post<SwipeSession>(endpoints.swipes.createSession, data);\n  }\n\n  async getCurrentSwipeSession(): Promise<ApiResponse<SwipeSession>> {\n    return this.get<SwipeSession>(endpoints.swipes.currentSession);\n  }\n\n  async recordSwipe(sessionId: string, data: SwipeRequest): Promise<ApiResponse<SwipeInteraction>> {\n    return this.post<SwipeInteraction>(endpoints.swipes.interactions(sessionId), data);\n  }\n\n  async getSwipeAnalytics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.swipes.analytics);\n  }\n\n  // Recommendation methods\n  async generateRecommendations(data: RecommendationRequest): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.generate, data);\n  }\n\n  async getRecommendations(params?: any): Promise<PaginatedResponse<Recommendation>> {\n    return this.get<Recommendation[]>(endpoints.recommendations.list, { params });\n  }\n\n  async getRecommendation(id: string): Promise<ApiResponse<Recommendation>> {\n    return this.get<Recommendation>(endpoints.recommendations.byId(id));\n  }\n\n  async provideFeedback(id: string, feedback: any): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.recommendations.feedback(id), feedback);\n  }\n\n  async refreshRecommendations(): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.refresh);\n  }\n\n  // Gift Link methods\n  async createGiftLink(data: CreateGiftLinkRequest): Promise<ApiResponse<GiftLink>> {\n    return this.post<GiftLink>(endpoints.giftLinks.create, data);\n  }\n\n  async getGiftLinks(): Promise<ApiResponse<GiftLink[]>> {\n    return this.get<GiftLink[]>(endpoints.giftLinks.list);\n  }\n\n  async getGiftLink(id: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byId(id));\n  }\n\n  async getGiftLinkByToken(token: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byToken(token));\n  }\n\n  async deleteGiftLink(id: string): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.giftLinks.delete(id));\n  }\n\n  async getGiftLinkAnalytics(id: string): Promise<ApiResponse<GiftLinkInteraction[]>> {\n    return this.get<GiftLinkInteraction[]>(endpoints.giftLinks.analytics(id));\n  }\n\n  // Analytics methods\n  async trackEvent(event: AnalyticsEvent): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.analytics.track, event);\n  }\n\n  async getAnalyticsDashboard(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.analytics.dashboard);\n  }\n\n  // Health check\n  async healthCheck(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.health);\n  }\n}\n\n// Create and export API client instance\nexport const apiClient = new ApiClient();\n\n// Export token manager for external use\nexport const tokenManager = TokenManager.getInstance();\n\n// Export convenience methods with nested structure for better organisation\nexport const api = {\n  // Authentication methods\n  auth: {\n    login: (data: LoginRequest) => apiClient.login(data),\n    register: (data: RegisterRequest) => apiClient.register(data),\n    logout: () => apiClient.logout(),\n    getCurrentUser: () => apiClient.getCurrentUser(),\n    refresh: (data: RefreshTokenRequest) => apiClient.refreshAccessToken(data),\n    forgotPassword: (email: string) => apiClient.forgotPassword(email),\n    resetPassword: (token: string, password: string) => apiClient.resetPassword(token, password),\n    verifyEmail: (token: string) => apiClient.verifyEmail(token),\n  },\n\n  // User management methods\n  users: {\n    updateProfile: (data: Partial<User>) => apiClient.updateProfile(data),\n    getPreferences: () => apiClient.getUserPreferences(),\n    updatePreferences: (data: any) => apiClient.updateUserPreferences(data),\n    getStatistics: () => apiClient.getUserStatistics(),\n    deleteAccount: () => apiClient.deleteAccount(),\n  },\n\n  // Product methods\n  products: {\n    getProducts: (params?: any) => apiClient.getProducts(params),\n    searchProducts: (query: SearchQuery) => apiClient.searchProducts(query),\n    getProduct: (id: string) => apiClient.getProduct(id),\n    getCategories: () => apiClient.getCategories(),\n    getFeatured: () => apiClient.getFeaturedProducts(),\n    getTrending: () => apiClient.getTrendingProducts(),\n    getByCategory: (categoryId: string, params?: any) => apiClient.getProductsByCategory(categoryId, params),\n  },\n\n  // Swipe methods\n  swipes: {\n    createSession: (data: any) => apiClient.createSwipeSession(data),\n    getCurrentSession: () => apiClient.getCurrentSwipeSession(),\n    recordSwipe: (sessionId: string, data: SwipeRequest) => apiClient.recordSwipe(sessionId, data),\n    getAnalytics: () => apiClient.getSwipeAnalytics(),\n\n    // Alternative method names for backward compatibility\n    startSession: (data: any) => apiClient.createSwipeSession(data),\n  },\n\n  // Recommendation methods\n  recommendations: {\n    generate: (data: RecommendationRequest) => apiClient.generateRecommendations(data),\n    getRecommendations: (params?: any) => apiClient.getRecommendations(params),\n    getRecommendation: (id: string) => apiClient.getRecommendation(id),\n    provideFeedback: (id: string, feedback: any) => apiClient.provideFeedback(id, feedback),\n    refresh: () => apiClient.refreshRecommendations(),\n\n    // Alternative method name for compatibility with tests\n    createRecommendationRequest: (data: RecommendationRequest) => apiClient.generateRecommendations(data),\n  },\n\n  // Gift Link methods\n  giftLinks: {\n    create: (data: CreateGiftLinkRequest) => apiClient.createGiftLink(data),\n    getAll: () => apiClient.getGiftLinks(),\n    getById: (id: string) => apiClient.getGiftLink(id),\n    getByToken: (token: string) => apiClient.getGiftLinkByToken(token),\n    delete: (id: string) => apiClient.deleteGiftLink(id),\n    getAnalytics: (id: string) => apiClient.getGiftLinkAnalytics(id),\n  },\n\n  // Analytics methods\n  analytics: {\n    trackEvent: (event: AnalyticsEvent) => apiClient.trackEvent(event),\n    getDashboard: () => apiClient.getAnalyticsDashboard(),\n  },\n\n  // Health check\n  health: () => apiClient.healthCheck(),\n};\n\nexport default apiClient;"],
      names: ["api", "apiClient", "tokenManager", "TokenManager", "getInstance", "instance", "initializeFromStorage", "window", "accessToken", "localStorage", "getItem", "appConfig", "storage", "authToken", "refreshToken", "setTokens", "setItem", "getAccessToken", "token", "getRefreshToken", "clearTokens", "removeItem", "user", "ApiClient", "constructor", "isRefreshing", "failedQueue", "client", "axios", "create", "baseURL", "config", "apiUrl", "timeout", "headers", "setupInterceptors", "interceptors", "request", "use", "Authorization", "error", "Promise", "reject", "response", "originalRequest", "status", "_retry", "resolve", "push", "then", "catch", "err", "Error", "refreshAccessToken", "refresh_token", "access_token", "newRefreshToken", "data", "processQueue", "refreshError", "location", "href", "handleError", "forEach", "apiError", "message", "errors", "unknown", "code", "timestamp", "Date", "toISOString", "getErrorMessageByStatus", "details", "network", "validation", "unauthorized", "forbidden", "notFound", "server", "get", "url", "hasOwnProperty", "success", "post", "put", "patch", "delete", "login", "endpoints", "auth", "register", "refresh", "logout", "getCurrentUser", "me", "forgotPassword", "email", "resetPassword", "password", "verifyEmail", "updateProfile", "users", "getUserPreferences", "preferences", "updateUserPreferences", "getUserStatistics", "statistics", "deleteAccount", "getProducts", "params", "products", "list", "searchProducts", "query", "search", "getProduct", "id", "byId", "getCategories", "categories", "getFeaturedProducts", "featured", "getTrendingProducts", "trending", "getProductsByCategory", "categoryId", "byCategory", "createSwipeSession", "swipes", "createSession", "getCurrentSwipeSession", "currentSession", "recordSwipe", "sessionId", "interactions", "getSwipeAnalytics", "analytics", "generateRecommendations", "recommendations", "generate", "getRecommendations", "getRecommendation", "provideFeedback", "feedback", "refreshRecommendations", "createGiftLink", "giftLinks", "getGiftLinks", "getGiftLink", "getGiftLinkByToken", "byToken", "deleteGiftLink", "getGiftLinkAnalytics", "trackEvent", "event", "track", "getAnalyticsDashboard", "dashboard", "healthCheck", "health", "getPreferences", "updatePreferences", "getStatistics", "getFeatured", "getTrending", "getByCategory", "getCurrentSession", "getAnalytics", "startSession", "createRecommendationRequest", "getAll", "getById", "getByToken", "getDashboard"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "019d8e761f0a56c664d558b1f4cae15c8983d1f6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vtt3zf6ox = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vtt3zf6ox();
cov_vtt3zf6ox().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_vtt3zf6ox().f[0]++;
  cov_vtt3zf6ox().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_vtt3zf6ox().s[3]++;
_export(exports, {
  api: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[1]++;
    cov_vtt3zf6ox().s[4]++;
    return api;
  },
  apiClient: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[2]++;
    cov_vtt3zf6ox().s[5]++;
    return apiClient;
  },
  default: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[3]++;
    cov_vtt3zf6ox().s[6]++;
    return _default;
  },
  tokenManager: function () {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[4]++;
    cov_vtt3zf6ox().s[7]++;
    return tokenManager;
  }
});
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_vtt3zf6ox().s[8]++, _interop_require_default(require("axios")));
const _config =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[9]++, require("../config"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_vtt3zf6ox().f[5]++;
  cov_vtt3zf6ox().s[10]++;
  return /* istanbul ignore next */(cov_vtt3zf6ox().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_vtt3zf6ox().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_vtt3zf6ox().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_vtt3zf6ox().b[0][1]++, {
    default: obj
  });
}
// ==============================================================================
// TOKEN MANAGEMENT
// ==============================================================================
// Singleton class for secure JWT token storage and management
/**
 * Secure JWT token manager with localStorage persistence.
 * 
 * Manages access and refresh tokens for API authentication:
 *   - Singleton pattern ensures consistent token state
 *   - Automatic localStorage synchronisation
 *   - Secure token cleanup on logout
 *   - Server-side rendering safe (checks for window)
 * 
 * Token Lifecycle:
 *   1. Tokens received from authentication endpoints
 *   2. Stored in localStorage and memory
 *   3. Access token used for API requests
 *   4. Refresh token used to renew expired access tokens
 *   5. Cleared on logout or authentication errors
 */
class TokenManager {
  /**
  * Get singleton TokenManager instance.
  * 
  * Creates new instance on first call and initialises tokens
  * from localStorage if available.
  * 
  * Returns:
  *   TokenManager: Singleton instance
  */
  static getInstance() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[6]++;
    cov_vtt3zf6ox().s[11]++;
    if (!TokenManager.instance) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[2][0]++;
      cov_vtt3zf6ox().s[12]++;
      TokenManager.instance = new TokenManager();
      // Initialize tokens from localStorage on first creation
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[13]++;
      TokenManager.instance.initializeFromStorage();
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[2][1]++;
    }
    cov_vtt3zf6ox().s[14]++;
    return TokenManager.instance;
  }
  /**
  * Initialise tokens from localStorage on browser load.
  * 
  * Safely checks for browser environment and loads previously
  * stored tokens into memory cache.
  * 
  * Note: Only runs in browser environment (SSR safe)
  */
  initializeFromStorage() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[7]++;
    cov_vtt3zf6ox().s[15]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[3][0]++;
      cov_vtt3zf6ox().s[16]++;
      this.accessToken = localStorage.getItem(_config.appConfig.storage.authToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[17]++;
      this.refreshToken = localStorage.getItem(_config.appConfig.storage.refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[3][1]++;
    }
  }
  /**
  * Store new JWT tokens in memory and localStorage.
  * 
  * Updates both in-memory cache and persistent storage
  * for session continuity across browser reloads.
  * 
  * Parameters:
  *   accessToken: JWT access token for API requests
  *   refreshToken: JWT refresh token for session renewal
  */
  setTokens(accessToken, refreshToken) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[8]++;
    cov_vtt3zf6ox().s[18]++;
    this.accessToken = accessToken;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[19]++;
    this.refreshToken = refreshToken;
    // Persist to localStorage for session continuity
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[20]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[4][0]++;
      cov_vtt3zf6ox().s[21]++;
      localStorage.setItem(_config.appConfig.storage.authToken, accessToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[22]++;
      localStorage.setItem(_config.appConfig.storage.refreshToken, refreshToken);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[4][1]++;
    }
  }
  /**
  * Retrieve current access token for API requests.
  *
  * Checks memory cache first, then falls back to localStorage.
  * Returns null if no token is available.
  *
  * Returns:
  *   string | null: Current access token or null if not available
  */
  getAccessToken() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[9]++;
    cov_vtt3zf6ox().s[23]++;
    // Return cached token if available
    if (this.accessToken) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[5][0]++;
      cov_vtt3zf6ox().s[24]++;
      return this.accessToken;
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[5][1]++;
    }
    // Fallback to localStorage (handles page reloads)
    cov_vtt3zf6ox().s[25]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[6][0]++;
      const token =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().s[26]++, localStorage.getItem(_config.appConfig.storage.authToken));
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[27]++;
      return /* istanbul ignore next */(cov_vtt3zf6ox().b[7][0]++, token) ||
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[7][1]++, null); // Ensure we return null instead of undefined
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[6][1]++;
    }
    cov_vtt3zf6ox().s[28]++;
    return null;
  }
  /**
  * Retrieve current refresh token for session renewal.
  *
  * Checks memory cache first, then falls back to localStorage.
  * Returns null if no token is available.
  *
  * Returns:
  *   string | null: Current refresh token or null if not available
  */
  getRefreshToken() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[10]++;
    cov_vtt3zf6ox().s[29]++;
    // Return cached token if available
    if (this.refreshToken) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[8][0]++;
      cov_vtt3zf6ox().s[30]++;
      return this.refreshToken;
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[8][1]++;
    }
    // Fallback to localStorage (handles page reloads)
    cov_vtt3zf6ox().s[31]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[9][0]++;
      const token =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().s[32]++, localStorage.getItem(_config.appConfig.storage.refreshToken));
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[33]++;
      return /* istanbul ignore next */(cov_vtt3zf6ox().b[10][0]++, token) ||
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[10][1]++, null); // Ensure we return null instead of undefined
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[9][1]++;
    }
    cov_vtt3zf6ox().s[34]++;
    return null;
  }
  /**
  * Clear all stored tokens and user data.
  * 
  * Removes tokens from both memory and localStorage.
  * Called during logout or authentication errors.
  * 
  * Security:
  *   - Clears all authentication-related data
  *   - Prevents token reuse after logout
  *   - Ensures clean state for new authentication
  */
  clearTokens() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[11]++;
    cov_vtt3zf6ox().s[35]++;
    // Clear memory cache
    this.accessToken = null;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[36]++;
    this.refreshToken = null;
    // Clear persistent storage
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[37]++;
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[11][0]++;
      cov_vtt3zf6ox().s[38]++;
      localStorage.removeItem(_config.appConfig.storage.authToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[39]++;
      localStorage.removeItem(_config.appConfig.storage.refreshToken);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[40]++;
      localStorage.removeItem(_config.appConfig.storage.user);
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[11][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[12]++;
    cov_vtt3zf6ox().s[41]++;
    this.accessToken = null // In-memory access token cache
    ;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[42]++;
    this.refreshToken = null // In-memory refresh token cache
    ;
  }
}
// ==============================================================================
// API CLIENT
// ==============================================================================
// Main HTTP client with authentication and error handling
/**
 * Comprehensive HTTP client for aclue API communication.
 * 
 * Features:
 *   - Automatic JWT token attachment to requests
 *   - Token refresh on 401 errors with request retry
 *   - Consistent error handling and user feedback
 *   - Request/response interceptors for common patterns
 *   - Type-safe methods for all API endpoints
 * 
 * Request Flow:
 *   1. Add Authorization header with current access token
 *   2. Send request to backend API
 *   3. Handle successful response or error
 *   4. On 401 error: refresh token and retry original request
 *   5. On refresh failure: clear tokens and redirect to login
 */
class ApiClient {
  /**
  * Initialise API client with configuration and interceptors.
  * 
  * Sets up:
  *   - Base URL from configuration
  *   - Request/response timeouts
  *   - Default headers
  *   - Authentication and error interceptors
  */
  constructor() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[13]++;
    cov_vtt3zf6ox().s[43]++;
    this.isRefreshing = false // Flag to prevent concurrent refresh attempts
    ;
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[44]++;
    this.failedQueue = [];
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[45]++;
    this.tokenManager = TokenManager.getInstance();
    // Create axios instance with base configuration
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[46]++;
    this.client = _axios.default.create({
      baseURL: _config.config.apiUrl,
      timeout: 30000,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    });
    // Set up request/response interceptors
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[47]++;
    this.setupInterceptors();
  }
  /**
  * Set up request and response interceptors for authentication and error handling.
  * 
  * Request Interceptor:
  *   - Automatically adds Authorization header with current access token
  *   - Ensures all API requests are authenticated
  * 
  * Response Interceptor:
  *   - Handles 401 errors with automatic token refresh
  *   - Queues failed requests during refresh process
  *   - Retries original requests after successful refresh
  *   - Redirects to login on refresh failure
  */
  setupInterceptors() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[14]++;
    cov_vtt3zf6ox().s[48]++;
    // ===========================================================================
    // REQUEST INTERCEPTOR: Add authentication token to all requests
    // ===========================================================================
    this.client.interceptors.request.use(config => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[15]++;
      const token =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().s[49]++, this.tokenManager.getAccessToken());
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[13][0]++, token) &&
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[13][1]++, config.headers)) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[12][0]++;
        cov_vtt3zf6ox().s[51]++;
        // Add Bearer token to Authorization header
        config.headers.Authorization = `Bearer ${token}`;
      } else
      /* istanbul ignore next */
      {
        cov_vtt3zf6ox().b[12][1]++;
      }
      cov_vtt3zf6ox().s[52]++;
      return config;
    }, error => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[16]++;
      cov_vtt3zf6ox().s[53]++;
      return Promise.reject(error);
    });
    // ===========================================================================
    // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh
    // ===========================================================================
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[54]++;
    this.client.interceptors.response.use(response => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[17]++;
      cov_vtt3zf6ox().s[55]++;
      return response;
    }, async error => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[18]++;
      const originalRequest =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().s[56]++, error.config);
      // Handle 401 Unauthorized errors with automatic token refresh
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[15][0]++, error.response?.status === 401) &&
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[15][1]++, !originalRequest._retry)) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[14][0]++;
        cov_vtt3zf6ox().s[58]++;
        // If already refreshing, queue this request
        if (this.isRefreshing) {
          /* istanbul ignore next */
          cov_vtt3zf6ox().b[16][0]++;
          cov_vtt3zf6ox().s[59]++;
          return new Promise((resolve, reject) => {
            /* istanbul ignore next */
            cov_vtt3zf6ox().f[19]++;
            cov_vtt3zf6ox().s[60]++;
            this.failedQueue.push({
              resolve,
              reject
            });
          }).then(token => {
            /* istanbul ignore next */
            cov_vtt3zf6ox().f[20]++;
            cov_vtt3zf6ox().s[61]++;
            // Retry with new token
            originalRequest.headers.Authorization = `Bearer ${token}`;
            /* istanbul ignore next */
            cov_vtt3zf6ox().s[62]++;
            return this.client(originalRequest);
          }).catch(err => {
            /* istanbul ignore next */
            cov_vtt3zf6ox().f[21]++;
            cov_vtt3zf6ox().s[63]++;
            return Promise.reject(err);
          });
        } else
        /* istanbul ignore next */
        {
          cov_vtt3zf6ox().b[16][1]++;
        }
        // Mark request as retry to prevent infinite loops
        cov_vtt3zf6ox().s[64]++;
        originalRequest._retry = true;
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[65]++;
        this.isRefreshing = true;
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[66]++;
        try {
          // Attempt to refresh the access token
          const refreshToken =
          /* istanbul ignore next */
          (cov_vtt3zf6ox().s[67]++, this.tokenManager.getRefreshToken());
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[68]++;
          if (!refreshToken) {
            /* istanbul ignore next */
            cov_vtt3zf6ox().b[17][0]++;
            cov_vtt3zf6ox().s[69]++;
            throw new Error("No refresh token available");
          } else
          /* istanbul ignore next */
          {
            cov_vtt3zf6ox().b[17][1]++;
          }
          // Call refresh endpoint
          const response =
          /* istanbul ignore next */
          (cov_vtt3zf6ox().s[70]++, await this.refreshAccessToken({
            refresh_token: refreshToken
          }));
          const {
            access_token,
            refresh_token: newRefreshToken
          } =
          /* istanbul ignore next */
          (cov_vtt3zf6ox().s[71]++, response.data);
          // Store new tokens
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[72]++;
          this.tokenManager.setTokens(access_token, newRefreshToken);
          // Process queued requests with new token
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[73]++;
          this.processQueue(access_token, null);
          // Retry original request with new token
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[74]++;
          originalRequest.headers.Authorization = `Bearer ${access_token}`;
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[75]++;
          return this.client(originalRequest);
        } catch (refreshError) {
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[76]++;
          // Refresh failed - clear tokens and redirect to login
          this.processQueue(null, refreshError);
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[77]++;
          this.tokenManager.clearTokens();
          // Redirect to login if we're in the browser
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[78]++;
          if (typeof window !== "undefined") {
            /* istanbul ignore next */
            cov_vtt3zf6ox().b[18][0]++;
            cov_vtt3zf6ox().s[79]++;
            window.location.href = "/auth/login";
          } else
          /* istanbul ignore next */
          {
            cov_vtt3zf6ox().b[18][1]++;
          }
          cov_vtt3zf6ox().s[80]++;
          return Promise.reject(refreshError);
        } finally {
          /* istanbul ignore next */
          cov_vtt3zf6ox().s[81]++;
          this.isRefreshing = false;
        }
      } else
      /* istanbul ignore next */
      {
        cov_vtt3zf6ox().b[14][1]++;
      }
      // Handle other errors with consistent error formatting
      cov_vtt3zf6ox().s[82]++;
      return Promise.reject(this.handleError(error));
    });
  }
  /**
  * Process queued requests after token refresh attempt.
  * 
  * During token refresh, multiple requests may fail with 401 errors.
  * These requests are queued and processed once refresh completes.
  * 
  * Parameters:
  *   token: New access token (null if refresh failed)
  *   error: Refresh error (null if refresh succeeded)
  */
  processQueue(token, error) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[22]++;
    cov_vtt3zf6ox().s[83]++;
    this.failedQueue.forEach(({
      resolve,
      reject
    }) => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[23]++;
      cov_vtt3zf6ox().s[84]++;
      if (error) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[19][0]++;
        cov_vtt3zf6ox().s[85]++;
        // Refresh failed - reject all queued requests
        reject(error);
      } else {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[19][1]++;
        cov_vtt3zf6ox().s[86]++;
        // Refresh succeeded - resolve with new token
        resolve(token);
      }
    });
    // Clear the queue
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[87]++;
    this.failedQueue = [];
  }
  /**
  * Convert axios errors to standardised ApiError format.
  * 
  * Provides consistent error handling across all API methods
  * with user-friendly messages and debugging information.
  * 
  * Error Types:
  *   - Response errors: Server returned error status (400, 500, etc.)
  *   - Network errors: Request failed to reach server
  *   - Request errors: Invalid request configuration
  * 
  * Parameters:
  *   error: Axios error object
  * 
  * Returns:
  *   ApiError: Standardised error with message, code, and details
  */
  handleError(error) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[24]++;
    const apiError =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[88]++, {
      message: _config.appConfig.errors.unknown,
      code: "UNKNOWN_ERROR",
      status: 500,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[89]++;
    if (error.response) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[20][0]++;
      cov_vtt3zf6ox().s[90]++;
      // Server responded with error status (4xx, 5xx)
      apiError.status = error.response.status;
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[91]++;
      apiError.message =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[21][0]++, error.response.data?.message) ||
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[21][1]++, this.getErrorMessageByStatus(error.response.status));
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[92]++;
      apiError.code =
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[22][0]++, error.response.data?.code) ||
      /* istanbul ignore next */
      (cov_vtt3zf6ox().b[22][1]++, `HTTP_${error.response.status}`);
      /* istanbul ignore next */
      cov_vtt3zf6ox().s[93]++;
      apiError.details = error.response.data?.details;
    } else {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[20][1]++;
      cov_vtt3zf6ox().s[94]++;
      if (error.request) {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][0]++;
        cov_vtt3zf6ox().s[95]++;
        // Network error - request made but no response received
        apiError.message = _config.appConfig.errors.network;
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[96]++;
        apiError.code = "NETWORK_ERROR";
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[97]++;
        apiError.status = 0;
      } else {
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[23][1]++;
        cov_vtt3zf6ox().s[98]++;
        // Request setup error - something wrong with request configuration
        apiError.message =
        /* istanbul ignore next */
        (cov_vtt3zf6ox().b[24][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_vtt3zf6ox().b[24][1]++, _config.appConfig.errors.unknown);
        /* istanbul ignore next */
        cov_vtt3zf6ox().s[99]++;
        apiError.code = "REQUEST_ERROR";
      }
    }
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[100]++;
    return apiError;
  }
  /**
  * Get user-friendly error message for HTTP status codes.
  * 
  * Maps common HTTP status codes to localised error messages
  * from application configuration.
  * 
  * Parameters:
  *   status: HTTP status code
  * 
  * Returns:
  *   string: User-friendly error message
  */
  getErrorMessageByStatus(status) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[25]++;
    cov_vtt3zf6ox().s[101]++;
    switch (status) {
      case 400:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[25][0]++;
        cov_vtt3zf6ox().s[102]++;
        return _config.appConfig.errors.validation;
      // "Please check your input and try again"
      case 401:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[25][1]++;
        cov_vtt3zf6ox().s[103]++;
        return _config.appConfig.errors.unauthorized;
      // "Please log in to continue"
      case 403:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[25][2]++;
        cov_vtt3zf6ox().s[104]++;
        return _config.appConfig.errors.forbidden;
      // "You don't have permission to do this"
      case 404:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[25][3]++;
        cov_vtt3zf6ox().s[105]++;
        return _config.appConfig.errors.notFound;
      // "The requested item was not found"
      case 500:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[25][4]++;
        cov_vtt3zf6ox().s[106]++;
        return _config.appConfig.errors.server;
      // "Something went wrong on our end"
      default:
        /* istanbul ignore next */
        cov_vtt3zf6ox().b[25][5]++;
        cov_vtt3zf6ox().s[107]++;
        return _config.appConfig.errors.unknown;
      // "An unexpected error occurred"
    }
  }
  // Generic request methods
  async get(url, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[26]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[108]++, await this.client.get(url, config));
    // Handle direct response from backend (not wrapped in ApiResponse)
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[109]++;
    if (
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[27][0]++, response.data) &&
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[27][1]++, !response.data.hasOwnProperty("data"))) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[26][0]++;
      cov_vtt3zf6ox().s[110]++;
      return {
        data: response.data,
        success: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[26][1]++;
    }
    cov_vtt3zf6ox().s[111]++;
    return response.data;
  }
  async post(url, data, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[27]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[112]++, await this.client.post(url, data, config));
    // Handle direct response from backend (not wrapped in ApiResponse)
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[113]++;
    if (
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[29][0]++, response.data) &&
    /* istanbul ignore next */
    (cov_vtt3zf6ox().b[29][1]++, !response.data.hasOwnProperty("data"))) {
      /* istanbul ignore next */
      cov_vtt3zf6ox().b[28][0]++;
      cov_vtt3zf6ox().s[114]++;
      return {
        data: response.data,
        success: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_vtt3zf6ox().b[28][1]++;
    }
    cov_vtt3zf6ox().s[115]++;
    return response.data;
  }
  async put(url, data, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[28]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[116]++, await this.client.put(url, data, config));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[117]++;
    return response.data;
  }
  async patch(url, data, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[29]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[118]++, await this.client.patch(url, data, config));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[119]++;
    return response.data;
  }
  async delete(url, config) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[30]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[120]++, await this.client.delete(url, config));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[121]++;
    return response.data;
  }
  // Authentication methods
  async login(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[31]++;
    cov_vtt3zf6ox().s[122]++;
    return this.post(_config.endpoints.auth.login, data);
  }
  async register(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[32]++;
    cov_vtt3zf6ox().s[123]++;
    return this.post(_config.endpoints.auth.register, data);
  }
  async refreshAccessToken(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[33]++;
    cov_vtt3zf6ox().s[124]++;
    return this.post(_config.endpoints.auth.refresh, data);
  }
  async logout() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[34]++;
    const response =
    /* istanbul ignore next */
    (cov_vtt3zf6ox().s[125]++, await this.post(_config.endpoints.auth.logout));
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[126]++;
    this.tokenManager.clearTokens();
    /* istanbul ignore next */
    cov_vtt3zf6ox().s[127]++;
    return response;
  }
  async getCurrentUser() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[35]++;
    cov_vtt3zf6ox().s[128]++;
    return this.get(_config.endpoints.auth.me);
  }
  async forgotPassword(email) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[36]++;
    cov_vtt3zf6ox().s[129]++;
    return this.post(_config.endpoints.auth.forgotPassword, {
      email
    });
  }
  async resetPassword(token, password) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[37]++;
    cov_vtt3zf6ox().s[130]++;
    return this.post(_config.endpoints.auth.resetPassword, {
      token,
      password
    });
  }
  async verifyEmail(token) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[38]++;
    cov_vtt3zf6ox().s[131]++;
    return this.post(_config.endpoints.auth.verifyEmail, {
      token
    });
  }
  // User methods
  async updateProfile(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[39]++;
    cov_vtt3zf6ox().s[132]++;
    return this.put(_config.endpoints.users.updateProfile, data);
  }
  async getUserPreferences() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[40]++;
    cov_vtt3zf6ox().s[133]++;
    return this.get(_config.endpoints.users.preferences);
  }
  async updateUserPreferences(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[41]++;
    cov_vtt3zf6ox().s[134]++;
    return this.put(_config.endpoints.users.preferences, data);
  }
  async getUserStatistics() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[42]++;
    cov_vtt3zf6ox().s[135]++;
    return this.get(_config.endpoints.users.statistics);
  }
  async deleteAccount() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[43]++;
    cov_vtt3zf6ox().s[136]++;
    return this.delete(_config.endpoints.users.deleteAccount);
  }
  // Product methods
  async getProducts(params) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[44]++;
    cov_vtt3zf6ox().s[137]++;
    return this.get(_config.endpoints.products.list, {
      params
    });
  }
  async searchProducts(query) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[45]++;
    cov_vtt3zf6ox().s[138]++;
    return this.post(_config.endpoints.products.search, query);
  }
  async getProduct(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[46]++;
    cov_vtt3zf6ox().s[139]++;
    return this.get(_config.endpoints.products.byId(id));
  }
  async getCategories() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[47]++;
    cov_vtt3zf6ox().s[140]++;
    return this.get(_config.endpoints.products.categories);
  }
  async getFeaturedProducts() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[48]++;
    cov_vtt3zf6ox().s[141]++;
    return this.get(_config.endpoints.products.featured);
  }
  async getTrendingProducts() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[49]++;
    cov_vtt3zf6ox().s[142]++;
    return this.get(_config.endpoints.products.trending);
  }
  async getProductsByCategory(categoryId, params) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[50]++;
    cov_vtt3zf6ox().s[143]++;
    return this.get(_config.endpoints.products.byCategory(categoryId), {
      params
    });
  }
  // Swipe methods
  async createSwipeSession(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[51]++;
    cov_vtt3zf6ox().s[144]++;
    return this.post(_config.endpoints.swipes.createSession, data);
  }
  async getCurrentSwipeSession() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[52]++;
    cov_vtt3zf6ox().s[145]++;
    return this.get(_config.endpoints.swipes.currentSession);
  }
  async recordSwipe(sessionId, data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[53]++;
    cov_vtt3zf6ox().s[146]++;
    return this.post(_config.endpoints.swipes.interactions(sessionId), data);
  }
  async getSwipeAnalytics() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[54]++;
    cov_vtt3zf6ox().s[147]++;
    return this.get(_config.endpoints.swipes.analytics);
  }
  // Recommendation methods
  async generateRecommendations(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[55]++;
    cov_vtt3zf6ox().s[148]++;
    return this.post(_config.endpoints.recommendations.generate, data);
  }
  async getRecommendations(params) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[56]++;
    cov_vtt3zf6ox().s[149]++;
    return this.get(_config.endpoints.recommendations.list, {
      params
    });
  }
  async getRecommendation(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[57]++;
    cov_vtt3zf6ox().s[150]++;
    return this.get(_config.endpoints.recommendations.byId(id));
  }
  async provideFeedback(id, feedback) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[58]++;
    cov_vtt3zf6ox().s[151]++;
    return this.post(_config.endpoints.recommendations.feedback(id), feedback);
  }
  async refreshRecommendations() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[59]++;
    cov_vtt3zf6ox().s[152]++;
    return this.post(_config.endpoints.recommendations.refresh);
  }
  // Gift Link methods
  async createGiftLink(data) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[60]++;
    cov_vtt3zf6ox().s[153]++;
    return this.post(_config.endpoints.giftLinks.create, data);
  }
  async getGiftLinks() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[61]++;
    cov_vtt3zf6ox().s[154]++;
    return this.get(_config.endpoints.giftLinks.list);
  }
  async getGiftLink(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[62]++;
    cov_vtt3zf6ox().s[155]++;
    return this.get(_config.endpoints.giftLinks.byId(id));
  }
  async getGiftLinkByToken(token) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[63]++;
    cov_vtt3zf6ox().s[156]++;
    return this.get(_config.endpoints.giftLinks.byToken(token));
  }
  async deleteGiftLink(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[64]++;
    cov_vtt3zf6ox().s[157]++;
    return this.delete(_config.endpoints.giftLinks.delete(id));
  }
  async getGiftLinkAnalytics(id) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[65]++;
    cov_vtt3zf6ox().s[158]++;
    return this.get(_config.endpoints.giftLinks.analytics(id));
  }
  // Analytics methods
  async trackEvent(event) {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[66]++;
    cov_vtt3zf6ox().s[159]++;
    return this.post(_config.endpoints.analytics.track, event);
  }
  async getAnalyticsDashboard() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[67]++;
    cov_vtt3zf6ox().s[160]++;
    return this.get(_config.endpoints.analytics.dashboard);
  }
  // Health check
  async healthCheck() {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[68]++;
    cov_vtt3zf6ox().s[161]++;
    return this.get(_config.endpoints.health);
  }
}
const apiClient =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[162]++, new ApiClient());
const tokenManager =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[163]++, TokenManager.getInstance());
const api =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[164]++, {
  // Authentication methods
  auth: {
    login: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[69]++;
      cov_vtt3zf6ox().s[165]++;
      return apiClient.login(data);
    },
    register: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[70]++;
      cov_vtt3zf6ox().s[166]++;
      return apiClient.register(data);
    },
    logout: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[71]++;
      cov_vtt3zf6ox().s[167]++;
      return apiClient.logout();
    },
    getCurrentUser: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[72]++;
      cov_vtt3zf6ox().s[168]++;
      return apiClient.getCurrentUser();
    },
    refresh: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[73]++;
      cov_vtt3zf6ox().s[169]++;
      return apiClient.refreshAccessToken(data);
    },
    forgotPassword: email => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[74]++;
      cov_vtt3zf6ox().s[170]++;
      return apiClient.forgotPassword(email);
    },
    resetPassword: (token, password) => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[75]++;
      cov_vtt3zf6ox().s[171]++;
      return apiClient.resetPassword(token, password);
    },
    verifyEmail: token => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[76]++;
      cov_vtt3zf6ox().s[172]++;
      return apiClient.verifyEmail(token);
    }
  },
  // User management methods
  users: {
    updateProfile: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[77]++;
      cov_vtt3zf6ox().s[173]++;
      return apiClient.updateProfile(data);
    },
    getPreferences: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[78]++;
      cov_vtt3zf6ox().s[174]++;
      return apiClient.getUserPreferences();
    },
    updatePreferences: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[79]++;
      cov_vtt3zf6ox().s[175]++;
      return apiClient.updateUserPreferences(data);
    },
    getStatistics: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[80]++;
      cov_vtt3zf6ox().s[176]++;
      return apiClient.getUserStatistics();
    },
    deleteAccount: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[81]++;
      cov_vtt3zf6ox().s[177]++;
      return apiClient.deleteAccount();
    }
  },
  // Product methods
  products: {
    getProducts: params => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[82]++;
      cov_vtt3zf6ox().s[178]++;
      return apiClient.getProducts(params);
    },
    searchProducts: query => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[83]++;
      cov_vtt3zf6ox().s[179]++;
      return apiClient.searchProducts(query);
    },
    getProduct: id => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[84]++;
      cov_vtt3zf6ox().s[180]++;
      return apiClient.getProduct(id);
    },
    getCategories: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[85]++;
      cov_vtt3zf6ox().s[181]++;
      return apiClient.getCategories();
    },
    getFeatured: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[86]++;
      cov_vtt3zf6ox().s[182]++;
      return apiClient.getFeaturedProducts();
    },
    getTrending: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[87]++;
      cov_vtt3zf6ox().s[183]++;
      return apiClient.getTrendingProducts();
    },
    getByCategory: (categoryId, params) => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[88]++;
      cov_vtt3zf6ox().s[184]++;
      return apiClient.getProductsByCategory(categoryId, params);
    }
  },
  // Swipe methods
  swipes: {
    createSession: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[89]++;
      cov_vtt3zf6ox().s[185]++;
      return apiClient.createSwipeSession(data);
    },
    getCurrentSession: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[90]++;
      cov_vtt3zf6ox().s[186]++;
      return apiClient.getCurrentSwipeSession();
    },
    recordSwipe: (sessionId, data) => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[91]++;
      cov_vtt3zf6ox().s[187]++;
      return apiClient.recordSwipe(sessionId, data);
    },
    getAnalytics: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[92]++;
      cov_vtt3zf6ox().s[188]++;
      return apiClient.getSwipeAnalytics();
    },
    // Alternative method names for backward compatibility
    startSession: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[93]++;
      cov_vtt3zf6ox().s[189]++;
      return apiClient.createSwipeSession(data);
    }
  },
  // Recommendation methods
  recommendations: {
    generate: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[94]++;
      cov_vtt3zf6ox().s[190]++;
      return apiClient.generateRecommendations(data);
    },
    getRecommendations: params => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[95]++;
      cov_vtt3zf6ox().s[191]++;
      return apiClient.getRecommendations(params);
    },
    getRecommendation: id => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[96]++;
      cov_vtt3zf6ox().s[192]++;
      return apiClient.getRecommendation(id);
    },
    provideFeedback: (id, feedback) => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[97]++;
      cov_vtt3zf6ox().s[193]++;
      return apiClient.provideFeedback(id, feedback);
    },
    refresh: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[98]++;
      cov_vtt3zf6ox().s[194]++;
      return apiClient.refreshRecommendations();
    },
    // Alternative method name for compatibility with tests
    createRecommendationRequest: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[99]++;
      cov_vtt3zf6ox().s[195]++;
      return apiClient.generateRecommendations(data);
    }
  },
  // Gift Link methods
  giftLinks: {
    create: data => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[100]++;
      cov_vtt3zf6ox().s[196]++;
      return apiClient.createGiftLink(data);
    },
    getAll: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[101]++;
      cov_vtt3zf6ox().s[197]++;
      return apiClient.getGiftLinks();
    },
    getById: id => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[102]++;
      cov_vtt3zf6ox().s[198]++;
      return apiClient.getGiftLink(id);
    },
    getByToken: token => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[103]++;
      cov_vtt3zf6ox().s[199]++;
      return apiClient.getGiftLinkByToken(token);
    },
    delete: id => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[104]++;
      cov_vtt3zf6ox().s[200]++;
      return apiClient.deleteGiftLink(id);
    },
    getAnalytics: id => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[105]++;
      cov_vtt3zf6ox().s[201]++;
      return apiClient.getGiftLinkAnalytics(id);
    }
  },
  // Analytics methods
  analytics: {
    trackEvent: event => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[106]++;
      cov_vtt3zf6ox().s[202]++;
      return apiClient.trackEvent(event);
    },
    getDashboard: () => {
      /* istanbul ignore next */
      cov_vtt3zf6ox().f[107]++;
      cov_vtt3zf6ox().s[203]++;
      return apiClient.getAnalyticsDashboard();
    }
  },
  // Health check
  health: () => {
    /* istanbul ignore next */
    cov_vtt3zf6ox().f[108]++;
    cov_vtt3zf6ox().s[204]++;
    return apiClient.healthCheck();
  }
});
const _default =
/* istanbul ignore next */
(cov_vtt3zf6ox().s[205]++, apiClient);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,