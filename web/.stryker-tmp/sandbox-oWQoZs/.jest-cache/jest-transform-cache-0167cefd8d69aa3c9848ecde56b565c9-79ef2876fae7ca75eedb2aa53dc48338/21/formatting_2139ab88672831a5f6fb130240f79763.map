{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/utils/formatting.ts"],"sourcesContent":["/**\n * Formatting utilities for the aclue web application\n */\n\n/**\n * Format a price with currency symbol\n */\nexport function formatPrice(amount: number, currency: string): string {\n  const currencySymbol = formatCurrency(currency);\n  const formatted = new Intl.NumberFormat('en-GB', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(Math.abs(amount));\n\n  return amount < 0 ? `-${currencySymbol}${formatted}` : `${currencySymbol}${formatted}`;\n}\n\n/**\n * Get currency symbol for a given currency code\n */\nexport function formatCurrency(currency: string): string {\n  const currencyMap: { [key: string]: string } = {\n    USD: '$',\n    EUR: '€',\n    GBP: '£',\n    JPY: '¥',\n    CAD: 'C$',\n    AUD: 'A$',\n    CHF: 'CHF',\n    CNY: '¥',\n    SEK: 'kr',\n    NOK: 'kr',\n    DKK: 'kr',\n    PLN: 'zł',\n    CZK: 'Kč',\n    HUF: 'Ft',\n    RUB: '₽',\n    INR: '₹',\n    BRL: 'R$',\n    ZAR: 'R',\n    KRW: '₩',\n    SGD: 'S$',\n    HKD: 'HK$',\n    MXN: '$',\n    NZD: 'NZ$',\n  };\n\n  return currencyMap[currency.toUpperCase()] || currency.toUpperCase();\n}\n\n/**\n * Format a date for display with British format (DD/MM/YYYY)\n */\nexport function formatDate(date: Date | string): string {\n  const targetDate = typeof date === 'string' ? new Date(date) : date;\n  return targetDate.toLocaleDateString('en-GB');\n}\n\n/**\n * Format a date as relative time (e.g., \"2 hours ago\", \"in 3 days\")\n */\nexport function formatRelativeTime(date: Date | string): string {\n  const targetDate = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - targetDate.getTime()) / 1000);\n  const absDiff = Math.abs(diffInSeconds);\n\n  const intervals = [\n    { label: 'year', seconds: 31536000 },\n    { label: 'month', seconds: 2592000 },\n    { label: 'week', seconds: 604800 },\n    { label: 'day', seconds: 86400 },\n    { label: 'hour', seconds: 3600 },\n    { label: 'minute', seconds: 60 },\n    { label: 'second', seconds: 1 },\n  ];\n\n  for (const interval of intervals) {\n    const count = Math.floor(absDiff / interval.seconds);\n    if (count >= 1) {\n      const suffix = count === 1 ? '' : 's';\n      const timeUnit = `${count} ${interval.label}${suffix}`;\n      return diffInSeconds < 0 ? `in ${timeUnit}` : `${timeUnit} ago`;\n    }\n  }\n\n  return diffInSeconds < 0 ? 'in 1 second' : '1 second ago';\n}\n\n/**\n * Format a number with internationalization options\n */\nexport function formatNumber(\n  num: number,\n  options: Intl.NumberFormatOptions = {}\n): string {\n  const defaultOptions: Intl.NumberFormatOptions = {\n    notation: 'standard',\n    maximumFractionDigits: 0,\n    ...options,\n  };\n\n  return new Intl.NumberFormat('en-GB', defaultOptions).format(num);\n}\n\n/**\n * Format a percentage\n */\nexport function formatPercentage(value: number, decimals: number = 1): string {\n  return formatNumber(value, {\n    style: 'percent',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  });\n}\n\n/**\n * Format file size in human-readable format\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = 1;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Format a rating as stars (for display purposes)\n */\nexport function formatStars(rating: number, maxRating: number = 5): string {\n  const fullStars = Math.floor(rating);\n  const hasHalfStar = rating % 1 >= 0.5;\n  const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);\n\n  return (\n    '★'.repeat(fullStars) +\n    (hasHalfStar ? '☆' : '') +\n    '☆'.repeat(emptyStars)\n  );\n}\n\n/**\n * Truncate text to a specific length with ellipsis\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength - 3) + '...';\n}\n\n/**\n * Format a phone number\n */\nexport function formatPhoneNumber(phoneNumber: string): string {\n  // Remove all non-digit characters\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n\n  // Check if the number is a US number\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  } else if (cleaned.length === 11 && cleaned[0] === '1') {\n    return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;\n  }\n\n  // Return original if not a recognised format\n  return phoneNumber;\n}\n\n/**\n * Capitalize the first letter of each word\n */\nexport function formatTitleCase(text: string): string {\n  return text\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Format a URL to display without protocol\n */\nexport function formatDisplayUrl(url: string): string {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname + urlObj.pathname + urlObj.search;\n  } catch {\n    return url;\n  }\n}"],"names":["formatCurrency","formatDate","formatDisplayUrl","formatFileSize","formatNumber","formatPercentage","formatPhoneNumber","formatPrice","formatRelativeTime","formatStars","formatTitleCase","truncateText","amount","currency","currencySymbol","formatted","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","Math","abs","currencyMap","USD","EUR","GBP","JPY","CAD","AUD","CHF","CNY","SEK","NOK","DKK","PLN","CZK","HUF","RUB","INR","BRL","ZAR","KRW","SGD","HKD","MXN","NZD","toUpperCase","date","targetDate","Date","toLocaleDateString","now","diffInSeconds","floor","getTime","absDiff","intervals","label","seconds","interval","count","suffix","timeUnit","num","options","defaultOptions","notation","value","decimals","style","bytes","k","dm","sizes","i","log","parseFloat","pow","toFixed","rating","maxRating","fullStars","hasHalfStar","emptyStars","repeat","text","maxLength","length","slice","phoneNumber","cleaned","replace","toLowerCase","split","map","word","charAt","join","url","urlObj","URL","hostname","pathname","search"],"mappings":"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"}