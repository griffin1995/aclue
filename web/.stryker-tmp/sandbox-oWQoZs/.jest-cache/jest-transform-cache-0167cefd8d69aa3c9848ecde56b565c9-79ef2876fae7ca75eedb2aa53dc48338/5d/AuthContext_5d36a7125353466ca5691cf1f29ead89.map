{"version":3,"names":["cov_cg4vn9uzo","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","AuthProvider","default","_default","useAuth","useRequireAuth","initialState","user","isAuthenticated","isLoading","isInitialized","isLoggingOut","error","authReducer","state","action","payload","AuthContext","_react","createContext","children","dispatch","useReducer","router","_router","useRouter","useEffect","initializeAuth","token","_api","tokenManager","getAccessToken","storedUser","localStorage","getItem","_config","appConfig","storage","JSON","parse","parseError","console","warn","removeItem","response","api","getCurrentUser","userData","data","setItem","stringify","refreshToken","getRefreshToken","refreshTokenInternal","refreshError","logoutInternal","clearTokens","Object","values","forEach","key","Error","refreshAccessToken","refresh_token","access_token","newRefreshToken","setTokens","login","credentials","trackEvent","identifyUser","Promise","resolve","then","_interop_require_wildcard","require","id","email","first_name","last_name","subscription_tier","method","user_id","timestamp","Date","toISOString","trackingError","_reacthottoast","success","errorMessage","message","errors","unknown","register","created_at","marketing_consent","source","logout","analytics","reset","log","setTimeout","replace","clearError","updateUser","updatedUser","value","_jsxruntime","jsx","Provider","context","useContext","redirectTo","currentPath","asPath","redirectUrl","encodeURIComponent"],"sources":["/home/jack/Documents/aclue-preprod/web/src/context/AuthContext.tsx"],"sourcesContent":["/**\n * aclue Authentication Context\n * \n * Centralised authentication state management for the entire application.\n * Provides secure user session handling, JWT token management, and\n * authentication flows for login, registration, and logout.\n * \n * Key Features:\n *   - Automatic token refresh and session persistence\n *   - Protected route authentication guards\n *   - Real-time user state synchronisation\n *   - PostHog analytics integration for user events\n *   - Comprehensive error handling and user feedback\n * \n * State Management:\n *   - Uses useReducer for predictable state updates\n *   - Persists user data to localStorage for session continuity\n *   - Handles loading states during authentication operations\n * \n * Usage:\n *   // In _app.tsx\n *   <AuthProvider>\n *     <Component {...pageProps} />\n *   </AuthProvider>\n * \n *   // In components\n *   const { user, login, logout, isAuthenticated } = useAuth();\n */\n\nimport React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/router';\nimport { api, tokenManager } from '@/lib/api';\nimport { appConfig } from '@/config';\nimport { User, LoginRequest, RegisterRequest } from '@/types';\nimport toast from 'react-hot-toast';\n\n// ==============================================================================\n// TYPE DEFINITIONS\n// ==============================================================================\n\n/**\n * Authentication state interface defining the current auth status.\n * \n * Tracks user session, loading states, and error conditions to\n * provide comprehensive authentication state to the application.\n */\ninterface AuthState {\n  user: User | null;        // Current authenticated user (null if not logged in)\n  isAuthenticated: boolean; // Authentication status (true if user logged in)\n  isLoading: boolean;       // Loading state during auth operations\n  isInitialized: boolean;   // Whether auth state has been initialized from storage\n  isLoggingOut: boolean;    // Logout in progress flag\n  error: string | null;     // Current error message (null if no error)\n}\n\n/**\n * Authentication context interface providing auth methods and state.\n * \n * Extends AuthState with methods for authentication operations.\n * All methods are async and handle loading states automatically.\n */\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginRequest) => Promise<void>;      // Authenticate user with email/password\n  register: (userData: RegisterRequest) => Promise<void>;   // Create new user account\n  logout: () => Promise<void>;                              // End user session and clear tokens\n  refreshToken: () => Promise<void>;                        // Refresh expired access token\n  clearError: () => void;                                   // Clear current error state\n  updateUser: (userData: Partial<User>) => void;            // Update user profile data\n}\n\n/**\n * Authentication action types for state management.\n * \n * Defines all possible state changes that can occur during\n * authentication flows. Used with useReducer for predictable\n * state updates.\n */\ntype AuthAction =\n  | { type: 'SET_LOADING'; payload: boolean }           // Update loading state\n  | { type: 'SET_USER'; payload: User | null }          // Set authenticated user\n  | { type: 'SET_ERROR'; payload: string | null }       // Set error message\n  | { type: 'SET_INITIALIZED'; payload: boolean }       // Mark auth as initialized\n  | { type: 'SET_LOGGING_OUT'; payload: boolean }       // Set logout in progress\n  | { type: 'LOGOUT' }                                  // Clear user and reset state\n  | { type: 'UPDATE_USER'; payload: Partial<User> };    // Update user profile data\n\n/**\n * Initial authentication state on application load.\n * \n * Sets default values for all auth state properties.\n * isLoading starts as true to prevent flash of unauthenticated content.\n */\nconst initialState: AuthState = {\n  user: null,             // No user authenticated initially\n  isAuthenticated: false, // Not authenticated until proven otherwise\n  isLoading: true,        // Loading while checking stored tokens\n  isInitialized: false,   // Not initialized until storage check complete\n  isLoggingOut: false,    // No logout in progress\n  error: null,            // No error initially\n};\n\n// ==============================================================================\n// STATE REDUCER\n// ==============================================================================\n\n/**\n * Authentication state reducer for predictable state management.\n * \n * Handles all authentication state changes through well-defined actions.\n * Ensures immutable state updates and consistent state transitions.\n * \n * Parameters:\n *   state: Current authentication state\n *   action: Action to perform with optional payload\n * \n * Returns:\n *   AuthState: New state after applying action\n */\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n    \n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload,                    // Set user data\n        isAuthenticated: !!action.payload,       // Authenticated if user exists\n        isLoading: false,                        // No longer loading\n        error: null,                             // Clear any errors\n      };\n    \n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,                   // Set error message\n        isLoading: false,                        // Stop loading on error\n      };\n    \n    case 'SET_INITIALIZED':\n      return {\n        ...state,\n        isInitialized: action.payload,           // Mark as initialized\n        isLoading: !action.payload,              // Stop loading when initialized\n      };\n    \n    case 'SET_LOGGING_OUT':\n      return {\n        ...state,\n        isLoggingOut: action.payload,            // Set logout in progress flag\n      };\n    \n    case 'LOGOUT':\n      return {\n        ...initialState,                         // Reset to initial state\n        isInitialized: true,                     // Keep initialized flag\n        isLoading: false,                        // Not loading after logout\n        isLoggingOut: false,                     // Logout complete\n      };\n    \n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: state.user ? { ...state.user, ...action.payload } : null, // Merge user updates\n      };\n    \n    default:\n      return state;                              // No change for unknown actions\n  }\n};\n\n// ==============================================================================\n// CONTEXT CREATION\n// ==============================================================================\n\n/**\n * Authentication context for sharing auth state across the application.\n * \n * Created with undefined default to force proper provider usage.\n * Components must be wrapped in AuthProvider to access context.\n */\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// ==============================================================================\n// PROVIDER COMPONENT\n// ==============================================================================\n\n/**\n * Props for AuthProvider component.\n */\ninterface AuthProviderProps {\n  children: ReactNode; // Child components that need access to auth context\n}\n\n/**\n * Authentication Provider component.\n * \n * Provides authentication state and methods to all child components.\n * Handles session initialization, token refresh, and user state persistence.\n * \n * Initialization Flow:\n *   1. Check for stored tokens in localStorage\n *   2. Validate tokens with backend\n *   3. Restore user session or clear invalid tokens\n *   4. Mark authentication as initialized\n * \n * Props:\n *   children: React components that need auth context\n */\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  const router = useRouter();\n\n  // ===========================================================================\n  // AUTHENTICATION INITIALIZATION\n  // ===========================================================================\n  \n  /**\n   * Initialize authentication state on component mount.\n   * \n   * Runs once when the app loads to:\n   *   - Check for stored authentication tokens\n   *   - Restore user session from localStorage\n   *   - Verify tokens with backend\n   *   - Handle token refresh if needed\n   *   - Clear invalid sessions\n   */\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        dispatch({ type: 'SET_LOADING', payload: true });\n\n        // Check for stored access token\n        const token = tokenManager.getAccessToken();\n        \n        if (!token) {\n          // No token found - user not logged in\n          dispatch({ type: 'SET_INITIALIZED', payload: true });\n          return;\n        }\n\n        // Restore user data from localStorage for immediate UI update\n        const storedUser = localStorage.getItem(appConfig.storage.user);\n        \n        if (storedUser) {\n          try {\n            const user = JSON.parse(storedUser) as User;\n            dispatch({ type: 'SET_USER', payload: user });\n          } catch (parseError) {\n            console.warn('Invalid stored user data, clearing localStorage:', parseError);\n            // Clear corrupted data\n            localStorage.removeItem(appConfig.storage.user);\n          }\n        }\n\n        // Verify token with backend and get fresh user data\n        try {\n          const response = await api.getCurrentUser();\n          // Handle different response formats - sometimes data is wrapped, sometimes direct\n          const userData = response.data || response;\n          dispatch({ type: 'SET_USER', payload: userData });\n          \n          // Update stored user data with fresh backend data\n          localStorage.setItem(appConfig.storage.user, JSON.stringify(userData));\n        } catch (error: any) {\n          console.error('Token verification failed:', error);\n          \n          // Only try to refresh if we have a refresh token\n          const refreshToken = tokenManager.getRefreshToken();\n          if (refreshToken) {\n            try {\n              await refreshTokenInternal();\n            } catch (refreshError) {\n              console.error('Token refresh failed:', refreshError);\n              await logoutInternal();\n            }\n          } else {\n            console.warn('No refresh token available, clearing session');\n            await logoutInternal();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization failed:', error);\n        await logoutInternal();\n      } finally {\n        dispatch({ type: 'SET_INITIALIZED', payload: true });\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // ===========================================================================\n  // INTERNAL HELPER FUNCTIONS\n  // ===========================================================================\n  \n  /**\n   * Internal logout function for cleanup without API calls.\n   * \n   * Used during error recovery and session cleanup.\n   * Clears all stored data and resets auth state.\n   */\n  const logoutInternal = async () => {\n    try {\n      // Clear tokens from memory and localStorage\n      tokenManager.clearTokens();\n      \n      // Clear all stored authentication data\n      Object.values(appConfig.storage).forEach(key => {\n        localStorage.removeItem(key);\n      });\n      \n      // Reset auth state\n      dispatch({ type: 'LOGOUT' });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  /**\n   * Internal token refresh function for session renewal.\n   * \n   * Uses stored refresh token to obtain new access token.\n   * Updates stored tokens with new values.\n   */\n  const refreshTokenInternal = async () => {\n    const refreshToken = tokenManager.getRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    // Call refresh endpoint\n    const response = await api.refreshAccessToken({ refresh_token: refreshToken });\n    const { access_token, refresh_token: newRefreshToken } = response.data;\n    \n    // Store new tokens\n    tokenManager.setTokens(access_token, newRefreshToken);\n  };\n\n  // Login function\n  const login = async (credentials: LoginRequest) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'SET_ERROR', payload: null });\n\n      const response = await api.login(credentials);\n      const { access_token, refresh_token, user } = response.data;\n\n      // Store tokens\n      tokenManager.setTokens(access_token, refresh_token);\n\n      // Store user data\n      localStorage.setItem(appConfig.storage.user, JSON.stringify(user));\n\n      // Update state\n      dispatch({ type: 'SET_USER', payload: user });\n\n      // Track login event with PostHog\n      try {\n        const { trackEvent, identifyUser } = await import('@/lib/analytics');\n        \n        // Identify the user\n        identifyUser(user.id, {\n          email: user.email,\n          first_name: user.first_name,\n          last_name: user.last_name,\n          subscription_tier: user.subscription_tier,\n        });\n\n        // Track login event\n        trackEvent('user_login', {\n          method: 'email',\n          user_id: user.id,\n          timestamp: new Date().toISOString(),\n        });\n      } catch (trackingError) {\n        console.warn('Failed to track login event:', trackingError);\n      }\n\n      toast.success(appConfig.success.login);\n    } catch (error: any) {\n      console.error('Login error:', error);\n      const errorMessage = error.message || appConfig.errors.unknown;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      toast.error(errorMessage);\n      throw error;\n    }\n  };\n\n  // Register function\n  const register = async (userData: RegisterRequest) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'SET_ERROR', payload: null });\n\n      const response = await api.register(userData);\n      const { access_token, refresh_token, user } = response.data;\n\n      // Store tokens\n      tokenManager.setTokens(access_token, refresh_token);\n\n      // Store user data\n      localStorage.setItem(appConfig.storage.user, JSON.stringify(user));\n\n      // Update state\n      dispatch({ type: 'SET_USER', payload: user });\n\n      // Track registration event with PostHog\n      try {\n        const { trackEvent, identifyUser } = await import('@/lib/analytics');\n        \n        // Identify the user\n        identifyUser(user.id, {\n          email: user.email,\n          first_name: user.first_name,\n          last_name: user.last_name,\n          created_at: user.created_at,\n          subscription_tier: user.subscription_tier,\n        });\n\n        // Track registration event\n        trackEvent('user_register', {\n          method: 'email',\n          marketing_consent: userData.marketing_consent,\n          user_id: user.id,\n          source: 'web',\n          timestamp: new Date().toISOString(),\n        });\n      } catch (trackingError) {\n        console.warn('Failed to track registration event:', trackingError);\n      }\n\n      toast.success(appConfig.success.register);\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      const errorMessage = error.message || appConfig.errors.unknown;\n      dispatch({ type: 'SET_ERROR', payload: errorMessage });\n      toast.error(errorMessage);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      dispatch({ type: 'SET_LOGGING_OUT', payload: true });\n      dispatch({ type: 'SET_LOADING', payload: true });\n\n      // Call logout API\n      try {\n        await api.logout();\n      } catch (error) {\n        console.warn('Logout API call failed:', error);\n      }\n\n      // Track logout event with PostHog\n      if (state.user) {\n        try {\n          const { trackEvent, analytics } = await import('@/lib/analytics');\n          \n          trackEvent('user_logout', {\n            user_id: state.user.id,\n            timestamp: new Date().toISOString(),\n          });\n\n          // Reset PostHog user session\n          analytics.reset();\n        } catch (trackingError) {\n          console.warn('Failed to track logout event:', trackingError);\n        }\n      }\n\n      await logoutInternal();\n      \n      console.log('🚪 Logout completed, redirecting to homepage...');\n      toast.success(appConfig.success.logout);\n\n      // Small delay to ensure state update completes before redirect\n      setTimeout(() => {\n        console.log('🚪 Executing redirect to homepage');\n        router.replace('/');\n      }, 100);\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      // Force logout even if API call fails\n      await logoutInternal();\n      setTimeout(() => {\n        router.replace('/');\n      }, 100);\n    }\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      await refreshTokenInternal();\n    } catch (error: any) {\n      console.error('Token refresh failed:', error);\n      await logoutInternal();\n      throw error;\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({ type: 'SET_ERROR', payload: null });\n  };\n\n  // Update user function\n  const updateUser = (userData: Partial<User>) => {\n    if (state.user) {\n      const updatedUser = { ...state.user, ...userData };\n      localStorage.setItem(appConfig.storage.user, JSON.stringify(updatedUser));\n      dispatch({ type: 'UPDATE_USER', payload: userData });\n    }\n  };\n\n  const value: AuthContextType = {\n    ...state,\n    login,\n    register,\n    logout,\n    refreshToken,\n    clearError,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook to use auth context\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Hook for protected routes\nexport const useRequireAuth = (redirectTo: string = '/auth/login') => {\n  const { isAuthenticated, isInitialized } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (isInitialized && !isAuthenticated) {\n      const currentPath = router.asPath;\n      const redirectUrl = `${redirectTo}?redirect=${encodeURIComponent(currentPath)}`;\n      router.replace(redirectUrl);\n    }\n  }, [isAuthenticated, isInitialized, router, redirectTo]);\n\n  return { isAuthenticated, isInitialized };\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]}