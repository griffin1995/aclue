3f8f2ab60c96a8389e03a4dd9bbc2542
"use strict";
// Mock framer-motion
jest.mock("framer-motion", ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                })
        },
        useMotionValue: ()=>({
                set: jest.fn(),
                get: jest.fn()
            }),
        useTransform: ()=>({
                set: jest.fn(),
                get: jest.fn()
            }),
        useAnimation: ()=>({
                start: jest.fn(),
                stop: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _SwipeCard = require("../SwipeCard");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockProduct = {
    id: "1",
    name: "Test Product",
    description: "A test product description",
    price: 29.99,
    currency: "USD",
    imageUrl: "https://example.com/image.jpg",
    category: "Electronics",
    subcategory: "Gadgets",
    brand: "TestBrand",
    rating: 4.5,
    reviewCount: 100,
    availability: "in_stock",
    affiliateUrl: "https://example.com/affiliate",
    features: [
        "Feature 1",
        "Feature 2"
    ],
    tags: [
        "tag1",
        "tag2"
    ],
    priceHistory: [],
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z"
};
const mockOnSwipe = jest.fn();
const mockOnLike = jest.fn();
const mockOnPass = jest.fn();
describe("SwipeCard", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("renders product information correctly", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        expect(_react1.screen.getByText("Test Product")).toBeInTheDocument();
        expect(_react1.screen.getByText("A test product description")).toBeInTheDocument();
        expect(_react1.screen.getByText("$29.99")).toBeInTheDocument();
        expect(_react1.screen.getByText("TestBrand")).toBeInTheDocument();
        expect(_react1.screen.getByText("4.5")).toBeInTheDocument();
        expect(_react1.screen.getByText("(100 reviews)")).toBeInTheDocument();
    });
    it("displays product image with correct alt text", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        const image = _react1.screen.getByAltText("Test Product");
        expect(image).toBeInTheDocument();
        expect(image).toHaveAttribute("src", "https://example.com/image.jpg");
    });
    it("shows features list when product has features", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        expect(_react1.screen.getByText("Features:")).toBeInTheDocument();
        expect(_react1.screen.getByText("Feature 1")).toBeInTheDocument();
        expect(_react1.screen.getByText("Feature 2")).toBeInTheDocument();
    });
    it("renders like and pass buttons", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        const likeButton = _react1.screen.getByLabelText("Like this product");
        const passButton = _react1.screen.getByLabelText("Pass on this product");
        expect(likeButton).toBeInTheDocument();
        expect(passButton).toBeInTheDocument();
    });
    it("calls onLike when like button is clicked", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        const likeButton = _react1.screen.getByLabelText("Like this product");
        _react1.fireEvent.click(likeButton);
        expect(mockOnLike).toHaveBeenCalledWith(mockProduct);
    });
    it("calls onPass when pass button is clicked", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        const passButton = _react1.screen.getByLabelText("Pass on this product");
        _react1.fireEvent.click(passButton);
        expect(mockOnPass).toHaveBeenCalledWith(mockProduct);
    });
    it("handles keyboard interactions", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        const card = _react1.screen.getByRole("article");
        // Test right arrow key (like)
        _react1.fireEvent.keyDown(card, {
            key: "ArrowRight",
            code: "ArrowRight"
        });
        expect(mockOnLike).toHaveBeenCalledWith(mockProduct);
        // Test left arrow key (pass)
        _react1.fireEvent.keyDown(card, {
            key: "ArrowLeft",
            code: "ArrowLeft"
        });
        expect(mockOnPass).toHaveBeenCalledWith(mockProduct);
    });
    it("shows availability status correctly", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        expect(_react1.screen.getByText("In Stock")).toBeInTheDocument();
    });
    it("handles product without features gracefully", ()=>{
        const productWithoutFeatures = {
            ...mockProduct,
            features: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: productWithoutFeatures,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        expect(_react1.screen.queryByText("Features:")).not.toBeInTheDocument();
    });
    it("handles missing product image gracefully", ()=>{
        const productWithoutImage = {
            ...mockProduct,
            imageUrl: ""
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: productWithoutImage,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        // Should still render the product name
        expect(_react1.screen.getByText("Test Product")).toBeInTheDocument();
    });
    it("formats price correctly for different currencies", ()=>{
        const eurProduct = {
            ...mockProduct,
            price: 25.50,
            currency: "EUR"
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: eurProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        expect(_react1.screen.getByText("â‚¬25.50")).toBeInTheDocument();
    });
    it("shows correct rating stars", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SwipeCard.SwipeCard, {
            product: mockProduct,
            onSwipe: mockOnSwipe,
            onLike: mockOnLike,
            onPass: mockOnPass
        }));
        // Check for rating display (4.5 stars)
        const ratingElement = _react1.screen.getByText("4.5");
        expect(ratingElement).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,