c4a565a4df8b84e528fdc4f8f30c6811
/**
 * useAuth Hook Test Suite
 * 
 * Comprehensive tests for the authentication hook that manages user
 * authentication state, token handling, and authentication workflows.
 * 
 * Test Coverage:
 * - Authentication state management
 * - Login and logout functionality
 * - Token refresh and validation
 * - Error handling and recovery
 * - Local storage integration
 * - API integration with backend
 * 
 * Testing Strategy:
 * Hook testing with React Testing Library's renderHook utility,
 * focusing on state transitions, side effects, and integration
 * with authentication services.
 * 
 * Business Context:
 * Authentication is critical for user experience and security,
 * requiring robust testing of all authentication flows and edge cases.
 */ // ==============================================================================
// IMPORTS AND DEPENDENCIES
// ==============================================================================
"use strict";
// Mock API functions
jest.mock("@/lib/api", ()=>({
        login: jest.fn(),
        register: jest.fn(),
        refreshToken: jest.fn(),
        getCurrentUser: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useAuth = require("../useAuth");
const _api = /*#__PURE__*/ _interop_require_wildcard(require("../../lib/api"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock localStorage
const mockLocalStorage = (()=>{
    let store = {};
    return {
        getItem: jest.fn((key)=>store[key] || null),
        setItem: jest.fn((key, value)=>{
            store[key] = value;
        }),
        removeItem: jest.fn((key)=>{
            delete store[key];
        }),
        clear: jest.fn(()=>{
            store = {};
        })
    };
})();
Object.defineProperty(window, "localStorage", {
    value: mockLocalStorage
});
// ==============================================================================
// TEST UTILITIES
// ==============================================================================
// Mock user data
const mockUser = {
    id: "user-123",
    email: "test@aclue.app",
    firstName: "Test",
    lastName: "User",
    subscriptionTier: "free",
    createdAt: "2025-01-01T00:00:00Z",
    emailVerified: true
};
// Mock authentication response
const mockAuthResponse = {
    access_token: "mock-access-token",
    refresh_token: "mock-refresh-token",
    user: mockUser
};
// Mock login credentials
const mockCredentials = {
    email: "test@aclue.app",
    password: "testpassword123"
};
// Mock registration data
const mockRegistrationData = {
    email: "new@aclue.app",
    password: "newpassword123",
    firstName: "New",
    lastName: "User",
    marketingConsent: false
};
// ==============================================================================
// AUTHENTICATION HOOK TESTS
// ==============================================================================
describe("useAuth Hook", ()=>{
    // Clear mocks and storage before each test
    beforeEach(()=>{
        jest.clearAllMocks();
        mockLocalStorage.clear();
    });
    describe("Initial State", ()=>{
        /**
     * Test initial authentication state.
     * 
     * Validates that the hook initializes with proper default
     * state before any authentication operations.
     */ it("should initialize with default unauthenticated state", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            expect(result.current.user).toBeNull();
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.isLoading).toBe(false);
            expect(result.current.error).toBeNull();
            expect(result.current.tokens).toBeNull();
        });
        /**
     * Test automatic authentication restoration from storage.
     * 
     * Validates that valid tokens stored in localStorage
     * are automatically used to restore authentication state.
     */ it("should restore authentication from stored tokens", async ()=>{
            // Mock stored tokens
            mockLocalStorage.setItem("access_token", "stored-access-token");
            mockLocalStorage.setItem("refresh_token", "stored-refresh-token");
            // Mock successful user retrieval
            _api.getCurrentUser.mockResolvedValue(mockUser);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Should start loading
            expect(result.current.isLoading).toBe(true);
            // Wait for authentication restoration
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Verify authenticated state
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.user).toEqual(mockUser);
            expect(result.current.tokens).toEqual({
                accessToken: "stored-access-token",
                refreshToken: "stored-refresh-token"
            });
            // Verify API call
            expect(_api.getCurrentUser).toHaveBeenCalledWith("stored-access-token");
        });
        /**
     * Test handling of invalid stored tokens.
     * 
     * Validates that invalid or expired tokens are properly
     * cleared and the user remains unauthenticated.
     */ it("should handle invalid stored tokens gracefully", async ()=>{
            // Mock stored tokens
            mockLocalStorage.setItem("access_token", "invalid-token");
            mockLocalStorage.setItem("refresh_token", "invalid-refresh");
            // Mock API error for invalid token
            _api.getCurrentUser.mockRejectedValue(new Error("Invalid token"));
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Wait for token validation to fail
            await (0, _react.waitFor)(()=>{
                expect(result.current.isLoading).toBe(false);
            });
            // Verify tokens were cleared
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.user).toBeNull();
            expect(result.current.tokens).toBeNull();
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("access_token");
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("refresh_token");
        });
    });
    describe("Login Functionality", ()=>{
        /**
     * Test successful user login.
     * 
     * Validates that login credentials are properly processed,
     * tokens are stored, and authentication state is updated.
     */ it("should handle successful login", async ()=>{
            // Mock successful login response
            _api.login.mockResolvedValue(mockAuthResponse);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Perform login
            await (0, _react.act)(async ()=>{
                await result.current.login(mockCredentials);
            });
            // Verify authentication state
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.user).toEqual(mockUser);
            expect(result.current.tokens).toEqual({
                accessToken: "mock-access-token",
                refreshToken: "mock-refresh-token"
            });
            expect(result.current.error).toBeNull();
            // Verify tokens were stored
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("access_token", "mock-access-token");
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("refresh_token", "mock-refresh-token");
            // Verify API call
            expect(_api.login).toHaveBeenCalledWith(mockCredentials);
        });
        /**
     * Test login with invalid credentials.
     * 
     * Validates that login errors are properly handled with
     * appropriate error messages and state management.
     */ it("should handle login errors appropriately", async ()=>{
            const loginError = new Error("Invalid credentials");
            _api.login.mockRejectedValue(loginError);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Attempt login with invalid credentials
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.login({
                        email: "invalid@email.com",
                        password: "wrongpassword"
                    });
                } catch (error) {
                // Expected to throw
                }
            });
            // Verify error state
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.user).toBeNull();
            expect(result.current.error).toEqual(loginError);
            // Verify no tokens were stored
            expect(mockLocalStorage.setItem).not.toHaveBeenCalled();
        });
        /**
     * Test login loading state management.
     * 
     * Validates that loading states are properly managed
     * during asynchronous login operations.
     */ it("should manage loading state during login", async ()=>{
            let resolveLogin;
            const loginPromise = new Promise((resolve)=>{
                resolveLogin = resolve;
            });
            _api.login.mockImplementation(()=>loginPromise);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Start login
            (0, _react.act)(()=>{
                result.current.login(mockCredentials);
            });
            // Verify loading state
            expect(result.current.isLoading).toBe(true);
            // Resolve login
            await (0, _react.act)(async ()=>{
                resolveLogin(mockAuthResponse);
                await loginPromise;
            });
            // Verify loading completed
            expect(result.current.isLoading).toBe(false);
            expect(result.current.isAuthenticated).toBe(true);
        });
    });
    describe("Registration Functionality", ()=>{
        /**
     * Test successful user registration.
     * 
     * Validates that registration data is properly processed
     * and user is automatically authenticated after registration.
     */ it("should handle successful registration", async ()=>{
            const registrationResponse = {
                ...mockAuthResponse,
                user: {
                    ...mockUser,
                    email: mockRegistrationData.email,
                    firstName: mockRegistrationData.firstName,
                    lastName: mockRegistrationData.lastName
                }
            };
            _api.register.mockResolvedValue(registrationResponse);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Perform registration
            await (0, _react.act)(async ()=>{
                await result.current.register(mockRegistrationData);
            });
            // Verify authentication state
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.user?.email).toBe(mockRegistrationData.email);
            expect(result.current.user?.firstName).toBe(mockRegistrationData.firstName);
            expect(result.current.tokens).toEqual({
                accessToken: "mock-access-token",
                refreshToken: "mock-refresh-token"
            });
            // Verify API call
            expect(_api.register).toHaveBeenCalledWith(mockRegistrationData);
        });
        /**
     * Test registration validation errors.
     * 
     * Validates that registration validation errors are
     * properly handled and displayed to users.
     */ it("should handle registration validation errors", async ()=>{
            const validationError = new Error("Email already exists");
            _api.register.mockRejectedValue(validationError);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Attempt registration with existing email
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.register(mockRegistrationData);
                } catch (error) {
                // Expected to throw
                }
            });
            // Verify error state
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.error).toEqual(validationError);
        });
    });
    describe("Token Management", ()=>{
        /**
     * Test automatic token refresh functionality.
     * 
     * Validates that expired tokens are automatically refreshed
     * without requiring user re-authentication.
     */ it("should refresh tokens automatically", async ()=>{
            // Set up initial authenticated state
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            await (0, _react.act)(async ()=>{
                _api.login.mockResolvedValue(mockAuthResponse);
                await result.current.login(mockCredentials);
            });
            // Mock refresh response
            const refreshResponse = {
                access_token: "new-access-token",
                refresh_token: "new-refresh-token"
            };
            _api.refreshToken.mockResolvedValue(refreshResponse);
            // Trigger token refresh
            await (0, _react.act)(async ()=>{
                await result.current.refreshTokens();
            });
            // Verify tokens were updated
            expect(result.current.tokens).toEqual({
                accessToken: "new-access-token",
                refreshToken: "new-refresh-token"
            });
            // Verify new tokens were stored
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("access_token", "new-access-token");
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("refresh_token", "new-refresh-token");
        });
        /**
     * Test handling of refresh token failures.
     * 
     * Validates that when token refresh fails, user is
     * properly logged out and redirected to login.
     */ it("should handle refresh token failure by logging out", async ()=>{
            // Set up initial authenticated state
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            await (0, _react.act)(async ()=>{
                _api.login.mockResolvedValue(mockAuthResponse);
                await result.current.login(mockCredentials);
            });
            // Mock refresh failure
            _api.refreshToken.mockRejectedValue(new Error("Refresh token expired"));
            // Attempt token refresh
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.refreshTokens();
                } catch (error) {
                // Expected to fail
                }
            });
            // Verify user was logged out
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.user).toBeNull();
            expect(result.current.tokens).toBeNull();
            // Verify tokens were cleared
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("access_token");
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("refresh_token");
        });
    });
    describe("Logout Functionality", ()=>{
        /**
     * Test successful user logout.
     * 
     * Validates that logout clears all authentication state
     * and removes tokens from storage.
     */ it("should handle logout properly", async ()=>{
            // Set up initial authenticated state
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            await (0, _react.act)(async ()=>{
                _api.login.mockResolvedValue(mockAuthResponse);
                await result.current.login(mockCredentials);
            });
            // Verify initially authenticated
            expect(result.current.isAuthenticated).toBe(true);
            // Perform logout
            (0, _react.act)(()=>{
                result.current.logout();
            });
            // Verify authentication cleared
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.user).toBeNull();
            expect(result.current.tokens).toBeNull();
            expect(result.current.error).toBeNull();
            // Verify tokens were cleared from storage
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("access_token");
            expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("refresh_token");
        });
    });
    describe("Error Handling and Edge Cases", ()=>{
        /**
     * Test network error handling.
     * 
     * Validates that network errors during authentication
     * operations are properly handled and communicated.
     */ it("should handle network errors gracefully", async ()=>{
            const networkError = new Error("Network request failed");
            _api.login.mockRejectedValue(networkError);
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Attempt login with network error
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.login(mockCredentials);
                } catch (error) {
                // Expected to throw
                }
            });
            // Verify error is properly set
            expect(result.current.error).toEqual(networkError);
            expect(result.current.isAuthenticated).toBe(false);
        });
        /**
     * Test concurrent authentication operations.
     * 
     * Validates that concurrent authentication operations
     * are properly handled without state corruption.
     */ it("should handle concurrent authentication operations", async ()=>{
            _api.login.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve(mockAuthResponse), 100)));
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Start two concurrent login attempts
            const loginPromise1 = (0, _react.act)(async ()=>{
                await result.current.login(mockCredentials);
            });
            const loginPromise2 = (0, _react.act)(async ()=>{
                await result.current.login({
                    email: "other@example.com",
                    password: "otherpassword"
                });
            });
            // Wait for both to complete
            await Promise.all([
                loginPromise1,
                loginPromise2
            ]);
            // Verify final state is consistent
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.user).toEqual(mockUser);
        });
        /**
     * Test error recovery functionality.
     * 
     * Validates that users can recover from authentication
     * errors by clearing error state and retrying.
     */ it("should allow error recovery", async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // Cause an error
            _api.login.mockRejectedValue(new Error("Login failed"));
            await (0, _react.act)(async ()=>{
                try {
                    await result.current.login(mockCredentials);
                } catch (error) {
                // Expected to fail
                }
            });
            // Verify error state
            expect(result.current.error).toBeTruthy();
            // Clear error
            (0, _react.act)(()=>{
                result.current.clearError();
            });
            // Verify error cleared
            expect(result.current.error).toBeNull();
            // Successful retry
            _api.login.mockResolvedValue(mockAuthResponse);
            await (0, _react.act)(async ()=>{
                await result.current.login(mockCredentials);
            });
            // Verify successful authentication
            expect(result.current.isAuthenticated).toBe(true);
            expect(result.current.error).toBeNull();
        });
    });
    describe("Integration Tests", ()=>{
        /**
     * Test complete authentication flow.
     * 
     * Validates end-to-end authentication workflow including
     * registration, login, token refresh, and logout.
     */ it("should handle complete authentication workflow", async ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
            // 1. Registration
            const registrationResponse = {
                ...mockAuthResponse,
                user: {
                    ...mockUser,
                    email: mockRegistrationData.email,
                    firstName: mockRegistrationData.firstName
                }
            };
            _api.register.mockResolvedValue(registrationResponse);
            await (0, _react.act)(async ()=>{
                await result.current.register(mockRegistrationData);
            });
            expect(result.current.isAuthenticated).toBe(true);
            // 2. Logout
            (0, _react.act)(()=>{
                result.current.logout();
            });
            expect(result.current.isAuthenticated).toBe(false);
            // 3. Login
            _api.login.mockResolvedValue(mockAuthResponse);
            await (0, _react.act)(async ()=>{
                await result.current.login(mockCredentials);
            });
            expect(result.current.isAuthenticated).toBe(true);
            // 4. Token refresh
            const refreshResponse = {
                access_token: "refreshed-token",
                refresh_token: "refreshed-refresh"
            };
            _api.refreshToken.mockResolvedValue(refreshResponse);
            await (0, _react.act)(async ()=>{
                await result.current.refreshTokens();
            });
            expect(result.current.tokens?.accessToken).toBe("refreshed-token");
            // 5. Final logout
            (0, _react.act)(()=>{
                result.current.logout();
            });
            expect(result.current.isAuthenticated).toBe(false);
            expect(result.current.user).toBeNull();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,