7a5ec01d759e7310ced49d9e61237be1
/**
 * aclue API Client
 * 
 * Centralised HTTP client for all backend API communication.
 * Provides type-safe methods for authentication, data fetching,
 * and real-time interactions with the aclue backend.
 * 
 * Key Features:
 *   - Automatic JWT token management with refresh
 *   - Request/response interceptors for auth and error handling
 *   - Type-safe API methods with full TypeScript support
 *   - Automatic retry logic for failed requests
 *   - Comprehensive error handling and user feedback
 * 
 * Architecture:
 *   - TokenManager: Secure storage and management of JWT tokens
 *   - ApiClient: Main HTTP client with interceptors and methods
 *   - Convenience exports: Simplified API for common operations
 * 
 * Usage:
 *   import { api } from '@/lib/api';
 *   const user = await api.getCurrentUser();
 *   const products = await api.getProducts({ category: 'electronics' });
 */ // ==============================================================================
// IMPORTS AND DEPENDENCIES
// ==============================================================================
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    api: function() {
        return api;
    },
    apiClient: function() {
        return apiClient;
    },
    default: function() {
        return _default;
    },
    tokenManager: function() {
        return tokenManager;
    }
});
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _config = require("../config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ==============================================================================
// TOKEN MANAGEMENT
// ==============================================================================
// Singleton class for secure JWT token storage and management
/**
 * Secure JWT token manager with localStorage persistence.
 * 
 * Manages access and refresh tokens for API authentication:
 *   - Singleton pattern ensures consistent token state
 *   - Automatic localStorage synchronisation
 *   - Secure token cleanup on logout
 *   - Server-side rendering safe (checks for window)
 * 
 * Token Lifecycle:
 *   1. Tokens received from authentication endpoints
 *   2. Stored in localStorage and memory
 *   3. Access token used for API requests
 *   4. Refresh token used to renew expired access tokens
 *   5. Cleared on logout or authentication errors
 */ class TokenManager {
    /**
   * Get singleton TokenManager instance.
   * 
   * Creates new instance on first call and initialises tokens
   * from localStorage if available.
   * 
   * Returns:
   *   TokenManager: Singleton instance
   */ static getInstance() {
        if (!TokenManager.instance) {
            TokenManager.instance = new TokenManager();
            // Initialize tokens from localStorage on first creation
            TokenManager.instance.initializeFromStorage();
        }
        return TokenManager.instance;
    }
    /**
   * Initialise tokens from localStorage on browser load.
   * 
   * Safely checks for browser environment and loads previously
   * stored tokens into memory cache.
   * 
   * Note: Only runs in browser environment (SSR safe)
   */ initializeFromStorage() {
        if (typeof window !== "undefined") {
            this.accessToken = localStorage.getItem(_config.appConfig.storage.authToken);
            this.refreshToken = localStorage.getItem(_config.appConfig.storage.refreshToken);
        }
    }
    /**
   * Store new JWT tokens in memory and localStorage.
   * 
   * Updates both in-memory cache and persistent storage
   * for session continuity across browser reloads.
   * 
   * Parameters:
   *   accessToken: JWT access token for API requests
   *   refreshToken: JWT refresh token for session renewal
   */ setTokens(accessToken, refreshToken) {
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        // Persist to localStorage for session continuity
        if (typeof window !== "undefined") {
            localStorage.setItem(_config.appConfig.storage.authToken, accessToken);
            localStorage.setItem(_config.appConfig.storage.refreshToken, refreshToken);
        }
    }
    /**
   * Retrieve current access token for API requests.
   *
   * Checks memory cache first, then falls back to localStorage.
   * Returns null if no token is available.
   *
   * Returns:
   *   string | null: Current access token or null if not available
   */ getAccessToken() {
        // Return cached token if available
        if (this.accessToken) return this.accessToken;
        // Fallback to localStorage (handles page reloads)
        if (typeof window !== "undefined") {
            const token = localStorage.getItem(_config.appConfig.storage.authToken);
            return token || null; // Ensure we return null instead of undefined
        }
        return null;
    }
    /**
   * Retrieve current refresh token for session renewal.
   *
   * Checks memory cache first, then falls back to localStorage.
   * Returns null if no token is available.
   *
   * Returns:
   *   string | null: Current refresh token or null if not available
   */ getRefreshToken() {
        // Return cached token if available
        if (this.refreshToken) return this.refreshToken;
        // Fallback to localStorage (handles page reloads)
        if (typeof window !== "undefined") {
            const token = localStorage.getItem(_config.appConfig.storage.refreshToken);
            return token || null; // Ensure we return null instead of undefined
        }
        return null;
    }
    /**
   * Clear all stored tokens and user data.
   * 
   * Removes tokens from both memory and localStorage.
   * Called during logout or authentication errors.
   * 
   * Security:
   *   - Clears all authentication-related data
   *   - Prevents token reuse after logout
   *   - Ensures clean state for new authentication
   */ clearTokens() {
        // Clear memory cache
        this.accessToken = null;
        this.refreshToken = null;
        // Clear persistent storage
        if (typeof window !== "undefined") {
            localStorage.removeItem(_config.appConfig.storage.authToken);
            localStorage.removeItem(_config.appConfig.storage.refreshToken);
            localStorage.removeItem(_config.appConfig.storage.user);
        }
    }
    constructor(){
        this.accessToken = null // In-memory access token cache
        ;
        this.refreshToken = null // In-memory refresh token cache
        ;
    }
}
// ==============================================================================
// API CLIENT
// ==============================================================================
// Main HTTP client with authentication and error handling
/**
 * Comprehensive HTTP client for aclue API communication.
 * 
 * Features:
 *   - Automatic JWT token attachment to requests
 *   - Token refresh on 401 errors with request retry
 *   - Consistent error handling and user feedback
 *   - Request/response interceptors for common patterns
 *   - Type-safe methods for all API endpoints
 * 
 * Request Flow:
 *   1. Add Authorization header with current access token
 *   2. Send request to backend API
 *   3. Handle successful response or error
 *   4. On 401 error: refresh token and retry original request
 *   5. On refresh failure: clear tokens and redirect to login
 */ class ApiClient {
    /**
   * Initialise API client with configuration and interceptors.
   * 
   * Sets up:
   *   - Base URL from configuration
   *   - Request/response timeouts
   *   - Default headers
   *   - Authentication and error interceptors
   */ constructor(){
        this.isRefreshing = false // Flag to prevent concurrent refresh attempts
        ;
        this.failedQueue = [];
        this.tokenManager = TokenManager.getInstance();
        // Create axios instance with base configuration
        this.client = _axios.default.create({
            baseURL: _config.config.apiUrl,
            timeout: 30000,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        });
        // Set up request/response interceptors
        this.setupInterceptors();
    }
    /**
   * Set up request and response interceptors for authentication and error handling.
   * 
   * Request Interceptor:
   *   - Automatically adds Authorization header with current access token
   *   - Ensures all API requests are authenticated
   * 
   * Response Interceptor:
   *   - Handles 401 errors with automatic token refresh
   *   - Queues failed requests during refresh process
   *   - Retries original requests after successful refresh
   *   - Redirects to login on refresh failure
   */ setupInterceptors() {
        // ===========================================================================
        // REQUEST INTERCEPTOR: Add authentication token to all requests
        // ===========================================================================
        this.client.interceptors.request.use((config)=>{
            const token = this.tokenManager.getAccessToken();
            if (token && config.headers) {
                // Add Bearer token to Authorization header
                config.headers.Authorization = `Bearer ${token}`;
            }
            return config;
        }, (error)=>Promise.reject(error));
        // ===========================================================================
        // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh
        // ===========================================================================
        this.client.interceptors.response.use((response)=>response, async (error)=>{
            const originalRequest = error.config;
            // Handle 401 Unauthorized errors with automatic token refresh
            if (error.response?.status === 401 && !originalRequest._retry) {
                // If already refreshing, queue this request
                if (this.isRefreshing) {
                    return new Promise((resolve, reject)=>{
                        this.failedQueue.push({
                            resolve,
                            reject
                        });
                    }).then((token)=>{
                        // Retry with new token
                        originalRequest.headers.Authorization = `Bearer ${token}`;
                        return this.client(originalRequest);
                    }).catch((err)=>{
                        return Promise.reject(err);
                    });
                }
                // Mark request as retry to prevent infinite loops
                originalRequest._retry = true;
                this.isRefreshing = true;
                try {
                    // Attempt to refresh the access token
                    const refreshToken = this.tokenManager.getRefreshToken();
                    if (!refreshToken) {
                        throw new Error("No refresh token available");
                    }
                    // Call refresh endpoint
                    const response = await this.refreshAccessToken({
                        refresh_token: refreshToken
                    });
                    const { access_token, refresh_token: newRefreshToken } = response.data;
                    // Store new tokens
                    this.tokenManager.setTokens(access_token, newRefreshToken);
                    // Process queued requests with new token
                    this.processQueue(access_token, null);
                    // Retry original request with new token
                    originalRequest.headers.Authorization = `Bearer ${access_token}`;
                    return this.client(originalRequest);
                } catch (refreshError) {
                    // Refresh failed - clear tokens and redirect to login
                    this.processQueue(null, refreshError);
                    this.tokenManager.clearTokens();
                    // Redirect to login if we're in the browser
                    if (typeof window !== "undefined") {
                        window.location.href = "/auth/login";
                    }
                    return Promise.reject(refreshError);
                } finally{
                    this.isRefreshing = false;
                }
            }
            // Handle other errors with consistent error formatting
            return Promise.reject(this.handleError(error));
        });
    }
    /**
   * Process queued requests after token refresh attempt.
   * 
   * During token refresh, multiple requests may fail with 401 errors.
   * These requests are queued and processed once refresh completes.
   * 
   * Parameters:
   *   token: New access token (null if refresh failed)
   *   error: Refresh error (null if refresh succeeded)
   */ processQueue(token, error) {
        this.failedQueue.forEach(({ resolve, reject })=>{
            if (error) {
                // Refresh failed - reject all queued requests
                reject(error);
            } else {
                // Refresh succeeded - resolve with new token
                resolve(token);
            }
        });
        // Clear the queue
        this.failedQueue = [];
    }
    /**
   * Convert axios errors to standardised ApiError format.
   * 
   * Provides consistent error handling across all API methods
   * with user-friendly messages and debugging information.
   * 
   * Error Types:
   *   - Response errors: Server returned error status (400, 500, etc.)
   *   - Network errors: Request failed to reach server
   *   - Request errors: Invalid request configuration
   * 
   * Parameters:
   *   error: Axios error object
   * 
   * Returns:
   *   ApiError: Standardised error with message, code, and details
   */ handleError(error) {
        const apiError = {
            message: _config.appConfig.errors.unknown,
            code: "UNKNOWN_ERROR",
            status: 500,
            timestamp: new Date().toISOString()
        };
        if (error.response) {
            // Server responded with error status (4xx, 5xx)
            apiError.status = error.response.status;
            apiError.message = error.response.data?.message || this.getErrorMessageByStatus(error.response.status);
            apiError.code = error.response.data?.code || `HTTP_${error.response.status}`;
            apiError.details = error.response.data?.details;
        } else if (error.request) {
            // Network error - request made but no response received
            apiError.message = _config.appConfig.errors.network;
            apiError.code = "NETWORK_ERROR";
            apiError.status = 0;
        } else {
            // Request setup error - something wrong with request configuration
            apiError.message = error.message || _config.appConfig.errors.unknown;
            apiError.code = "REQUEST_ERROR";
        }
        return apiError;
    }
    /**
   * Get user-friendly error message for HTTP status codes.
   * 
   * Maps common HTTP status codes to localised error messages
   * from application configuration.
   * 
   * Parameters:
   *   status: HTTP status code
   * 
   * Returns:
   *   string: User-friendly error message
   */ getErrorMessageByStatus(status) {
        switch(status){
            case 400:
                return _config.appConfig.errors.validation; // "Please check your input and try again"
            case 401:
                return _config.appConfig.errors.unauthorized; // "Please log in to continue"
            case 403:
                return _config.appConfig.errors.forbidden; // "You don't have permission to do this"
            case 404:
                return _config.appConfig.errors.notFound; // "The requested item was not found"
            case 500:
                return _config.appConfig.errors.server; // "Something went wrong on our end"
            default:
                return _config.appConfig.errors.unknown; // "An unexpected error occurred"
        }
    }
    // Generic request methods
    async get(url, config) {
        const response = await this.client.get(url, config);
        // Handle direct response from backend (not wrapped in ApiResponse)
        if (response.data && !response.data.hasOwnProperty("data")) {
            return {
                data: response.data,
                success: true
            };
        }
        return response.data;
    }
    async post(url, data, config) {
        const response = await this.client.post(url, data, config);
        // Handle direct response from backend (not wrapped in ApiResponse)
        if (response.data && !response.data.hasOwnProperty("data")) {
            return {
                data: response.data,
                success: true
            };
        }
        return response.data;
    }
    async put(url, data, config) {
        const response = await this.client.put(url, data, config);
        return response.data;
    }
    async patch(url, data, config) {
        const response = await this.client.patch(url, data, config);
        return response.data;
    }
    async delete(url, config) {
        const response = await this.client.delete(url, config);
        return response.data;
    }
    // Authentication methods
    async login(data) {
        return this.post(_config.endpoints.auth.login, data);
    }
    async register(data) {
        return this.post(_config.endpoints.auth.register, data);
    }
    async refreshAccessToken(data) {
        return this.post(_config.endpoints.auth.refresh, data);
    }
    async logout() {
        const response = await this.post(_config.endpoints.auth.logout);
        this.tokenManager.clearTokens();
        return response;
    }
    async getCurrentUser() {
        return this.get(_config.endpoints.auth.me);
    }
    async forgotPassword(email) {
        return this.post(_config.endpoints.auth.forgotPassword, {
            email
        });
    }
    async resetPassword(token, password) {
        return this.post(_config.endpoints.auth.resetPassword, {
            token,
            password
        });
    }
    async verifyEmail(token) {
        return this.post(_config.endpoints.auth.verifyEmail, {
            token
        });
    }
    // User methods
    async updateProfile(data) {
        return this.put(_config.endpoints.users.updateProfile, data);
    }
    async getUserPreferences() {
        return this.get(_config.endpoints.users.preferences);
    }
    async updateUserPreferences(data) {
        return this.put(_config.endpoints.users.preferences, data);
    }
    async getUserStatistics() {
        return this.get(_config.endpoints.users.statistics);
    }
    async deleteAccount() {
        return this.delete(_config.endpoints.users.deleteAccount);
    }
    // Product methods
    async getProducts(params) {
        return this.get(_config.endpoints.products.list, {
            params
        });
    }
    async searchProducts(query) {
        return this.post(_config.endpoints.products.search, query);
    }
    async getProduct(id) {
        return this.get(_config.endpoints.products.byId(id));
    }
    async getCategories() {
        return this.get(_config.endpoints.products.categories);
    }
    async getFeaturedProducts() {
        return this.get(_config.endpoints.products.featured);
    }
    async getTrendingProducts() {
        return this.get(_config.endpoints.products.trending);
    }
    async getProductsByCategory(categoryId, params) {
        return this.get(_config.endpoints.products.byCategory(categoryId), {
            params
        });
    }
    // Swipe methods
    async createSwipeSession(data) {
        return this.post(_config.endpoints.swipes.createSession, data);
    }
    async getCurrentSwipeSession() {
        return this.get(_config.endpoints.swipes.currentSession);
    }
    async recordSwipe(sessionId, data) {
        return this.post(_config.endpoints.swipes.interactions(sessionId), data);
    }
    async getSwipeAnalytics() {
        return this.get(_config.endpoints.swipes.analytics);
    }
    // Recommendation methods
    async generateRecommendations(data) {
        return this.post(_config.endpoints.recommendations.generate, data);
    }
    async getRecommendations(params) {
        return this.get(_config.endpoints.recommendations.list, {
            params
        });
    }
    async getRecommendation(id) {
        return this.get(_config.endpoints.recommendations.byId(id));
    }
    async provideFeedback(id, feedback) {
        return this.post(_config.endpoints.recommendations.feedback(id), feedback);
    }
    async refreshRecommendations() {
        return this.post(_config.endpoints.recommendations.refresh);
    }
    // Gift Link methods
    async createGiftLink(data) {
        return this.post(_config.endpoints.giftLinks.create, data);
    }
    async getGiftLinks() {
        return this.get(_config.endpoints.giftLinks.list);
    }
    async getGiftLink(id) {
        return this.get(_config.endpoints.giftLinks.byId(id));
    }
    async getGiftLinkByToken(token) {
        return this.get(_config.endpoints.giftLinks.byToken(token));
    }
    async deleteGiftLink(id) {
        return this.delete(_config.endpoints.giftLinks.delete(id));
    }
    async getGiftLinkAnalytics(id) {
        return this.get(_config.endpoints.giftLinks.analytics(id));
    }
    // Analytics methods
    async trackEvent(event) {
        return this.post(_config.endpoints.analytics.track, event);
    }
    async getAnalyticsDashboard() {
        return this.get(_config.endpoints.analytics.dashboard);
    }
    // Health check
    async healthCheck() {
        return this.get(_config.endpoints.health);
    }
}
const apiClient = new ApiClient();
const tokenManager = TokenManager.getInstance();
const api = {
    // Authentication methods
    auth: {
        login: (data)=>apiClient.login(data),
        register: (data)=>apiClient.register(data),
        logout: ()=>apiClient.logout(),
        getCurrentUser: ()=>apiClient.getCurrentUser(),
        forgotPassword: (email)=>apiClient.forgotPassword(email),
        resetPassword: (token, password)=>apiClient.resetPassword(token, password),
        verifyEmail: (token)=>apiClient.verifyEmail(token)
    },
    // User management methods
    users: {
        updateProfile: (data)=>apiClient.updateProfile(data),
        getPreferences: ()=>apiClient.getUserPreferences(),
        updatePreferences: (data)=>apiClient.updateUserPreferences(data),
        getStatistics: ()=>apiClient.getUserStatistics(),
        deleteAccount: ()=>apiClient.deleteAccount()
    },
    // Product methods
    products: {
        getProducts: (params)=>apiClient.getProducts(params),
        searchProducts: (query)=>apiClient.searchProducts(query),
        getProduct: (id)=>apiClient.getProduct(id),
        getCategories: ()=>apiClient.getCategories(),
        getFeatured: ()=>apiClient.getFeaturedProducts(),
        getTrending: ()=>apiClient.getTrendingProducts(),
        getByCategory: (categoryId, params)=>apiClient.getProductsByCategory(categoryId, params)
    },
    // Swipe methods
    swipes: {
        createSession: (data)=>apiClient.createSwipeSession(data),
        getCurrentSession: ()=>apiClient.getCurrentSwipeSession(),
        recordSwipe: (sessionId, data)=>apiClient.recordSwipe(sessionId, data),
        getAnalytics: ()=>apiClient.getSwipeAnalytics(),
        // Alternative method names for backward compatibility
        startSession: (data)=>apiClient.createSwipeSession(data)
    },
    // Recommendation methods
    recommendations: {
        generate: (data)=>apiClient.generateRecommendations(data),
        getRecommendations: (params)=>apiClient.getRecommendations(params),
        getRecommendation: (id)=>apiClient.getRecommendation(id),
        provideFeedback: (id, feedback)=>apiClient.provideFeedback(id, feedback),
        refresh: ()=>apiClient.refreshRecommendations(),
        // Alternative method name for compatibility with tests
        createRecommendationRequest: (data)=>apiClient.generateRecommendations(data)
    },
    // Gift Link methods
    giftLinks: {
        create: (data)=>apiClient.createGiftLink(data),
        getAll: ()=>apiClient.getGiftLinks(),
        getById: (id)=>apiClient.getGiftLink(id),
        getByToken: (token)=>apiClient.getGiftLinkByToken(token),
        delete: (id)=>apiClient.deleteGiftLink(id),
        getAnalytics: (id)=>apiClient.getGiftLinkAnalytics(id)
    },
    // Analytics methods
    analytics: {
        trackEvent: (event)=>apiClient.trackEvent(event),
        getDashboard: ()=>apiClient.getAnalyticsDashboard()
    },
    // Health check
    health: ()=>apiClient.healthCheck()
};
const _default = apiClient;

//# sourceMappingURL=data:application/json;base64,