{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/hooks/__tests__/useDarkMode.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { useDarkMode } from '../useDarkMode';\n\n// Mock localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nObject.defineProperty(window, 'localStorage', {\n  value: mockLocalStorage,\n});\n\n// Mock matchMedia\nconst mockMatchMedia = jest.fn();\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: mockMatchMedia,\n});\n\n// Mock document.documentElement\nconst mockDocumentElement = {\n  classList: {\n    add: jest.fn(),\n    remove: jest.fn(),\n  },\n};\nObject.defineProperty(document, 'documentElement', {\n  value: mockDocumentElement,\n});\n\ndescribe('useDarkMode', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockLocalStorage.getItem.mockReturnValue(null);\n    \n    // Default matchMedia mock\n    mockMatchMedia.mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    }));\n  });\n\n  describe('Initial State', () => {\n    it('initializes with system theme by default', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.theme).toBe('system');\n      expect(result.current.isDark).toBe(false);\n    });\n\n    it('loads saved theme from localStorage', () => {\n      mockLocalStorage.getItem.mockReturnValue('dark');\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.theme).toBe('dark');\n      expect(result.current.isDark).toBe(true);\n    });\n\n    it('ignores invalid theme values from localStorage', () => {\n      mockLocalStorage.getItem.mockReturnValue('invalid-theme');\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.theme).toBe('system');\n    });\n  });\n\n  describe('Theme Setting', () => {\n    it('sets light theme correctly', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('light');\n      });\n\n      expect(result.current.theme).toBe('light');\n      expect(result.current.isDark).toBe(false);\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('aclue_theme', 'light');\n      expect(mockDocumentElement.classList.remove).toHaveBeenCalledWith('dark');\n    });\n\n    it('sets dark theme correctly', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('dark');\n      });\n\n      expect(result.current.theme).toBe('dark');\n      expect(result.current.isDark).toBe(true);\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('aclue_theme', 'dark');\n      expect(mockDocumentElement.classList.add).toHaveBeenCalledWith('dark');\n    });\n\n    it('sets system theme correctly', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('system');\n      });\n\n      expect(result.current.theme).toBe('system');\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('aclue_theme', 'system');\n    });\n  });\n\n  describe('System Theme Detection', () => {\n    it('detects dark system preference', () => {\n      mockMatchMedia.mockImplementation((query) => ({\n        matches: query === '(prefers-color-scheme: dark)',\n        media: query,\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.isDark).toBe(true);\n      expect(mockDocumentElement.classList.add).toHaveBeenCalledWith('dark');\n    });\n\n    it('detects light system preference', () => {\n      mockMatchMedia.mockImplementation((query) => ({\n        matches: false,\n        media: query,\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.isDark).toBe(false);\n      expect(mockDocumentElement.classList.remove).toHaveBeenCalledWith('dark');\n    });\n\n    it('listens for system theme changes', () => {\n      const mockAddEventListener = jest.fn();\n      const mockRemoveEventListener = jest.fn();\n\n      mockMatchMedia.mockImplementation(() => ({\n        matches: false,\n        media: '(prefers-color-scheme: dark)',\n        addEventListener: mockAddEventListener,\n        removeEventListener: mockRemoveEventListener,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { unmount } = renderHook(() => useDarkMode());\n\n      expect(mockAddEventListener).toHaveBeenCalledWith('change', expect.any(Function));\n\n      unmount();\n\n      expect(mockRemoveEventListener).toHaveBeenCalledWith('change', expect.any(Function));\n    });\n\n    it('updates theme when system preference changes', () => {\n      let changeHandler: ((event: any) => void) | undefined;\n\n      mockMatchMedia.mockImplementation(() => ({\n        matches: false,\n        media: '(prefers-color-scheme: dark)',\n        addEventListener: jest.fn((event, handler) => {\n          if (event === 'change') {\n            changeHandler = handler;\n          }\n        }),\n        removeEventListener: jest.fn(),\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.isDark).toBe(false);\n\n      // Simulate system theme change to dark\n      act(() => {\n        if (changeHandler) {\n          changeHandler({ matches: true });\n        }\n      });\n\n      expect(result.current.isDark).toBe(true);\n    });\n\n    it('ignores system changes when not on system theme', () => {\n      let changeHandler: ((event: any) => void) | undefined;\n\n      mockMatchMedia.mockImplementation(() => ({\n        matches: false,\n        media: '(prefers-color-scheme: dark)',\n        addEventListener: jest.fn((event, handler) => {\n          if (event === 'change') {\n            changeHandler = handler;\n          }\n        }),\n        removeEventListener: jest.fn(),\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { result } = renderHook(() => useDarkMode());\n\n      // Set to manual dark mode\n      act(() => {\n        result.current.setTheme('dark');\n      });\n\n      expect(result.current.isDark).toBe(true);\n\n      // Simulate system theme change - should be ignored\n      act(() => {\n        if (changeHandler) {\n          changeHandler({ matches: false });\n        }\n      });\n\n      expect(result.current.isDark).toBe(true); // Should remain dark\n    });\n  });\n\n  describe('Theme Toggle', () => {\n    it('toggles from light to dark', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('light');\n      });\n\n      act(() => {\n        result.current.toggleTheme();\n      });\n\n      expect(result.current.theme).toBe('dark');\n      expect(result.current.isDark).toBe(true);\n    });\n\n    it('toggles from dark to light', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('dark');\n      });\n\n      act(() => {\n        result.current.toggleTheme();\n      });\n\n      expect(result.current.theme).toBe('light');\n      expect(result.current.isDark).toBe(false);\n    });\n\n    it('toggles from system to opposite of current state', () => {\n      // Mock system as light\n      mockMatchMedia.mockImplementation((query) => ({\n        matches: false,\n        media: query,\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.theme).toBe('system');\n      expect(result.current.isDark).toBe(false);\n\n      act(() => {\n        result.current.toggleTheme();\n      });\n\n      expect(result.current.theme).toBe('dark');\n      expect(result.current.isDark).toBe(true);\n    });\n\n    it('toggles from system dark to light', () => {\n      // Mock system as dark\n      mockMatchMedia.mockImplementation((query) => ({\n        matches: query === '(prefers-color-scheme: dark)',\n        media: query,\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      }));\n\n      const { result } = renderHook(() => useDarkMode());\n\n      expect(result.current.theme).toBe('system');\n      expect(result.current.isDark).toBe(true);\n\n      act(() => {\n        result.current.toggleTheme();\n      });\n\n      expect(result.current.theme).toBe('light');\n      expect(result.current.isDark).toBe(false);\n    });\n  });\n\n  describe('DOM Updates', () => {\n    it('adds dark class when dark mode is enabled', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('dark');\n      });\n\n      expect(mockDocumentElement.classList.add).toHaveBeenCalledWith('dark');\n    });\n\n    it('removes dark class when dark mode is disabled', () => {\n      const { result } = renderHook(() => useDarkMode());\n\n      act(() => {\n        result.current.setTheme('light');\n      });\n\n      expect(mockDocumentElement.classList.remove).toHaveBeenCalledWith('dark');\n    });\n  });\n\n  describe('Server-Side Rendering', () => {\n    it('handles missing window object gracefully', () => {\n      const originalWindow = global.window;\n      // @ts-ignore\n      delete global.window;\n\n      expect(() => {\n        renderHook(() => useDarkMode());\n      }).not.toThrow();\n\n      global.window = originalWindow;\n    });\n  });\n});"],"names":["mockLocalStorage","getItem","jest","fn","setItem","removeItem","clear","Object","defineProperty","window","value","mockMatchMedia","writable","mockDocumentElement","classList","add","remove","document","describe","beforeEach","clearAllMocks","mockReturnValue","mockImplementation","query","matches","media","addEventListener","removeEventListener","onchange","addListener","removeListener","dispatchEvent","it","result","renderHook","useDarkMode","expect","current","theme","toBe","isDark","act","setTheme","toHaveBeenCalledWith","mockAddEventListener","mockRemoveEventListener","unmount","any","Function","changeHandler","event","handler","toggleTheme","originalWindow","global","not","toThrow"],"mappings":"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"}