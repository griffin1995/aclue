{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/components/auth/AuthGuard.tsx"],"sourcesContent":["/**\n * aclue Authentication Guard Component\n * \n * Provides route-level authentication and authorization for the aclue application.\n * Handles protected routes, authentication redirects, and loading states during\n * authentication checks. Ensures secure access to user-specific features.\n * \n * Key Features:\n *   - Automatic authentication checking on route changes\n *   - Protected route enforcement with redirect logic\n *   - Public route access for unauthenticated users\n *   - Authentication route handling (prevent double login)\n *   - Loading states during authentication verification\n *   - JWT token validation and refresh\n * \n * Security Features:\n *   - Server-side authentication validation\n *   - Secure token storage and management\n *   - Session timeout handling\n *   - Unauthorized access prevention\n *   - Seamless login/logout flow\n * \n * Route Categories:\n *   - Protected: Require valid authentication\n *   - Auth: Login/register pages (redirect if logged in)\n *   - Public: Accessible without authentication\n * \n * Usage:\n *   <AuthGuard>\n *     <YourProtectedComponent />\n *   </AuthGuard>\n * \n * Integration:\n *   - Works with AuthContext for global auth state\n *   - Uses Next.js router for navigation\n *   - Coordinates with PageLoader for UX\n */\n\nimport React, { ReactNode, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useAuth } from '@/context/AuthContext';\nimport { PageLoader } from '@/components/ui/PageLoader';\n\n/**\n * Props interface for AuthGuard component.\n * \n * @param children - React components to render if authentication check passes\n */\ninterface AuthGuardProps {\n  children: ReactNode;\n}\n\n// Routes that require authentication\nconst PROTECTED_ROUTES = [\n  '/dashboard',\n  '/profile',\n  '/settings',\n  '/recommendations',\n  '/gift-links',\n  '/onboarding',\n];\n\n// Routes that should redirect authenticated users\nconst AUTH_ROUTES = [\n  '/auth/login',\n  '/auth/register',\n  '/auth/forgot-password',\n  '/auth/reset-password',\n];\n\n// Public routes that don't require any auth logic\n// const PUBLIC_ROUTES = [\n//   '/',\n//   '/about',\n//   '/contact',\n//   '/privacy',\n//   '/terms',\n//   '/pricing',\n//   '/404',\n// ];\n\nexport const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {\n  const { isAuthenticated, isInitialized, isLoading, isLoggingOut } = useAuth();\n  const router = useRouter();\n  const currentPath = router.asPath?.split('?')[0] || '/'; // Remove query params\n\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Don't redirect during logout process\n    if (isLoggingOut) return;\n\n    const isProtectedRoute = PROTECTED_ROUTES.some(route => \n      currentPath.startsWith(route)\n    );\n    const isAuthRoute = AUTH_ROUTES.some(route => \n      currentPath.startsWith(route)\n    );\n\n    // Redirect unauthenticated users from protected routes\n    if (isProtectedRoute && !isAuthenticated) {\n      const redirectUrl = `/auth/login?redirect=${encodeURIComponent(currentPath)}`;\n      router.replace(redirectUrl);\n      return;\n    }\n\n    // Redirect authenticated users from auth routes\n    if (isAuthRoute && isAuthenticated) {\n      const redirectTo = router.query['redirect'] as string || '/dashboard';\n      router.replace(redirectTo);\n      return;\n    }\n  }, [isAuthenticated, isInitialized, isLoggingOut, currentPath, router]);\n\n  // Show loading state while initializing or during redirects\n  if (!isInitialized || isLoading) {\n    return <PageLoader text=\"Loading aclue...\" />;\n  }\n\n  // Show loading for protected routes while unauthenticated (redirect happening)\n  const isProtectedRoute = PROTECTED_ROUTES.some(route => \n    currentPath.startsWith(route)\n  );\n  if (isProtectedRoute && !isAuthenticated) {\n    return <PageLoader text=\"Redirecting to login...\" />;\n  }\n\n  // Show loading for auth routes while authenticated (redirect happening)\n  const isAuthRoute = AUTH_ROUTES.some(route => \n    currentPath.startsWith(route)\n  );\n  if (isAuthRoute && isAuthenticated) {\n    return <PageLoader text=\"Redirecting to dashboard...\" />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default AuthGuard;"],"names":["AuthGuard","PROTECTED_ROUTES","AUTH_ROUTES","children","isAuthenticated","isInitialized","isLoading","isLoggingOut","useAuth","router","useRouter","currentPath","asPath","split","useEffect","isProtectedRoute","some","route","startsWith","isAuthRoute","redirectUrl","encodeURIComponent","replace","redirectTo","query","PageLoader","text"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCC;;;;;;;;;;;IA6CYA,SAAS;eAATA;;IAyDb,OAAyB;eAAzB;;;;+DApG4C;wBAClB;6BACF;4BACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAW3B,qCAAqC;AACrC,MAAMC,mBAAmB;IACvB;IACA;IACA;IACA;IACA;IACA;CACD;AAED,kDAAkD;AAClD,MAAMC,cAAc;IAClB;IACA;IACA;IACA;CACD;AAaM,MAAMF,YAAsC,CAAC,EAAEG,QAAQ,EAAE;IAC9D,MAAM,EAAEC,eAAe,EAAEC,aAAa,EAAEC,SAAS,EAAEC,YAAY,EAAE,GAAGC,IAAAA,oBAAO;IAC3E,MAAMC,SAASC,IAAAA,iBAAS;IACxB,MAAMC,cAAcF,OAAOG,MAAM,EAAEC,MAAM,IAAI,CAAC,EAAE,IAAI,KAAK,sBAAsB;IAE/EC,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACT,eAAe;QAEpB,uCAAuC;QACvC,IAAIE,cAAc;QAElB,MAAMQ,mBAAmBd,iBAAiBe,IAAI,CAACC,CAAAA,QAC7CN,YAAYO,UAAU,CAACD;QAEzB,MAAME,cAAcjB,YAAYc,IAAI,CAACC,CAAAA,QACnCN,YAAYO,UAAU,CAACD;QAGzB,uDAAuD;QACvD,IAAIF,oBAAoB,CAACX,iBAAiB;YACxC,MAAMgB,cAAc,CAAC,qBAAqB,EAAEC,mBAAmBV,aAAa,CAAC;YAC7EF,OAAOa,OAAO,CAACF;YACf;QACF;QAEA,gDAAgD;QAChD,IAAID,eAAef,iBAAiB;YAClC,MAAMmB,aAAad,OAAOe,KAAK,CAAC,WAAW,IAAc;YACzDf,OAAOa,OAAO,CAACC;YACf;QACF;IACF,GAAG;QAACnB;QAAiBC;QAAeE;QAAcI;QAAaF;KAAO;IAEtE,4DAA4D;IAC5D,IAAI,CAACJ,iBAAiBC,WAAW;QAC/B,qBAAO,qBAACmB,sBAAU;YAACC,MAAK;;IAC1B;IAEA,+EAA+E;IAC/E,MAAMX,mBAAmBd,iBAAiBe,IAAI,CAACC,CAAAA,QAC7CN,YAAYO,UAAU,CAACD;IAEzB,IAAIF,oBAAoB,CAACX,iBAAiB;QACxC,qBAAO,qBAACqB,sBAAU;YAACC,MAAK;;IAC1B;IAEA,wEAAwE;IACxE,MAAMP,cAAcjB,YAAYc,IAAI,CAACC,CAAAA,QACnCN,YAAYO,UAAU,CAACD;IAEzB,IAAIE,eAAef,iBAAiB;QAClC,qBAAO,qBAACqB,sBAAU;YAACC,MAAK;;IAC1B;IAEA,qBAAO;kBAAGvB;;AACZ;MAEA,WAAeH"}