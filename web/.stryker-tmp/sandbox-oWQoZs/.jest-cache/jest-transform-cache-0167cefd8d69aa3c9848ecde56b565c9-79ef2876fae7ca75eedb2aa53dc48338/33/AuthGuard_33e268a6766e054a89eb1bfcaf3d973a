f151252947faa1df2cff534611a7bad4
/**
 * aclue Authentication Guard Component
 * 
 * Provides route-level authentication and authorization for the aclue application.
 * Handles protected routes, authentication redirects, and loading states during
 * authentication checks. Ensures secure access to user-specific features.
 * 
 * Key Features:
 *   - Automatic authentication checking on route changes
 *   - Protected route enforcement with redirect logic
 *   - Public route access for unauthenticated users
 *   - Authentication route handling (prevent double login)
 *   - Loading states during authentication verification
 *   - JWT token validation and refresh
 * 
 * Security Features:
 *   - Server-side authentication validation
 *   - Secure token storage and management
 *   - Session timeout handling
 *   - Unauthorized access prevention
 *   - Seamless login/logout flow
 * 
 * Route Categories:
 *   - Protected: Require valid authentication
 *   - Auth: Login/register pages (redirect if logged in)
 *   - Public: Accessible without authentication
 * 
 * Usage:
 *   <AuthGuard>
 *     <YourProtectedComponent />
 *   </AuthGuard>
 * 
 * Integration:
 *   - Works with AuthContext for global auth state
 *   - Uses Next.js router for navigation
 *   - Coordinates with PageLoader for UX
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthGuard: function() {
        return AuthGuard;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _router = require("next/router");
const _AuthContext = require("../../context/AuthContext");
const _PageLoader = require("../ui/PageLoader");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Routes that require authentication
const PROTECTED_ROUTES = [
    "/dashboard",
    "/profile",
    "/settings",
    "/recommendations",
    "/gift-links",
    "/onboarding"
];
// Routes that should redirect authenticated users
const AUTH_ROUTES = [
    "/auth/login",
    "/auth/register",
    "/auth/forgot-password",
    "/auth/reset-password"
];
const AuthGuard = ({ children })=>{
    const { isAuthenticated, isInitialized, isLoading, isLoggingOut } = (0, _AuthContext.useAuth)();
    const router = (0, _router.useRouter)();
    const currentPath = router.asPath?.split("?")[0] || "/"; // Remove query params
    (0, _react.useEffect)(()=>{
        if (!isInitialized) return;
        // Don't redirect during logout process
        if (isLoggingOut) return;
        const isProtectedRoute = PROTECTED_ROUTES.some((route)=>currentPath.startsWith(route));
        const isAuthRoute = AUTH_ROUTES.some((route)=>currentPath.startsWith(route));
        // Redirect unauthenticated users from protected routes
        if (isProtectedRoute && !isAuthenticated) {
            const redirectUrl = `/auth/login?redirect=${encodeURIComponent(currentPath)}`;
            router.replace(redirectUrl);
            return;
        }
        // Redirect authenticated users from auth routes
        if (isAuthRoute && isAuthenticated) {
            const redirectTo = router.query["redirect"] || "/dashboard";
            router.replace(redirectTo);
            return;
        }
    }, [
        isAuthenticated,
        isInitialized,
        isLoggingOut,
        currentPath,
        router
    ]);
    // Show loading state while initializing or during redirects
    if (!isInitialized || isLoading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PageLoader.PageLoader, {
            text: "Loading aclue..."
        });
    }
    // Show loading for protected routes while unauthenticated (redirect happening)
    const isProtectedRoute = PROTECTED_ROUTES.some((route)=>currentPath.startsWith(route));
    if (isProtectedRoute && !isAuthenticated) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PageLoader.PageLoader, {
            text: "Redirecting to login..."
        });
    }
    // Show loading for auth routes while authenticated (redirect happening)
    const isAuthRoute = AUTH_ROUTES.some((route)=>currentPath.startsWith(route));
    if (isAuthRoute && isAuthenticated) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PageLoader.PageLoader, {
            text: "Redirecting to dashboard..."
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    });
};
const _default = AuthGuard;

//# sourceMappingURL=data:application/json;base64,