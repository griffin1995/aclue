{"version":3,"names":["cov_6i76auso8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","analytics","default","_default","identifyUser","trackEvent","trackPageView","AnalyticsService","init","window","initialized","_config","config","posthogKey","posthogConfig","_posthogconfig","createPostHogConfig","console","log","key","substring","host","api_host","debug","_posthogjs","retryCount","testConnection","error","maxRetries","delayMs","setTimeout","track","getCommonEventProperties","initialization_time","Date","now","retry_count","environment","isProduction","warn","identify","userId","properties","eventName","validateEvent","enrichedProperties","capture","setUserProperties","people","set","pageUrl","location","href","$current_url","page_title","document","title","referrer","reset","group","groupType","groupKey","isFeatureEnabled","flag","enabled","getFeatureFlag","value","optOut","opt_out_capturing","optIn","opt_in_capturing","hasOptedOut","has_opted_out_capturing"],"sources":["/home/jack/Documents/aclue-preprod/web/src/lib/analytics.ts"],"sourcesContent":["/**\n * aclue Analytics Service\n * \n * Comprehensive user behavior tracking and analytics integration using PostHog.\n * Provides business intelligence, user insights, and performance metrics for\n * data-driven product decisions and revenue optimization.\n * \n * Key Features:\n *   - User behavior tracking (swipes, clicks, conversions)\n *   - Revenue analytics (affiliate clicks, commissions)\n *   - Feature flag management for A/B testing\n *   - User segmentation and cohort analysis\n *   - Error tracking and performance monitoring\n * \n * Business Intelligence:\n *   - Track user journey from discovery to purchase\n *   - Measure recommendation algorithm effectiveness\n *   - Monitor affiliate conversion rates and revenue\n *   - Analyze user engagement and retention patterns\n * \n * Privacy & Compliance:\n *   - GDPR-compliant user consent management\n *   - User opt-out functionality\n *   - Data anonymization and retention policies\n *   - Cookie consent integration\n * \n * Integration:\n *   - PostHog for event tracking and analytics\n *   - Feature flags for controlled rollouts\n *   - User identification for personalized experiences\n *   - Custom event validation and enrichment\n * \n * Usage:\n *   import { analytics, trackEvent, identifyUser } from '@/lib/analytics';\n *   \n *   // Initialize analytics\n *   await analytics.init();\n *   \n *   // Track user events\n *   trackEvent('product_swiped', { direction: 'right', product_id: '123' });\n *   \n *   // Identify users\n *   identifyUser('user_123', { subscription_tier: 'premium' });\n */\n\nimport posthog from 'posthog-js';\nimport { config } from '@/config';\nimport { createPostHogConfig, validateEvent, getCommonEventProperties } from './posthog-config';\n\n/**\n * Analytics Service class for comprehensive user behavior tracking.\n * \n * Manages PostHog integration with robust error handling, retry logic,\n * and business-specific event tracking. Provides type-safe analytics\n * interface for the entire application.\n * \n * Architecture:\n *   - Singleton pattern for consistent analytics instance\n *   - Automatic initialization with retry logic\n *   - Event validation and enrichment\n *   - Feature flag integration\n *   - Privacy controls and opt-out functionality\n * \n * Error Handling:\n *   - Graceful degradation when analytics unavailable\n *   - Automatic retry on initialization failures\n *   - Comprehensive logging for debugging\n *   - Fallback behavior for critical paths\n */\nclass AnalyticsService {\n  /**\n   * Service state management for reliable analytics operation.\n   */\n  private initialized = false;        // Analytics initialization status\n  private retryCount = 0;             // Current retry attempt counter\n  private maxRetries = 3;             // Maximum initialization retry attempts\n\n  /**\n   * Initialize PostHog analytics service with robust error handling.\n   * \n   * Performs comprehensive setup including:\n   *   - PostHog SDK initialization with custom configuration\n   *   - Connection testing and validation\n   *   - Automatic retry on failures\n   *   - Development vs production environment handling\n   * \n   * Error Recovery:\n   *   - Retries initialization up to maxRetries times\n   *   - Exponential backoff for retry delays\n   *   - Graceful degradation if initialization fails\n   * \n   * Environment Handling:\n   *   - Server-side rendering compatibility (no window)\n   *   - Development debugging and logging\n   *   - Production optimizations\n   * \n   * Returns:\n   *   Promise<void>: Resolves when initialization complete\n   */\n  async init() {\n    // Prevent initialization in invalid environments\n    if (typeof window === 'undefined' || this.initialized || !config.posthogKey) {\n      return;\n    }\n\n    try {\n      // Create PostHog configuration with environment-specific settings\n      const posthogConfig = createPostHogConfig();\n      \n      console.log('[PostHog] Initializing analytics service...', {\n        key: config.posthogKey?.substring(0, 10) + '...',  // Masked key for security\n        host: posthogConfig.api_host,                       // PostHog server host\n        debug: posthogConfig.debug,                         // Debug mode status\n      });\n\n      // Initialize PostHog SDK with configuration\n      posthog.init(config.posthogKey, posthogConfig);\n      \n      // Mark as successfully initialized\n      this.initialized = true;\n      this.retryCount = 0;                                  // Reset retry counter\n\n      // Verify analytics connectivity with test event\n      await this.testConnection();\n      \n    } catch (error) {\n      console.error('[PostHog] Initialization failed:', error);\n      \n      // Implement retry logic with exponential backoff\n      if (this.retryCount < this.maxRetries) {\n        this.retryCount++;\n        const delayMs = 1000 * this.retryCount;              // Exponential backoff\n        console.log(`[PostHog] Retrying initialization (${this.retryCount}/${this.maxRetries}) in ${delayMs}ms...`);\n        setTimeout(() => this.init(), delayMs);\n      } else {\n        console.error('[PostHog] Maximum retry attempts reached, analytics disabled');\n      }\n    }\n  }\n\n  /**\n   * Test PostHog connectivity with diagnostic event.\n   * \n   * Sends a test event to verify that analytics are working correctly.\n   * Provides debugging information for troubleshooting connection issues.\n   * \n   * Test Event Data:\n   *   - Common properties (user agent, URL, timestamp)\n   *   - Initialization metadata (time, retry count)\n   *   - Environment information for debugging\n   * \n   * Returns:\n   *   Promise<void>: Resolves when test complete\n   */\n  private async testConnection(): Promise<void> {\n    if (!this.initialized) return;\n\n    try {\n      // Send diagnostic event with initialization metadata\n      this.track('analytics_service_initialized', {\n        ...getCommonEventProperties(),              // Standard event properties\n        initialization_time: Date.now(),           // Timestamp for performance tracking\n        retry_count: this.retryCount,              // Number of retries for debugging\n        environment: config.isProduction ? 'production' : 'development',\n      });\n      \n      console.log('[PostHog] Connection test successful - analytics ready');\n    } catch (error) {\n      console.warn('[PostHog] Connection test failed:', error);\n    }\n  }\n\n  /**\n   * Identify user for personalized analytics and targeting.\n   * \n   * Associates all future events with a specific user ID, enabling:\n   *   - Cross-device tracking and session continuity\n   *   - Personalized feature flags and A/B tests\n   *   - User-specific analytics and cohort analysis\n   *   - Revenue attribution and lifetime value tracking\n   * \n   * Privacy Compliance:\n   *   - Only identifies users who have provided consent\n   *   - Supports pseudonymous identifiers for privacy\n   *   - Respects user opt-out preferences\n   * \n   * Parameters:\n   *   userId: Unique user identifier (UUID, email hash, etc.)\n   *   properties: Additional user attributes for segmentation\n   * \n   * Example:\n   *   analytics.identify('user_123', {\n   *     email: 'user@example.com',\n   *     subscription_tier: 'premium',\n   *     first_name: 'John',\n   *     signup_date: '2024-01-01'\n   *   });\n   */\n  identify(userId: string, properties?: Record<string, any>) {\n    if (this.initialized) {\n      console.log('[PostHog] Identifying user:', userId, properties);\n      posthog.identify(userId, properties);\n    }\n  }\n\n  /**\n   * Track user events for analytics and business intelligence.\n   * \n   * Records user actions, behaviors, and system events for:\n   *   - Product analytics and user journey mapping\n   *   - Revenue tracking and conversion optimization\n   *   - A/B testing and feature performance measurement\n   *   - Error monitoring and performance analysis\n   * \n   * Event Processing:\n   *   - Validates event name and properties\n   *   - Enriches events with common properties (timestamp, user agent, etc.)\n   *   - Handles errors gracefully without breaking user experience\n   *   - Logs events for debugging in development\n   * \n   * Common Event Categories:\n   *   - User actions: swipe_left, swipe_right, product_clicked\n   *   - Revenue events: affiliate_click, purchase_completed\n   *   - System events: page_viewed, error_occurred\n   *   - Engagement: session_started, feature_used\n   * \n   * Parameters:\n   *   eventName: Descriptive event name (snake_case convention)\n   *   properties: Event-specific data for analysis\n   * \n   * Example:\n   *   analytics.track('product_swiped', {\n   *     direction: 'right',\n   *     product_id: 'B08GYKNCCP',\n   *     category: 'Electronics',\n   *     session_id: 'session_123'\n   *   });\n   */\n  track(eventName: string, properties?: Record<string, any>) {\n    // Handle analytics not initialized gracefully\n    if (!this.initialized) {\n      console.warn('[PostHog] Analytics not initialized, event queued:', eventName);\n      // In production, could queue events for later sending\n      return;\n    }\n\n    // Validate event meets naming and data requirements\n    if (!validateEvent(eventName, properties)) {\n      return;\n    }\n\n    try {\n      // Enrich event with common properties for consistent analytics\n      const enrichedProperties = {\n        ...getCommonEventProperties(),      // Standard properties (timestamp, URL, etc.)\n        ...properties,                      // Event-specific properties\n      };\n\n      console.log('[PostHog] Tracking event:', eventName, enrichedProperties);\n      posthog.capture(eventName, enrichedProperties);\n    } catch (error) {\n      console.error('[PostHog] Failed to track event:', eventName, error);\n      // Continue execution even if analytics fails\n    }\n  }\n\n  /**\n   * Set or update user properties for segmentation and personalization.\n   * \n   * Updates user profile data for:\n   *   - User segmentation and cohort analysis\n   *   - Personalized feature flags and targeting\n   *   - Revenue analysis and lifetime value tracking\n   *   - Customer support and user insights\n   * \n   * Property Categories:\n   *   - Demographics: age, location, gender\n   *   - Subscription: tier, status, billing_cycle\n   *   - Behavior: last_login, total_swipes, preferences\n   *   - Revenue: total_spent, commission_generated\n   * \n   * Parameters:\n   *   properties: Key-value pairs of user attributes\n   * \n   * Example:\n   *   analytics.setUserProperties({\n   *     subscription_tier: 'premium',\n   *     total_swipes: 150,\n   *     last_active: '2024-01-01',\n   *     favorite_categories: ['Electronics', 'Books']\n   *   });\n   */\n  setUserProperties(properties: Record<string, any>) {\n    if (this.initialized) {\n      console.log('[PostHog] Setting user properties:', properties);\n      posthog.people.set(properties);\n    }\n  }\n\n  /**\n   * Track page views for navigation analytics and user journey mapping.\n   * \n   * Records page navigation events for:\n   *   - User flow analysis and conversion funnels\n   *   - Page performance and engagement metrics\n   *   - A/B testing of page layouts and content\n   *   - SEO and content optimization insights\n   * \n   * Automatic Enrichment:\n   *   - Referrer information for traffic source analysis\n   *   - Page load time and performance metrics\n   *   - Device and browser information\n   *   - User session context\n   * \n   * Parameters:\n   *   path: Optional page path (defaults to current URL)\n   * \n   * Example:\n   *   analytics.trackPageView('/discover'); // Track specific page\n   *   analytics.trackPageView();            // Track current page\n   */\n  trackPageView(path?: string) {\n    if (this.initialized) {\n      const pageUrl = path || window.location.href;\n      console.log('[PostHog] Tracking page view:', pageUrl);\n      \n      posthog.capture('$pageview', {\n        $current_url: pageUrl,              // Page URL for navigation tracking\n        page_title: document.title,         // Page title for content analysis\n        referrer: document.referrer,        // Previous page for traffic flow\n      });\n    }\n  }\n\n  /**\n   * Reset user session for logout and privacy compliance.\n   * \n   * Clears all user identification and session data for:\n   *   - User logout and session termination\n   *   - Privacy compliance and data protection\n   *   - Shared device usage scenarios\n   *   - Testing and development environments\n   * \n   * Reset Actions:\n   *   - Clears user identification and properties\n   *   - Resets feature flag cache\n   *   - Generates new anonymous session ID\n   *   - Maintains analytics functionality for anonymous tracking\n   * \n   * Privacy Compliance:\n   *   - Ensures no personal data persists after logout\n   *   - Supports \"right to be forgotten\" requirements\n   *   - Clears all locally stored user data\n   * \n   * Example:\n   *   // On user logout\n   *   analytics.reset();\n   */\n  reset() {\n    if (this.initialized) {\n      console.log('[PostHog] Resetting user session');\n      posthog.reset();\n    }\n  }\n\n  /**\n   * Associate user with groups for organizational analytics.\n   * \n   * Groups users by organization, team, or other entities for:\n   *   - B2B analytics and enterprise insights\n   *   - Team collaboration feature usage\n   *   - Organization-level reporting and billing\n   *   - Multi-tenant application analytics\n   * \n   * Group Types:\n   *   - organization: Company or business entity\n   *   - team: Department or project team\n   *   - subscription: Shared subscription account\n   *   - family: Family gift-giving groups\n   * \n   * Parameters:\n   *   groupType: Type of group (organization, team, etc.)\n   *   groupKey: Unique identifier for the group\n   *   properties: Group-specific attributes\n   * \n   * Example:\n   *   analytics.group('organization', 'acme-corp', {\n   *     name: 'Acme Corporation',\n   *     plan: 'enterprise',\n   *     employees: 500\n   *   });\n   */\n  group(groupType: string, groupKey: string, properties?: Record<string, any>) {\n    if (this.initialized) {\n      console.log('[PostHog] Setting group:', groupType, groupKey, properties);\n      posthog.group(groupType, groupKey, properties);\n    }\n  }\n\n  /**\n   * Check if a feature flag is enabled for the current user.\n   * \n   * Enables controlled feature rollouts and A/B testing for:\n   *   - Gradual feature releases to user segments\n   *   - A/B testing of new functionality\n   *   - Kill switches for problematic features\n   *   - Personalized user experiences\n   * \n   * Feature Flag Categories:\n   *   - UI features: new_swipe_interface, dark_mode\n   *   - Business logic: premium_recommendations, affiliate_tracking\n   *   - Experiments: recommendation_algorithm_v2\n   *   - Rollouts: mobile_app_promotion\n   * \n   * Parameters:\n   *   flag: Feature flag name (snake_case convention)\n   * \n   * Returns:\n   *   boolean: True if feature is enabled for current user\n   * \n   * Example:\n   *   if (analytics.isFeatureEnabled('new_recommendation_engine')) {\n   *     // Show new recommendation UI\n   *   }\n   */\n  isFeatureEnabled(flag: string): boolean {\n    if (this.initialized) {\n      const enabled = posthog.isFeatureEnabled(flag) === true;\n      console.log(`[PostHog] Feature flag '${flag}':`, enabled);\n      return enabled;\n    }\n    return false;  // Default to disabled if analytics not available\n  }\n\n  /**\n   * Get feature flag value for advanced flag configurations.\n   * \n   * Retrieves feature flag values that can be:\n   *   - Boolean: true/false for simple on/off features\n   *   - String: variant names for multivariate tests\n   *   - Number: configuration values or percentages\n   * \n   * Advanced Use Cases:\n   *   - Multivariate testing with multiple variants\n   *   - Configuration flags with specific values\n   *   - Percentage-based rollouts\n   *   - String-based feature variants\n   * \n   * Parameters:\n   *   flag: Feature flag name\n   * \n   * Returns:\n   *   string | boolean | undefined: Flag value or undefined if not set\n   * \n   * Example:\n   *   const variant = analytics.getFeatureFlag('recommendation_algorithm');\n   *   if (variant === 'collaborative_filtering') {\n   *     // Use collaborative filtering algorithm\n   *   } else if (variant === 'content_based') {\n   *     // Use content-based algorithm\n   *   }\n   */\n  getFeatureFlag(flag: string): string | boolean | undefined {\n    if (this.initialized) {\n      const value = posthog.getFeatureFlag(flag);\n      console.log(`[PostHog] Feature flag '${flag}' value:`, value);\n      return value;\n    }\n    return undefined;\n  }\n\n  /**\n   * Opt user out of analytics tracking for privacy compliance.\n   * \n   * Provides user control over data collection for:\n   *   - GDPR and privacy regulation compliance\n   *   - User preference and consent management\n   *   - Cookie banner and privacy controls\n   *   - Data minimization principles\n   * \n   * Opt-Out Effects:\n   *   - Stops all event tracking and data collection\n   *   - Disables feature flags and personalization\n   *   - Maintains basic functionality without analytics\n   *   - Sets persistent opt-out preference\n   * \n   * Privacy Compliance:\n   *   - Respects user privacy choices\n   *   - Provides clear opt-out mechanism\n   *   - Maintains opt-out status across sessions\n   * \n   * Example:\n   *   // User clicks \"Opt out of analytics\"\n   *   analytics.optOut();\n   */\n  optOut() {\n    if (this.initialized) {\n      console.log('[PostHog] User opted out of analytics tracking');\n      posthog.opt_out_capturing();\n    }\n  }\n\n  /**\n   * Opt user into analytics tracking after previous opt-out.\n   * \n   * Re-enables analytics for users who previously opted out:\n   *   - Restores full analytics functionality\n   *   - Re-enables feature flags and personalization\n   *   - Resumes event tracking and data collection\n   *   - Updates user consent preferences\n   * \n   * Use Cases:\n   *   - User changes privacy preferences\n   *   - Premium users enabling advanced features\n   *   - Onboarding flow consent updates\n   *   - Settings page privacy controls\n   * \n   * Example:\n   *   // User clicks \"Enable analytics\"\n   *   analytics.optIn();\n   */\n  optIn() {\n    if (this.initialized) {\n      console.log('[PostHog] User opted into analytics tracking');\n      posthog.opt_in_capturing();\n    }\n  }\n\n  /**\n   * Check if user has opted out of analytics tracking.\n   * \n   * Determines user's current privacy preference for:\n   *   - Conditional UI rendering based on consent\n   *   - Privacy settings page status display\n   *   - Feature availability and functionality\n   *   - Compliance with privacy regulations\n   * \n   * Returns:\n   *   boolean: True if user has opted out, false otherwise\n   * \n   * Example:\n   *   if (!analytics.hasOptedOut()) {\n   *     // Show analytics-dependent features\n   *     renderPersonalizedRecommendations();\n   *   }\n   */\n  hasOptedOut(): boolean {\n    if (this.initialized) {\n      return posthog.has_opted_out_capturing();\n    }\n    return false;  // Default to opted-in if analytics not available\n  }\n}\n\n// ==============================================================================\n// SINGLETON ANALYTICS INSTANCE\n// ==============================================================================\n// Global analytics instance for application-wide usage\n\n/**\n * Global analytics service instance.\n * \n * Singleton pattern ensures consistent analytics across the entire application.\n * Use this instance for all analytics operations to maintain state and configuration.\n */\nexport const analytics = new AnalyticsService();\n\n// ==============================================================================\n// CONVENIENCE FUNCTIONS\n// ==============================================================================\n// Simplified API for common analytics operations\n\n/**\n * Track user event with simplified API.\n * \n * Convenience function for the most common analytics operation.\n * Provides type-safe event tracking without direct service access.\n * \n * Parameters:\n *   eventName: Descriptive event name (snake_case)\n *   properties: Optional event data\n * \n * Example:\n *   trackEvent('button_clicked', { button_id: 'signup' });\n */\nexport const trackEvent = (eventName: string, properties?: Record<string, any>) => {\n  analytics.track(eventName, properties);\n};\n\n/**\n * Identify user with simplified API.\n * \n * Convenience function for user identification without direct service access.\n * \n * Parameters:\n *   userId: Unique user identifier\n *   properties: Optional user attributes\n * \n * Example:\n *   identifyUser('user_123', { email: 'user@example.com' });\n */\nexport const identifyUser = (userId: string, properties?: Record<string, any>) => {\n  analytics.identify(userId, properties);\n};\n\n/**\n * Track page view with simplified API.\n * \n * Convenience function for page view tracking without direct service access.\n * \n * Parameters:\n *   path: Optional page path (defaults to current URL)\n * \n * Example:\n *   trackPageView('/discover');\n */\nexport const trackPageView = (path?: string) => {\n  analytics.trackPageView(path);\n};\n\n// Default export for importing as single module\nexport default analytics;\n\n// Export all public interfaces\n// Exported: analytics, trackEvent, identifyUser, trackPageView, AnalyticsService"],"mappings":"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","ignoreList":[]}