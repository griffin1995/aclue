024142150f741b69624a2fc168f78b93
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useAccessibility = require("../useAccessibility");
// Mock matchMedia
const mockMatchMedia = jest.fn();
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: mockMatchMedia
});
// Mock scrollIntoView
const mockScrollIntoView = jest.fn();
Element.prototype.scrollIntoView = mockScrollIntoView;
describe("useAccessibility", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        document.body.innerHTML = "";
        // Reset matchMedia mock
        mockMatchMedia.mockImplementation((query)=>({
                matches: false,
                media: query,
                onchange: null,
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                addListener: jest.fn(),
                removeListener: jest.fn(),
                dispatchEvent: jest.fn()
            }));
    });
    describe("Reduced Motion Detection", ()=>{
        it("detects reduced motion preference", ()=>{
            mockMatchMedia.mockImplementation((query)=>({
                    matches: query === "(prefers-reduced-motion: reduce)",
                    media: query,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    reducedMotion: true
                }));
            expect(result.current.isReducedMotion).toBe(true);
        });
        it("defaults to no reduced motion when preference is not set", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    reducedMotion: true
                }));
            expect(result.current.isReducedMotion).toBe(false);
        });
        it("updates when system preference changes", ()=>{
            const mockAddEventListener = jest.fn();
            const mockRemoveEventListener = jest.fn();
            mockMatchMedia.mockImplementation(()=>({
                    matches: false,
                    media: "(prefers-reduced-motion: reduce)",
                    addEventListener: mockAddEventListener,
                    removeEventListener: mockRemoveEventListener,
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { unmount } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    reducedMotion: true
                }));
            expect(mockAddEventListener).toHaveBeenCalledWith("change", expect.any(Function));
            unmount();
            expect(mockRemoveEventListener).toHaveBeenCalledWith("change", expect.any(Function));
        });
    });
    describe("Screen Reader Announcements", ()=>{
        it("creates announcement element with correct attributes", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            (0, _react.act)(()=>{
                result.current.announceToScreenReader("Test announcement");
            });
            const announcement = document.querySelector('[aria-live="polite"]');
            expect(announcement).toBeInTheDocument();
            expect(announcement).toHaveAttribute("aria-atomic", "true");
            expect(announcement).toHaveClass("sr-only");
            expect(announcement).toHaveTextContent("Test announcement");
        });
        it("removes announcement element after timeout", async ()=>{
            jest.useFakeTimers();
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            (0, _react.act)(()=>{
                result.current.announceToScreenReader("Test announcement");
            });
            expect(document.querySelector('[aria-live="polite"]')).toBeInTheDocument();
            (0, _react.act)(()=>{
                jest.advanceTimersByTime(1000);
            });
            expect(document.querySelector('[aria-live="polite"]')).not.toBeInTheDocument();
            jest.useRealTimers();
        });
    });
    describe("Focus Management", ()=>{
        it("focuses on element by selector", ()=>{
            const button = document.createElement("button");
            button.id = "test-button";
            const mockFocus = jest.fn();
            button.focus = mockFocus;
            document.body.appendChild(button);
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            (0, _react.act)(()=>{
                result.current.focusOnElement("#test-button");
            });
            expect(mockFocus).toHaveBeenCalled();
            expect(mockScrollIntoView).toHaveBeenCalledWith({
                behavior: "smooth",
                block: "center"
            });
        });
        it("uses auto scroll behavior when reduced motion is enabled", ()=>{
            mockMatchMedia.mockImplementation((query)=>({
                    matches: query === "(prefers-reduced-motion: reduce)",
                    media: query,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const button = document.createElement("button");
            button.id = "test-button";
            const mockFocus = jest.fn();
            button.focus = mockFocus;
            document.body.appendChild(button);
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    reducedMotion: true
                }));
            (0, _react.act)(()=>{
                result.current.focusOnElement("#test-button");
            });
            expect(mockScrollIntoView).toHaveBeenCalledWith({
                behavior: "auto",
                block: "center"
            });
        });
        it("handles missing elements gracefully", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            expect(()=>{
                (0, _react.act)(()=>{
                    result.current.focusOnElement("#non-existent");
                });
            }).not.toThrow();
        });
    });
    describe("Focus Trapping", ()=>{
        it("traps focus within container", ()=>{
            const container = document.createElement("div");
            const button1 = document.createElement("button");
            const button2 = document.createElement("button");
            const button3 = document.createElement("button");
            button1.textContent = "Button 1";
            button2.textContent = "Button 2";
            button3.textContent = "Button 3";
            container.appendChild(button1);
            container.appendChild(button2);
            container.appendChild(button3);
            document.body.appendChild(container);
            const mockFocus1 = jest.fn();
            const mockFocus2 = jest.fn();
            const mockFocus3 = jest.fn();
            button1.focus = mockFocus1;
            button2.focus = mockFocus2;
            button3.focus = mockFocus3;
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            let cleanup;
            (0, _react.act)(()=>{
                cleanup = result.current.trapFocus(container);
            });
            expect(mockFocus1).toHaveBeenCalled();
            // Simulate Tab key on last element
            Object.defineProperty(document, "activeElement", {
                value: button3,
                writable: true
            });
            const tabEvent = new KeyboardEvent("keydown", {
                key: "Tab"
            });
            document.dispatchEvent(tabEvent);
            // Should wrap to first element
            expect(mockFocus1).toHaveBeenCalledTimes(2);
            // Cleanup
            if (cleanup) {
                cleanup();
            }
        });
        it("handles Escape key to close modal", ()=>{
            const container = document.createElement("div");
            const closeButton = document.createElement("button");
            closeButton.setAttribute("data-close", "");
            const mockClick = jest.fn();
            closeButton.click = mockClick;
            container.appendChild(closeButton);
            document.body.appendChild(container);
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            let cleanup;
            (0, _react.act)(()=>{
                cleanup = result.current.trapFocus(container);
            });
            const escapeEvent = new KeyboardEvent("keydown", {
                key: "Escape"
            });
            document.dispatchEvent(escapeEvent);
            expect(mockClick).toHaveBeenCalled();
            if (cleanup) {
                cleanup();
            }
        });
    });
    describe("Skip Links", ()=>{
        it("returns correct skip links", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)());
            const skipLinks = result.current.getSkipLinks();
            expect(skipLinks).toEqual([
                {
                    href: "#main-content",
                    label: "Skip to main content"
                },
                {
                    href: "#navigation",
                    label: "Skip to navigation"
                },
                {
                    href: "#footer",
                    label: "Skip to footer"
                }
            ]);
        });
    });
    describe("Keyboard Navigation", ()=>{
        it("sets up global keyboard shortcuts", ()=>{
            const mockAddEventListener = jest.spyOn(document, "addEventListener");
            const mockRemoveEventListener = jest.spyOn(document, "removeEventListener");
            const { unmount } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    enableKeyboardNavigation: true
                }));
            expect(mockAddEventListener).toHaveBeenCalledWith("keydown", expect.any(Function));
            expect(mockAddEventListener).toHaveBeenCalledWith("mousedown", expect.any(Function));
            unmount();
            expect(mockRemoveEventListener).toHaveBeenCalledWith("keydown", expect.any(Function));
            expect(mockRemoveEventListener).toHaveBeenCalledWith("mousedown", expect.any(Function));
        });
        it("adds keyboard navigation class on Tab key", ()=>{
            (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    enableKeyboardNavigation: true
                }));
            const tabEvent = new KeyboardEvent("keydown", {
                key: "Tab"
            });
            document.dispatchEvent(tabEvent);
            expect(document.body).toHaveClass("keyboard-navigation");
        });
        it("removes keyboard navigation class on mouse use", ()=>{
            (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    enableKeyboardNavigation: true
                }));
            // First add the class
            const tabEvent = new KeyboardEvent("keydown", {
                key: "Tab"
            });
            document.dispatchEvent(tabEvent);
            expect(document.body).toHaveClass("keyboard-navigation");
            // Then remove it with mouse
            const mouseEvent = new MouseEvent("mousedown");
            document.dispatchEvent(mouseEvent);
            expect(document.body).not.toHaveClass("keyboard-navigation");
        });
    });
    describe("Page Change Announcements", ()=>{
        it("announces page title on load", ()=>{
            jest.useFakeTimers();
            document.title = "Test Page";
            (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    announcePageChanges: true
                }));
            (0, _react.act)(()=>{
                jest.advanceTimersByTime(100);
            });
            const announcement = document.querySelector('[aria-live="polite"]');
            expect(announcement).toHaveTextContent("Page loaded: Test Page");
            jest.useRealTimers();
        });
        it("listens for popstate events", ()=>{
            const mockAddEventListener = jest.spyOn(window, "addEventListener");
            const mockRemoveEventListener = jest.spyOn(window, "removeEventListener");
            const { unmount } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    announcePageChanges: true
                }));
            expect(mockAddEventListener).toHaveBeenCalledWith("popstate", expect.any(Function));
            unmount();
            expect(mockRemoveEventListener).toHaveBeenCalledWith("popstate", expect.any(Function));
        });
    });
    describe("Configuration Options", ()=>{
        it("respects disabled options", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useAccessibility.useAccessibility)({
                    announcePageChanges: false,
                    enableKeyboardNavigation: false,
                    reducedMotion: false
                }));
            expect(result.current.isReducedMotion).toBe(false);
            expect(document.addEventListener).not.toHaveBeenCalledWith("keydown", expect.any(Function));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phY2svRG9jdW1lbnRzL2FjbHVlLXByZXByb2Qvd2ViL3NyYy9ob29rcy9fX3Rlc3RzX18vdXNlQWNjZXNzaWJpbGl0eS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlckhvb2ssIGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgdXNlQWNjZXNzaWJpbGl0eSB9IGZyb20gJy4uL3VzZUFjY2Vzc2liaWxpdHknO1xuXG4vLyBNb2NrIG1hdGNoTWVkaWFcbmNvbnN0IG1vY2tNYXRjaE1lZGlhID0gamVzdC5mbigpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogbW9ja01hdGNoTWVkaWEsXG59KTtcblxuLy8gTW9jayBzY3JvbGxJbnRvVmlld1xuY29uc3QgbW9ja1Njcm9sbEludG9WaWV3ID0gamVzdC5mbigpO1xuRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBtb2NrU2Nyb2xsSW50b1ZpZXc7XG5cbmRlc2NyaWJlKCd1c2VBY2Nlc3NpYmlsaXR5JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICAgIFxuICAgIC8vIFJlc2V0IG1hdGNoTWVkaWEgbW9ja1xuICAgIG1vY2tNYXRjaE1lZGlhLm1vY2tJbXBsZW1lbnRhdGlvbigocXVlcnkpID0+ICh7XG4gICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgIG1lZGlhOiBxdWVyeSxcbiAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXG4gICAgfSkpO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVkdWNlZCBNb3Rpb24gRGV0ZWN0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdkZXRlY3RzIHJlZHVjZWQgbW90aW9uIHByZWZlcmVuY2UnLCAoKSA9PiB7XG4gICAgICBtb2NrTWF0Y2hNZWRpYS5tb2NrSW1wbGVtZW50YXRpb24oKHF1ZXJ5KSA9PiAoe1xuICAgICAgICBtYXRjaGVzOiBxdWVyeSA9PT0gJyhwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpJyxcbiAgICAgICAgbWVkaWE6IHF1ZXJ5LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IHJlZHVjZWRNb3Rpb246IHRydWUgfSkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNSZWR1Y2VkTW90aW9uKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RlZmF1bHRzIHRvIG5vIHJlZHVjZWQgbW90aW9uIHdoZW4gcHJlZmVyZW5jZSBpcyBub3Qgc2V0JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IHJlZHVjZWRNb3Rpb246IHRydWUgfSkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNSZWR1Y2VkTW90aW9uKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCd1cGRhdGVzIHdoZW4gc3lzdGVtIHByZWZlcmVuY2UgY2hhbmdlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tBZGRFdmVudExpc3RlbmVyID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIgPSBqZXN0LmZuKCk7XG5cbiAgICAgIG1vY2tNYXRjaE1lZGlhLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgICAgbWVkaWE6ICcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKScsXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IG1vY2tBZGRFdmVudExpc3RlbmVyLFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgeyB1bm1vdW50IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjY2Vzc2liaWxpdHkoeyByZWR1Y2VkTW90aW9uOiB0cnVlIH0pKTtcblxuICAgICAgZXhwZWN0KG1vY2tBZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY2hhbmdlJywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xuXG4gICAgICB1bm1vdW50KCk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2NoYW5nZScsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NjcmVlbiBSZWFkZXIgQW5ub3VuY2VtZW50cycsICgpID0+IHtcbiAgICBpdCgnY3JlYXRlcyBhbm5vdW5jZW1lbnQgZWxlbWVudCB3aXRoIGNvcnJlY3QgYXR0cmlidXRlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjY2Vzc2liaWxpdHkoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LmFubm91bmNlVG9TY3JlZW5SZWFkZXIoJ1Rlc3QgYW5ub3VuY2VtZW50Jyk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYW5ub3VuY2VtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2FyaWEtbGl2ZT1cInBvbGl0ZVwiXScpO1xuICAgICAgZXhwZWN0KGFubm91bmNlbWVudCkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChhbm5vdW5jZW1lbnQpLnRvSGF2ZUF0dHJpYnV0ZSgnYXJpYS1hdG9taWMnLCAndHJ1ZScpO1xuICAgICAgZXhwZWN0KGFubm91bmNlbWVudCkudG9IYXZlQ2xhc3MoJ3NyLW9ubHknKTtcbiAgICAgIGV4cGVjdChhbm5vdW5jZW1lbnQpLnRvSGF2ZVRleHRDb250ZW50KCdUZXN0IGFubm91bmNlbWVudCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JlbW92ZXMgYW5ub3VuY2VtZW50IGVsZW1lbnQgYWZ0ZXIgdGltZW91dCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuYW5ub3VuY2VUb1NjcmVlblJlYWRlcignVGVzdCBhbm5vdW5jZW1lbnQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2FyaWEtbGl2ZT1cInBvbGl0ZVwiXScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1thcmlhLWxpdmU9XCJwb2xpdGVcIl0nKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRm9jdXMgTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBpdCgnZm9jdXNlcyBvbiBlbGVtZW50IGJ5IHNlbGVjdG9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBidXR0b24uaWQgPSAndGVzdC1idXR0b24nO1xuICAgICAgY29uc3QgbW9ja0ZvY3VzID0gamVzdC5mbigpO1xuICAgICAgYnV0dG9uLmZvY3VzID0gbW9ja0ZvY3VzO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBY2Nlc3NpYmlsaXR5KCkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5mb2N1c09uRWxlbWVudCgnI3Rlc3QtYnV0dG9uJyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tGb2N1cykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tTY3JvbGxJbnRvVmlldykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICAgIGJsb2NrOiAnY2VudGVyJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3VzZXMgYXV0byBzY3JvbGwgYmVoYXZpb3Igd2hlbiByZWR1Y2VkIG1vdGlvbiBpcyBlbmFibGVkJywgKCkgPT4ge1xuICAgICAgbW9ja01hdGNoTWVkaWEubW9ja0ltcGxlbWVudGF0aW9uKChxdWVyeSkgPT4gKHtcbiAgICAgICAgbWF0Y2hlczogcXVlcnkgPT09ICcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKScsXG4gICAgICAgIG1lZGlhOiBxdWVyeSxcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmlkID0gJ3Rlc3QtYnV0dG9uJztcbiAgICAgIGNvbnN0IG1vY2tGb2N1cyA9IGplc3QuZm4oKTtcbiAgICAgIGJ1dHRvbi5mb2N1cyA9IG1vY2tGb2N1cztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IHJlZHVjZWRNb3Rpb246IHRydWUgfSkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5mb2N1c09uRWxlbWVudCgnI3Rlc3QtYnV0dG9uJyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tTY3JvbGxJbnRvVmlldykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBiZWhhdmlvcjogJ2F1dG8nLFxuICAgICAgICBibG9jazogJ2NlbnRlcicsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdoYW5kbGVzIG1pc3NpbmcgZWxlbWVudHMgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjY2Vzc2liaWxpdHkoKSk7XG5cbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZm9jdXNPbkVsZW1lbnQoJyNub24tZXhpc3RlbnQnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRm9jdXMgVHJhcHBpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3RyYXBzIGZvY3VzIHdpdGhpbiBjb250YWluZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnN0IGJ1dHRvbjEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGNvbnN0IGJ1dHRvbjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGNvbnN0IGJ1dHRvbjMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgICAgYnV0dG9uMS50ZXh0Q29udGVudCA9ICdCdXR0b24gMSc7XG4gICAgICBidXR0b24yLnRleHRDb250ZW50ID0gJ0J1dHRvbiAyJztcbiAgICAgIGJ1dHRvbjMudGV4dENvbnRlbnQgPSAnQnV0dG9uIDMnO1xuXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uMSk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uMik7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uMyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgIGNvbnN0IG1vY2tGb2N1czEgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBtb2NrRm9jdXMyID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja0ZvY3VzMyA9IGplc3QuZm4oKTtcblxuICAgICAgYnV0dG9uMS5mb2N1cyA9IG1vY2tGb2N1czE7XG4gICAgICBidXR0b24yLmZvY3VzID0gbW9ja0ZvY3VzMjtcbiAgICAgIGJ1dHRvbjMuZm9jdXMgPSBtb2NrRm9jdXMzO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBY2Nlc3NpYmlsaXR5KCkpO1xuXG4gICAgICBsZXQgY2xlYW51cDogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBjbGVhbnVwID0gcmVzdWx0LmN1cnJlbnQudHJhcEZvY3VzKGNvbnRhaW5lcik7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tGb2N1czEpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgICAgLy8gU2ltdWxhdGUgVGFiIGtleSBvbiBsYXN0IGVsZW1lbnRcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ2FjdGl2ZUVsZW1lbnQnLCB7XG4gICAgICAgIHZhbHVlOiBidXR0b24zLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0YWJFdmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywgeyBrZXk6ICdUYWInIH0pO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCh0YWJFdmVudCk7XG5cbiAgICAgIC8vIFNob3VsZCB3cmFwIHRvIGZpcnN0IGVsZW1lbnRcbiAgICAgIGV4cGVjdChtb2NrRm9jdXMxKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG5cbiAgICAgIC8vIENsZWFudXBcbiAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdoYW5kbGVzIEVzY2FwZSBrZXkgdG8gY2xvc2UgbW9kYWwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBjbG9zZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtY2xvc2UnLCAnJyk7XG4gICAgICBjb25zdCBtb2NrQ2xpY2sgPSBqZXN0LmZuKCk7XG4gICAgICBjbG9zZUJ1dHRvbi5jbGljayA9IG1vY2tDbGljaztcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjY2Vzc2liaWxpdHkoKSk7XG5cbiAgICAgIGxldCBjbGVhbnVwOiAoKCkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIGNsZWFudXAgPSByZXN1bHQuY3VycmVudC50cmFwRm9jdXMoY29udGFpbmVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBlc2NhcGVFdmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywgeyBrZXk6ICdFc2NhcGUnIH0pO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChlc2NhcGVFdmVudCk7XG5cbiAgICAgIGV4cGVjdChtb2NrQ2xpY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgICAgaWYgKGNsZWFudXApIHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU2tpcCBMaW5rcycsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyBjb3JyZWN0IHNraXAgbGlua3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBY2Nlc3NpYmlsaXR5KCkpO1xuXG4gICAgICBjb25zdCBza2lwTGlua3MgPSByZXN1bHQuY3VycmVudC5nZXRTa2lwTGlua3MoKTtcblxuICAgICAgZXhwZWN0KHNraXBMaW5rcykudG9FcXVhbChbXG4gICAgICAgIHsgaHJlZjogJyNtYWluLWNvbnRlbnQnLCBsYWJlbDogJ1NraXAgdG8gbWFpbiBjb250ZW50JyB9LFxuICAgICAgICB7IGhyZWY6ICcjbmF2aWdhdGlvbicsIGxhYmVsOiAnU2tpcCB0byBuYXZpZ2F0aW9uJyB9LFxuICAgICAgICB7IGhyZWY6ICcjZm9vdGVyJywgbGFiZWw6ICdTa2lwIHRvIGZvb3RlcicgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnS2V5Ym9hcmQgTmF2aWdhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2V0cyB1cCBnbG9iYWwga2V5Ym9hcmQgc2hvcnRjdXRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0FkZEV2ZW50TGlzdGVuZXIgPSBqZXN0LnNweU9uKGRvY3VtZW50LCAnYWRkRXZlbnRMaXN0ZW5lcicpO1xuICAgICAgY29uc3QgbW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIgPSBqZXN0LnNweU9uKGRvY3VtZW50LCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicpO1xuXG4gICAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IGVuYWJsZUtleWJvYXJkTmF2aWdhdGlvbjogdHJ1ZSB9KSk7XG5cbiAgICAgIGV4cGVjdChtb2NrQWRkRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2tleWRvd24nLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XG4gICAgICBleHBlY3QobW9ja0FkZEV2ZW50TGlzdGVuZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdtb3VzZWRvd24nLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XG5cbiAgICAgIHVubW91bnQoKTtcblxuICAgICAgZXhwZWN0KG1vY2tSZW1vdmVFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgna2V5ZG93bicsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcbiAgICAgIGV4cGVjdChtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ21vdXNlZG93bicsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcbiAgICB9KTtcblxuICAgIGl0KCdhZGRzIGtleWJvYXJkIG5hdmlnYXRpb24gY2xhc3Mgb24gVGFiIGtleScsICgpID0+IHtcbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IGVuYWJsZUtleWJvYXJkTmF2aWdhdGlvbjogdHJ1ZSB9KSk7XG5cbiAgICAgIGNvbnN0IHRhYkV2ZW50ID0gbmV3IEtleWJvYXJkRXZlbnQoJ2tleWRvd24nLCB7IGtleTogJ1RhYicgfSk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KHRhYkV2ZW50KTtcblxuICAgICAgZXhwZWN0KGRvY3VtZW50LmJvZHkpLnRvSGF2ZUNsYXNzKCdrZXlib2FyZC1uYXZpZ2F0aW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgncmVtb3ZlcyBrZXlib2FyZCBuYXZpZ2F0aW9uIGNsYXNzIG9uIG1vdXNlIHVzZScsICgpID0+IHtcbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IGVuYWJsZUtleWJvYXJkTmF2aWdhdGlvbjogdHJ1ZSB9KSk7XG5cbiAgICAgIC8vIEZpcnN0IGFkZCB0aGUgY2xhc3NcbiAgICAgIGNvbnN0IHRhYkV2ZW50ID0gbmV3IEtleWJvYXJkRXZlbnQoJ2tleWRvd24nLCB7IGtleTogJ1RhYicgfSk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KHRhYkV2ZW50KTtcbiAgICAgIGV4cGVjdChkb2N1bWVudC5ib2R5KS50b0hhdmVDbGFzcygna2V5Ym9hcmQtbmF2aWdhdGlvbicpO1xuXG4gICAgICAvLyBUaGVuIHJlbW92ZSBpdCB3aXRoIG1vdXNlXG4gICAgICBjb25zdCBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoJ21vdXNlZG93bicpO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChtb3VzZUV2ZW50KTtcbiAgICAgIGV4cGVjdChkb2N1bWVudC5ib2R5KS5ub3QudG9IYXZlQ2xhc3MoJ2tleWJvYXJkLW5hdmlnYXRpb24nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BhZ2UgQ2hhbmdlIEFubm91bmNlbWVudHMnLCAoKSA9PiB7XG4gICAgaXQoJ2Fubm91bmNlcyBwYWdlIHRpdGxlIG9uIGxvYWQnLCAoKSA9PiB7XG4gICAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gJ1Rlc3QgUGFnZSc7XG5cbiAgICAgIHJlbmRlckhvb2soKCkgPT4gdXNlQWNjZXNzaWJpbGl0eSh7IGFubm91bmNlUGFnZUNoYW5nZXM6IHRydWUgfSkpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBhbm5vdW5jZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbYXJpYS1saXZlPVwicG9saXRlXCJdJyk7XG4gICAgICBleHBlY3QoYW5ub3VuY2VtZW50KS50b0hhdmVUZXh0Q29udGVudCgnUGFnZSBsb2FkZWQ6IFRlc3QgUGFnZScpO1xuXG4gICAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIGl0KCdsaXN0ZW5zIGZvciBwb3BzdGF0ZSBldmVudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQWRkRXZlbnRMaXN0ZW5lciA9IGplc3Quc3B5T24od2luZG93LCAnYWRkRXZlbnRMaXN0ZW5lcicpO1xuICAgICAgY29uc3QgbW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIgPSBqZXN0LnNweU9uKHdpbmRvdywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInKTtcblxuICAgICAgY29uc3QgeyB1bm1vdW50IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZUFjY2Vzc2liaWxpdHkoeyBhbm5vdW5jZVBhZ2VDaGFuZ2VzOiB0cnVlIH0pKTtcblxuICAgICAgZXhwZWN0KG1vY2tBZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncG9wc3RhdGUnLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XG5cbiAgICAgIHVubW91bnQoKTtcblxuICAgICAgZXhwZWN0KG1vY2tSZW1vdmVFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncG9wc3RhdGUnLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDb25maWd1cmF0aW9uIE9wdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Jlc3BlY3RzIGRpc2FibGVkIG9wdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VBY2Nlc3NpYmlsaXR5KHtcbiAgICAgICAgYW5ub3VuY2VQYWdlQ2hhbmdlczogZmFsc2UsXG4gICAgICAgIGVuYWJsZUtleWJvYXJkTmF2aWdhdGlvbjogZmFsc2UsXG4gICAgICAgIHJlZHVjZWRNb3Rpb246IGZhbHNlLFxuICAgICAgfSkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNSZWR1Y2VkTW90aW9uKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKS5ub3QudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2tleWRvd24nLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm5hbWVzIjpbIm1vY2tNYXRjaE1lZGlhIiwiamVzdCIsImZuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwibW9ja1Njcm9sbEludG9WaWV3IiwiRWxlbWVudCIsInByb3RvdHlwZSIsInNjcm9sbEludG9WaWV3IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInF1ZXJ5IiwibWF0Y2hlcyIsIm1lZGlhIiwib25jaGFuZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwiaXQiLCJyZXN1bHQiLCJyZW5kZXJIb29rIiwidXNlQWNjZXNzaWJpbGl0eSIsInJlZHVjZWRNb3Rpb24iLCJleHBlY3QiLCJjdXJyZW50IiwiaXNSZWR1Y2VkTW90aW9uIiwidG9CZSIsIm1vY2tBZGRFdmVudExpc3RlbmVyIiwibW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bm1vdW50IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJhbnkiLCJGdW5jdGlvbiIsImFjdCIsImFubm91bmNlVG9TY3JlZW5SZWFkZXIiLCJhbm5vdW5jZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidG9CZUluVGhlRG9jdW1lbnQiLCJ0b0hhdmVBdHRyaWJ1dGUiLCJ0b0hhdmVDbGFzcyIsInRvSGF2ZVRleHRDb250ZW50IiwidXNlRmFrZVRpbWVycyIsImFkdmFuY2VUaW1lcnNCeVRpbWUiLCJub3QiLCJ1c2VSZWFsVGltZXJzIiwiYnV0dG9uIiwiY3JlYXRlRWxlbWVudCIsImlkIiwibW9ja0ZvY3VzIiwiZm9jdXMiLCJhcHBlbmRDaGlsZCIsImZvY3VzT25FbGVtZW50IiwidG9IYXZlQmVlbkNhbGxlZCIsImJlaGF2aW9yIiwiYmxvY2siLCJ0b1Rocm93IiwiY29udGFpbmVyIiwiYnV0dG9uMSIsImJ1dHRvbjIiLCJidXR0b24zIiwidGV4dENvbnRlbnQiLCJtb2NrRm9jdXMxIiwibW9ja0ZvY3VzMiIsIm1vY2tGb2N1czMiLCJjbGVhbnVwIiwidHJhcEZvY3VzIiwidGFiRXZlbnQiLCJLZXlib2FyZEV2ZW50Iiwia2V5IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiY2xvc2VCdXR0b24iLCJzZXRBdHRyaWJ1dGUiLCJtb2NrQ2xpY2siLCJjbGljayIsImVzY2FwZUV2ZW50Iiwic2tpcExpbmtzIiwiZ2V0U2tpcExpbmtzIiwidG9FcXVhbCIsImhyZWYiLCJsYWJlbCIsInNweU9uIiwiZW5hYmxlS2V5Ym9hcmROYXZpZ2F0aW9uIiwibW91c2VFdmVudCIsIk1vdXNlRXZlbnQiLCJ0aXRsZSIsImFubm91bmNlUGFnZUNoYW5nZXMiXSwibWFwcGluZ3MiOiI7Ozs7dUJBQWdDO2tDQUNDO0FBRWpDLGtCQUFrQjtBQUNsQixNQUFNQSxpQkFBaUJDLEtBQUtDLEVBQUU7QUFDOUJDLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUSxjQUFjO0lBQzFDQyxVQUFVO0lBQ1ZDLE9BQU9QO0FBQ1Q7QUFFQSxzQkFBc0I7QUFDdEIsTUFBTVEscUJBQXFCUCxLQUFLQyxFQUFFO0FBQ2xDTyxRQUFRQyxTQUFTLENBQUNDLGNBQWMsR0FBR0g7QUFFbkNJLFNBQVMsb0JBQW9CO0lBQzNCQyxXQUFXO1FBQ1RaLEtBQUthLGFBQWE7UUFDbEJDLFNBQVNDLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBRTFCLHdCQUF3QjtRQUN4QmpCLGVBQWVrQixrQkFBa0IsQ0FBQyxDQUFDQyxRQUFXLENBQUE7Z0JBQzVDQyxTQUFTO2dCQUNUQyxPQUFPRjtnQkFDUEcsVUFBVTtnQkFDVkMsa0JBQWtCdEIsS0FBS0MsRUFBRTtnQkFDekJzQixxQkFBcUJ2QixLQUFLQyxFQUFFO2dCQUM1QnVCLGFBQWF4QixLQUFLQyxFQUFFO2dCQUNwQndCLGdCQUFnQnpCLEtBQUtDLEVBQUU7Z0JBQ3ZCeUIsZUFBZTFCLEtBQUtD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