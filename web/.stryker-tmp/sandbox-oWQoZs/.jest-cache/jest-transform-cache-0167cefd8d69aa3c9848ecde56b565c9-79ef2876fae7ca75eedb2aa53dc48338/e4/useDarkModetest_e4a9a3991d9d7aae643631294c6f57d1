a50a9e9ca4885c9edc39172804673991
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useDarkMode = require("../useDarkMode");
// Mock localStorage
const mockLocalStorage = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, "localStorage", {
    value: mockLocalStorage
});
// Mock matchMedia
const mockMatchMedia = jest.fn();
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: mockMatchMedia
});
// Mock document.documentElement
const mockDocumentElement = {
    classList: {
        add: jest.fn(),
        remove: jest.fn()
    }
};
Object.defineProperty(document, "documentElement", {
    value: mockDocumentElement
});
describe("useDarkMode", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockLocalStorage.getItem.mockReturnValue(null);
        // Default matchMedia mock
        mockMatchMedia.mockImplementation((query)=>({
                matches: false,
                media: query,
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
                onchange: null,
                addListener: jest.fn(),
                removeListener: jest.fn(),
                dispatchEvent: jest.fn()
            }));
    });
    describe("Initial State", ()=>{
        it("initializes with system theme by default", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.theme).toBe("system");
            expect(result.current.isDark).toBe(false);
        });
        it("loads saved theme from localStorage", ()=>{
            mockLocalStorage.getItem.mockReturnValue("dark");
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.theme).toBe("dark");
            expect(result.current.isDark).toBe(true);
        });
        it("ignores invalid theme values from localStorage", ()=>{
            mockLocalStorage.getItem.mockReturnValue("invalid-theme");
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.theme).toBe("system");
        });
    });
    describe("Theme Setting", ()=>{
        it("sets light theme correctly", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("light");
            });
            expect(result.current.theme).toBe("light");
            expect(result.current.isDark).toBe(false);
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("aclue_theme", "light");
            expect(mockDocumentElement.classList.remove).toHaveBeenCalledWith("dark");
        });
        it("sets dark theme correctly", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("dark");
            });
            expect(result.current.theme).toBe("dark");
            expect(result.current.isDark).toBe(true);
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("aclue_theme", "dark");
            expect(mockDocumentElement.classList.add).toHaveBeenCalledWith("dark");
        });
        it("sets system theme correctly", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("system");
            });
            expect(result.current.theme).toBe("system");
            expect(mockLocalStorage.setItem).toHaveBeenCalledWith("aclue_theme", "system");
        });
    });
    describe("System Theme Detection", ()=>{
        it("detects dark system preference", ()=>{
            mockMatchMedia.mockImplementation((query)=>({
                    matches: query === "(prefers-color-scheme: dark)",
                    media: query,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.isDark).toBe(true);
            expect(mockDocumentElement.classList.add).toHaveBeenCalledWith("dark");
        });
        it("detects light system preference", ()=>{
            mockMatchMedia.mockImplementation((query)=>({
                    matches: false,
                    media: query,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.isDark).toBe(false);
            expect(mockDocumentElement.classList.remove).toHaveBeenCalledWith("dark");
        });
        it("listens for system theme changes", ()=>{
            const mockAddEventListener = jest.fn();
            const mockRemoveEventListener = jest.fn();
            mockMatchMedia.mockImplementation(()=>({
                    matches: false,
                    media: "(prefers-color-scheme: dark)",
                    addEventListener: mockAddEventListener,
                    removeEventListener: mockRemoveEventListener,
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { unmount } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(mockAddEventListener).toHaveBeenCalledWith("change", expect.any(Function));
            unmount();
            expect(mockRemoveEventListener).toHaveBeenCalledWith("change", expect.any(Function));
        });
        it("updates theme when system preference changes", ()=>{
            let changeHandler;
            mockMatchMedia.mockImplementation(()=>({
                    matches: false,
                    media: "(prefers-color-scheme: dark)",
                    addEventListener: jest.fn((event, handler)=>{
                        if (event === "change") {
                            changeHandler = handler;
                        }
                    }),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.isDark).toBe(false);
            // Simulate system theme change to dark
            (0, _react.act)(()=>{
                if (changeHandler) {
                    changeHandler({
                        matches: true
                    });
                }
            });
            expect(result.current.isDark).toBe(true);
        });
        it("ignores system changes when not on system theme", ()=>{
            let changeHandler;
            mockMatchMedia.mockImplementation(()=>({
                    matches: false,
                    media: "(prefers-color-scheme: dark)",
                    addEventListener: jest.fn((event, handler)=>{
                        if (event === "change") {
                            changeHandler = handler;
                        }
                    }),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            // Set to manual dark mode
            (0, _react.act)(()=>{
                result.current.setTheme("dark");
            });
            expect(result.current.isDark).toBe(true);
            // Simulate system theme change - should be ignored
            (0, _react.act)(()=>{
                if (changeHandler) {
                    changeHandler({
                        matches: false
                    });
                }
            });
            expect(result.current.isDark).toBe(true); // Should remain dark
        });
    });
    describe("Theme Toggle", ()=>{
        it("toggles from light to dark", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("light");
            });
            (0, _react.act)(()=>{
                result.current.toggleTheme();
            });
            expect(result.current.theme).toBe("dark");
            expect(result.current.isDark).toBe(true);
        });
        it("toggles from dark to light", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("dark");
            });
            (0, _react.act)(()=>{
                result.current.toggleTheme();
            });
            expect(result.current.theme).toBe("light");
            expect(result.current.isDark).toBe(false);
        });
        it("toggles from system to opposite of current state", ()=>{
            // Mock system as light
            mockMatchMedia.mockImplementation((query)=>({
                    matches: false,
                    media: query,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.theme).toBe("system");
            expect(result.current.isDark).toBe(false);
            (0, _react.act)(()=>{
                result.current.toggleTheme();
            });
            expect(result.current.theme).toBe("dark");
            expect(result.current.isDark).toBe(true);
        });
        it("toggles from system dark to light", ()=>{
            // Mock system as dark
            mockMatchMedia.mockImplementation((query)=>({
                    matches: query === "(prefers-color-scheme: dark)",
                    media: query,
                    addEventListener: jest.fn(),
                    removeEventListener: jest.fn(),
                    onchange: null,
                    addListener: jest.fn(),
                    removeListener: jest.fn(),
                    dispatchEvent: jest.fn()
                }));
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            expect(result.current.theme).toBe("system");
            expect(result.current.isDark).toBe(true);
            (0, _react.act)(()=>{
                result.current.toggleTheme();
            });
            expect(result.current.theme).toBe("light");
            expect(result.current.isDark).toBe(false);
        });
    });
    describe("DOM Updates", ()=>{
        it("adds dark class when dark mode is enabled", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("dark");
            });
            expect(mockDocumentElement.classList.add).toHaveBeenCalledWith("dark");
        });
        it("removes dark class when dark mode is disabled", ()=>{
            const { result } = (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            (0, _react.act)(()=>{
                result.current.setTheme("light");
            });
            expect(mockDocumentElement.classList.remove).toHaveBeenCalledWith("dark");
        });
    });
    describe("Server-Side Rendering", ()=>{
        it("handles missing window object gracefully", ()=>{
            const originalWindow = global.window;
            // @ts-ignore
            delete global.window;
            expect(()=>{
                (0, _react.renderHook)(()=>(0, _useDarkMode.useDarkMode)());
            }).not.toThrow();
            global.window = originalWindow;
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phY2svRG9jdW1lbnRzL2FjbHVlLXByZXByb2Qvd2ViL3NyYy9ob29rcy9fX3Rlc3RzX18vdXNlRGFya01vZGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJIb29rLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IHVzZURhcmtNb2RlIH0gZnJvbSAnLi4vdXNlRGFya01vZGUnO1xuXG4vLyBNb2NrIGxvY2FsU3RvcmFnZVxuY29uc3QgbW9ja0xvY2FsU3RvcmFnZSA9IHtcbiAgZ2V0SXRlbTogamVzdC5mbigpLFxuICBzZXRJdGVtOiBqZXN0LmZuKCksXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcbiAgY2xlYXI6IGplc3QuZm4oKSxcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbG9jYWxTdG9yYWdlJywge1xuICB2YWx1ZTogbW9ja0xvY2FsU3RvcmFnZSxcbn0pO1xuXG4vLyBNb2NrIG1hdGNoTWVkaWFcbmNvbnN0IG1vY2tNYXRjaE1lZGlhID0gamVzdC5mbigpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogbW9ja01hdGNoTWVkaWEsXG59KTtcblxuLy8gTW9jayBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbmNvbnN0IG1vY2tEb2N1bWVudEVsZW1lbnQgPSB7XG4gIGNsYXNzTGlzdDoge1xuICAgIGFkZDogamVzdC5mbigpLFxuICAgIHJlbW92ZTogamVzdC5mbigpLFxuICB9LFxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ2RvY3VtZW50RWxlbWVudCcsIHtcbiAgdmFsdWU6IG1vY2tEb2N1bWVudEVsZW1lbnQsXG59KTtcblxuZGVzY3JpYmUoJ3VzZURhcmtNb2RlJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBtb2NrTG9jYWxTdG9yYWdlLmdldEl0ZW0ubW9ja1JldHVyblZhbHVlKG51bGwpO1xuICAgIFxuICAgIC8vIERlZmF1bHQgbWF0Y2hNZWRpYSBtb2NrXG4gICAgbW9ja01hdGNoTWVkaWEubW9ja0ltcGxlbWVudGF0aW9uKChxdWVyeSkgPT4gKHtcbiAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgbWVkaWE6IHF1ZXJ5LFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICB9KSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbml0aWFsIFN0YXRlJywgKCkgPT4ge1xuICAgIGl0KCdpbml0aWFsaXplcyB3aXRoIHN5c3RlbSB0aGVtZSBieSBkZWZhdWx0JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnc3lzdGVtJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNEYXJrKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdsb2FkcyBzYXZlZCB0aGVtZSBmcm9tIGxvY2FsU3RvcmFnZScsICgpID0+IHtcbiAgICAgIG1vY2tMb2NhbFN0b3JhZ2UuZ2V0SXRlbS5tb2NrUmV0dXJuVmFsdWUoJ2RhcmsnKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnZGFyaycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRGFyaykudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdpZ25vcmVzIGludmFsaWQgdGhlbWUgdmFsdWVzIGZyb20gbG9jYWxTdG9yYWdlJywgKCkgPT4ge1xuICAgICAgbW9ja0xvY2FsU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXR1cm5WYWx1ZSgnaW52YWxpZC10aGVtZScpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LnRoZW1lKS50b0JlKCdzeXN0ZW0nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RoZW1lIFNldHRpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3NldHMgbGlnaHQgdGhlbWUgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNldFRoZW1lKCdsaWdodCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnbGlnaHQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KG1vY2tMb2NhbFN0b3JhZ2Uuc2V0SXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2FjbHVlX3RoZW1lJywgJ2xpZ2h0Jyk7XG4gICAgICBleHBlY3QobW9ja0RvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZGFyaycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3NldHMgZGFyayB0aGVtZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0VGhlbWUoJ2RhcmsnKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudGhlbWUpLnRvQmUoJ2RhcmsnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QobW9ja0xvY2FsU3RvcmFnZS5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYWNsdWVfdGhlbWUnLCAnZGFyaycpO1xuICAgICAgZXhwZWN0KG1vY2tEb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2RhcmsnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzZXRzIHN5c3RlbSB0aGVtZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0VGhlbWUoJ3N5c3RlbScpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnc3lzdGVtJyk7XG4gICAgICBleHBlY3QobW9ja0xvY2FsU3RvcmFnZS5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYWNsdWVfdGhlbWUnLCAnc3lzdGVtJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTeXN0ZW0gVGhlbWUgRGV0ZWN0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdkZXRlY3RzIGRhcmsgc3lzdGVtIHByZWZlcmVuY2UnLCAoKSA9PiB7XG4gICAgICBtb2NrTWF0Y2hNZWRpYS5tb2NrSW1wbGVtZW50YXRpb24oKHF1ZXJ5KSA9PiAoe1xuICAgICAgICBtYXRjaGVzOiBxdWVyeSA9PT0gJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknLFxuICAgICAgICBtZWRpYTogcXVlcnksXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICBvbmNoYW5nZTogbnVsbCxcbiAgICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICAgICAgfSkpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRGFyaykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb2NrRG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdkYXJrJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV0ZWN0cyBsaWdodCBzeXN0ZW0gcHJlZmVyZW5jZScsICgpID0+IHtcbiAgICAgIG1vY2tNYXRjaE1lZGlhLm1vY2tJbXBsZW1lbnRhdGlvbigocXVlcnkpID0+ICh7XG4gICAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgICBtZWRpYTogcXVlcnksXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICBvbmNoYW5nZTogbnVsbCxcbiAgICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICAgICAgfSkpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRGFyaykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QobW9ja0RvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZGFyaycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2xpc3RlbnMgZm9yIHN5c3RlbSB0aGVtZSBjaGFuZ2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0FkZEV2ZW50TGlzdGVuZXIgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGplc3QuZm4oKTtcblxuICAgICAgbW9ja01hdGNoTWVkaWEubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgICBtZWRpYTogJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknLFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBtb2NrQWRkRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogbW9ja1JlbW92ZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgIG9uY2hhbmdlOiBudWxsLFxuICAgICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IHsgdW5tb3VudCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgZXhwZWN0KG1vY2tBZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY2hhbmdlJywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xuXG4gICAgICB1bm1vdW50KCk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVtb3ZlRXZlbnRMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2NoYW5nZScsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcbiAgICB9KTtcblxuICAgIGl0KCd1cGRhdGVzIHRoZW1lIHdoZW4gc3lzdGVtIHByZWZlcmVuY2UgY2hhbmdlcycsICgpID0+IHtcbiAgICAgIGxldCBjaGFuZ2VIYW5kbGVyOiAoKGV2ZW50OiBhbnkpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuXG4gICAgICBtb2NrTWF0Y2hNZWRpYS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICAgIG1lZGlhOiAnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScsXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKGV2ZW50LCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50ID09PSAnY2hhbmdlJykge1xuICAgICAgICAgICAgY2hhbmdlSGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgICBvbmNoYW5nZTogbnVsbCxcbiAgICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICAgICAgfSkpO1xuXG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRGFyaykudG9CZShmYWxzZSk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIHN5c3RlbSB0aGVtZSBjaGFuZ2UgdG8gZGFya1xuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGNoYW5nZUhhbmRsZXIpIHtcbiAgICAgICAgICBjaGFuZ2VIYW5kbGVyKHsgbWF0Y2hlczogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnaWdub3JlcyBzeXN0ZW0gY2hhbmdlcyB3aGVuIG5vdCBvbiBzeXN0ZW0gdGhlbWUnLCAoKSA9PiB7XG4gICAgICBsZXQgY2hhbmdlSGFuZGxlcjogKChldmVudDogYW55KSA9PiB2b2lkKSB8IHVuZGVmaW5lZDtcblxuICAgICAgbW9ja01hdGNoTWVkaWEubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgICAgICBtZWRpYTogJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknLFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKChldmVudCwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgIGlmIChldmVudCA9PT0gJ2NoYW5nZScpIHtcbiAgICAgICAgICAgIGNoYW5nZUhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIC8vIFNldCB0byBtYW51YWwgZGFyayBtb2RlXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC5zZXRUaGVtZSgnZGFyaycpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUodHJ1ZSk7XG5cbiAgICAgIC8vIFNpbXVsYXRlIHN5c3RlbSB0aGVtZSBjaGFuZ2UgLSBzaG91bGQgYmUgaWdub3JlZFxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGNoYW5nZUhhbmRsZXIpIHtcbiAgICAgICAgICBjaGFuZ2VIYW5kbGVyKHsgbWF0Y2hlczogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNEYXJrKS50b0JlKHRydWUpOyAvLyBTaG91bGQgcmVtYWluIGRhcmtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RoZW1lIFRvZ2dsZScsICgpID0+IHtcbiAgICBpdCgndG9nZ2xlcyBmcm9tIGxpZ2h0IHRvIGRhcmsnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0VGhlbWUoJ2xpZ2h0Jyk7XG4gICAgICB9KTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQudG9nZ2xlVGhlbWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudGhlbWUpLnRvQmUoJ2RhcmsnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgndG9nZ2xlcyBmcm9tIGRhcmsgdG8gbGlnaHQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0VGhlbWUoJ2RhcmsnKTtcbiAgICAgIH0pO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC50b2dnbGVUaGVtZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnbGlnaHQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3RvZ2dsZXMgZnJvbSBzeXN0ZW0gdG8gb3Bwb3NpdGUgb2YgY3VycmVudCBzdGF0ZScsICgpID0+IHtcbiAgICAgIC8vIE1vY2sgc3lzdGVtIGFzIGxpZ2h0XG4gICAgICBtb2NrTWF0Y2hNZWRpYS5tb2NrSW1wbGVtZW50YXRpb24oKHF1ZXJ5KSA9PiAoe1xuICAgICAgICBtYXRjaGVzOiBmYWxzZSxcbiAgICAgICAgbWVkaWE6IHF1ZXJ5LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnc3lzdGVtJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNEYXJrKS50b0JlKGZhbHNlKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQudG9nZ2xlVGhlbWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQudGhlbWUpLnRvQmUoJ2RhcmsnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgndG9nZ2xlcyBmcm9tIHN5c3RlbSBkYXJrIHRvIGxpZ2h0JywgKCkgPT4ge1xuICAgICAgLy8gTW9jayBzeXN0ZW0gYXMgZGFya1xuICAgICAgbW9ja01hdGNoTWVkaWEubW9ja0ltcGxlbWVudGF0aW9uKChxdWVyeSkgPT4gKHtcbiAgICAgICAgbWF0Y2hlczogcXVlcnkgPT09ICcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyxcbiAgICAgICAgbWVkaWE6IHF1ZXJ5LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgICAgb25jaGFuZ2U6IG51bGwsXG4gICAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnc3lzdGVtJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNEYXJrKS50b0JlKHRydWUpO1xuXG4gICAgICBhY3QoKCkgPT4ge1xuICAgICAgICByZXN1bHQuY3VycmVudC50b2dnbGVUaGVtZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC50aGVtZSkudG9CZSgnbGlnaHQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0RhcmspLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRE9NIFVwZGF0ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ2FkZHMgZGFyayBjbGFzcyB3aGVuIGRhcmsgbW9kZSBpcyBlbmFibGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlRGFya01vZGUoKSk7XG5cbiAgICAgIGFjdCgoKSA9PiB7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50LnNldFRoZW1lKCdkYXJrJyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tEb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2RhcmsnKTtcbiAgICB9KTtcblxuICAgIGl0KCdyZW1vdmVzIGRhcmsgY2xhc3Mgd2hlbiBkYXJrIG1vZGUgaXMgZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VEYXJrTW9kZSgpKTtcblxuICAgICAgYWN0KCgpID0+IHtcbiAgICAgICAgcmVzdWx0LmN1cnJlbnQuc2V0VGhlbWUoJ2xpZ2h0Jyk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tEb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2RhcmsnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NlcnZlci1TaWRlIFJlbmRlcmluZycsICgpID0+IHtcbiAgICBpdCgnaGFuZGxlcyBtaXNzaW5nIHdpbmRvdyBvYmplY3QgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsV2luZG93ID0gZ2xvYmFsLndpbmRvdztcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGRlbGV0ZSBnbG9iYWwud2luZG93O1xuXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICByZW5kZXJIb29rKCgpID0+IHVzZURhcmtNb2RlKCkpO1xuICAgICAgfSkubm90LnRvVGhyb3coKTtcblxuICAgICAgZ2xvYmFsLndpbmRvdyA9IG9yaWdpbmFsV2luZG93O1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJtb2NrTG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImplc3QiLCJmbiIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsInZhbHVlIiwibW9ja01hdGNoTWVkaWEiLCJ3cml0YWJsZSIsIm1vY2tEb2N1bWVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJkb2N1bWVudCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJxdWVyeSIsIm1hdGNoZXMiLCJtZWRpYSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25jaGFuZ2UiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsIml0IiwicmVzdWx0IiwicmVuZGVySG9vayIsInVzZURhcmtNb2RlIiwiZXhwZWN0IiwiY3VycmVudCIsInRoZW1lIiwidG9CZSIsImlzRGFyayIsImFjdCIsInNldFRoZW1lIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJtb2NrQWRkRXZlbnRMaXN0ZW5lciIsIm1vY2tSZW1vdmVFdmVudExpc3RlbmVyIiwidW5tb3VudCIsImFueSIsIkZ1bmN0aW9uIiwiY2hhbmdlSGFuZGxlciIsImV2ZW50IiwiaGFuZGxlciIsInRvZ2dsZVRoZW1lIiwib3JpZ2luYWxXaW5kb3ciLCJnbG9iYWwiLCJub3QiLCJ0b1Rocm93Il0sIm1hcHBpbmdzIjoiOzs7O3VCQUFnQzs2QkFDSjtBQUU1QixvQkFBb0I7QUFDcEIsTUFBTUEsbUJBQW1CO0lBQ3ZCQyxTQUFTQyxLQUFLQyxFQUFFO0lBQ2hCQyxTQUFTRixLQUFLQyxFQUFFO0lBQ2hCRSxZQUFZSCxLQUFLQyxFQUFFO0lBQ25CRyxPQUFPSixLQUFLQyxFQUFFO0FBQ2hCO0FBQ0FJLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUSxn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