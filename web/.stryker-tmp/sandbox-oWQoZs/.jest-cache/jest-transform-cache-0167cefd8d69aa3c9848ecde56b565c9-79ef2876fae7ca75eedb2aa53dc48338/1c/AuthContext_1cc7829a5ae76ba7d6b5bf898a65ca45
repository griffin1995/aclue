a60240c8f894a0ef99b87afaea024b1f
/**
 * aclue Authentication Context
 * 
 * Centralised authentication state management for the entire application.
 * Provides secure user session handling, JWT token management, and
 * authentication flows for login, registration, and logout.
 * 
 * Key Features:
 *   - Automatic token refresh and session persistence
 *   - Protected route authentication guards
 *   - Real-time user state synchronisation
 *   - PostHog analytics integration for user events
 *   - Comprehensive error handling and user feedback
 * 
 * State Management:
 *   - Uses useReducer for predictable state updates
 *   - Persists user data to localStorage for session continuity
 *   - Handles loading states during authentication operations
 * 
 * Usage:
 *   // In _app.tsx
 *   <AuthProvider>
 *     <Component {...pageProps} />
 *   </AuthProvider>
 * 
 *   // In components
 *   const { user, login, logout, isAuthenticated } = useAuth();
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthProvider: function() {
        return AuthProvider;
    },
    default: function() {
        return _default;
    },
    useAuth: function() {
        return useAuth;
    },
    useRequireAuth: function() {
        return useRequireAuth;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _router = require("next/router");
const _api = require("../lib/api");
const _config = require("../config");
const _reacthottoast = /*#__PURE__*/ _interop_require_default(require("react-hot-toast"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Initial authentication state on application load.
 * 
 * Sets default values for all auth state properties.
 * isLoading starts as true to prevent flash of unauthenticated content.
 */ const initialState = {
    user: null,
    isAuthenticated: false,
    isLoading: true,
    isInitialized: false,
    isLoggingOut: false,
    error: null
};
// ==============================================================================
// STATE REDUCER
// ==============================================================================
/**
 * Authentication state reducer for predictable state management.
 * 
 * Handles all authentication state changes through well-defined actions.
 * Ensures immutable state updates and consistent state transitions.
 * 
 * Parameters:
 *   state: Current authentication state
 *   action: Action to perform with optional payload
 * 
 * Returns:
 *   AuthState: New state after applying action
 */ const authReducer = (state, action)=>{
    switch(action.type){
        case "SET_LOADING":
            return {
                ...state,
                isLoading: action.payload
            };
        case "SET_USER":
            return {
                ...state,
                user: action.payload,
                isAuthenticated: !!action.payload,
                isLoading: false,
                error: null
            };
        case "SET_ERROR":
            return {
                ...state,
                error: action.payload,
                isLoading: false
            };
        case "SET_INITIALIZED":
            return {
                ...state,
                isInitialized: action.payload,
                isLoading: !action.payload
            };
        case "SET_LOGGING_OUT":
            return {
                ...state,
                isLoggingOut: action.payload
            };
        case "LOGOUT":
            return {
                ...initialState,
                isInitialized: true,
                isLoading: false,
                isLoggingOut: false
            };
        case "UPDATE_USER":
            return {
                ...state,
                user: state.user ? {
                    ...state.user,
                    ...action.payload
                } : null
            };
        default:
            return state; // No change for unknown actions
    }
};
// ==============================================================================
// CONTEXT CREATION
// ==============================================================================
/**
 * Authentication context for sharing auth state across the application.
 * 
 * Created with undefined default to force proper provider usage.
 * Components must be wrapped in AuthProvider to access context.
 */ const AuthContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
const AuthProvider = ({ children })=>{
    const [state, dispatch] = (0, _react.useReducer)(authReducer, initialState);
    const router = (0, _router.useRouter)();
    // ===========================================================================
    // AUTHENTICATION INITIALIZATION
    // ===========================================================================
    /**
   * Initialize authentication state on component mount.
   * 
   * Runs once when the app loads to:
   *   - Check for stored authentication tokens
   *   - Restore user session from localStorage
   *   - Verify tokens with backend
   *   - Handle token refresh if needed
   *   - Clear invalid sessions
   */ (0, _react.useEffect)(()=>{
        const initializeAuth = async ()=>{
            try {
                dispatch({
                    type: "SET_LOADING",
                    payload: true
                });
                // Check for stored access token
                const token = _api.tokenManager.getAccessToken();
                if (!token) {
                    // No token found - user not logged in
                    dispatch({
                        type: "SET_INITIALIZED",
                        payload: true
                    });
                    return;
                }
                // Restore user data from localStorage for immediate UI update
                const storedUser = localStorage.getItem(_config.appConfig.storage.user);
                if (storedUser) {
                    try {
                        const user = JSON.parse(storedUser);
                        dispatch({
                            type: "SET_USER",
                            payload: user
                        });
                    } catch (parseError) {
                        console.warn("Invalid stored user data, clearing localStorage:", parseError);
                        // Clear corrupted data
                        localStorage.removeItem(_config.appConfig.storage.user);
                    }
                }
                // Verify token with backend and get fresh user data
                try {
                    const response = await _api.api.auth.getCurrentUser();
                    // Handle different response formats - sometimes data is wrapped, sometimes direct
                    const userData = response.data || response;
                    dispatch({
                        type: "SET_USER",
                        payload: userData
                    });
                    // Update stored user data with fresh backend data
                    localStorage.setItem(_config.appConfig.storage.user, JSON.stringify(userData));
                } catch (error) {
                    console.error("Token verification failed:", error);
                    // Only try to refresh if we have a refresh token
                    const refreshToken = _api.tokenManager.getRefreshToken();
                    if (refreshToken) {
                        try {
                            await refreshTokenInternal();
                        } catch (refreshError) {
                            console.error("Token refresh failed:", refreshError);
                            await logoutInternal();
                        }
                    } else {
                        console.warn("No refresh token available, clearing session");
                        await logoutInternal();
                    }
                }
            } catch (error) {
                console.error("Auth initialization failed:", error);
                await logoutInternal();
            } finally{
                dispatch({
                    type: "SET_INITIALIZED",
                    payload: true
                });
            }
        };
        initializeAuth();
    }, []);
    // ===========================================================================
    // INTERNAL HELPER FUNCTIONS
    // ===========================================================================
    /**
   * Internal logout function for cleanup without API calls.
   * 
   * Used during error recovery and session cleanup.
   * Clears all stored data and resets auth state.
   */ const logoutInternal = async ()=>{
        try {
            // Clear tokens from memory and localStorage
            _api.tokenManager.clearTokens();
            // Clear all stored authentication data
            Object.values(_config.appConfig.storage).forEach((key)=>{
                localStorage.removeItem(key);
            });
            // Reset auth state
            dispatch({
                type: "LOGOUT"
            });
        } catch (error) {
            console.error("Logout error:", error);
        }
    };
    /**
   * Internal token refresh function for session renewal.
   * 
   * Uses stored refresh token to obtain new access token.
   * Updates stored tokens with new values.
   */ const refreshTokenInternal = async ()=>{
        const refreshToken = _api.tokenManager.getRefreshToken();
        if (!refreshToken) {
            throw new Error("No refresh token available");
        }
        // Call refresh endpoint
        const response = await _api.api.auth.refresh({
            refresh_token: refreshToken
        });
        const { access_token, refresh_token: newRefreshToken } = response.data;
        // Store new tokens
        _api.tokenManager.setTokens(access_token, newRefreshToken);
    };
    // Login function
    const login = async (credentials)=>{
        try {
            dispatch({
                type: "SET_LOADING",
                payload: true
            });
            dispatch({
                type: "SET_ERROR",
                payload: null
            });
            const response = await _api.api.auth.login(credentials);
            const { access_token, refresh_token, user } = response.data;
            // Store tokens
            _api.tokenManager.setTokens(access_token, refresh_token);
            // Store user data
            localStorage.setItem(_config.appConfig.storage.user, JSON.stringify(user));
            // Update state
            dispatch({
                type: "SET_USER",
                payload: user
            });
            // Track login event with PostHog
            try {
                const { trackEvent, identifyUser } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../lib/analytics")));
                // Identify the user
                identifyUser(user.id, {
                    email: user.email,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    subscription_tier: user.subscription_tier
                });
                // Track login event
                trackEvent("user_login", {
                    method: "email",
                    user_id: user.id,
                    timestamp: new Date().toISOString()
                });
            } catch (trackingError) {
                console.warn("Failed to track login event:", trackingError);
            }
            _reacthottoast.default.success(_config.appConfig.success.login);
        } catch (error) {
            console.error("Login error:", error);
            const errorMessage = error.message || _config.appConfig.errors.unknown;
            dispatch({
                type: "SET_ERROR",
                payload: errorMessage
            });
            _reacthottoast.default.error(errorMessage);
            throw error;
        }
    };
    // Register function
    const register = async (userData)=>{
        try {
            dispatch({
                type: "SET_LOADING",
                payload: true
            });
            dispatch({
                type: "SET_ERROR",
                payload: null
            });
            const response = await _api.api.auth.register(userData);
            const { access_token, refresh_token, user } = response.data;
            // Store tokens
            _api.tokenManager.setTokens(access_token, refresh_token);
            // Store user data
            localStorage.setItem(_config.appConfig.storage.user, JSON.stringify(user));
            // Update state
            dispatch({
                type: "SET_USER",
                payload: user
            });
            // Track registration event with PostHog
            try {
                const { trackEvent, identifyUser } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../lib/analytics")));
                // Identify the user
                identifyUser(user.id, {
                    email: user.email,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    created_at: user.created_at,
                    subscription_tier: user.subscription_tier
                });
                // Track registration event
                trackEvent("user_register", {
                    method: "email",
                    marketing_consent: userData.marketing_consent,
                    user_id: user.id,
                    source: "web",
                    timestamp: new Date().toISOString()
                });
            } catch (trackingError) {
                console.warn("Failed to track registration event:", trackingError);
            }
            _reacthottoast.default.success(_config.appConfig.success.register);
        } catch (error) {
            console.error("Registration error:", error);
            const errorMessage = error.message || _config.appConfig.errors.unknown;
            dispatch({
                type: "SET_ERROR",
                payload: errorMessage
            });
            _reacthottoast.default.error(errorMessage);
            throw error;
        }
    };
    // Logout function
    const logout = async ()=>{
        try {
            dispatch({
                type: "SET_LOGGING_OUT",
                payload: true
            });
            dispatch({
                type: "SET_LOADING",
                payload: true
            });
            // Call logout API
            try {
                await _api.api.auth.logout();
            } catch (error) {
                console.warn("Logout API call failed:", error);
            }
            // Track logout event with PostHog
            if (state.user) {
                try {
                    const { trackEvent, analytics } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../lib/analytics")));
                    trackEvent("user_logout", {
                        user_id: state.user.id,
                        timestamp: new Date().toISOString()
                    });
                    // Reset PostHog user session
                    analytics.reset();
                } catch (trackingError) {
                    console.warn("Failed to track logout event:", trackingError);
                }
            }
            await logoutInternal();
            console.log("\uD83D\uDEAA Logout completed, redirecting to homepage...");
            _reacthottoast.default.success(_config.appConfig.success.logout);
            // Small delay to ensure state update completes before redirect
            setTimeout(()=>{
                console.log("\uD83D\uDEAA Executing redirect to homepage");
                router.replace("/");
            }, 100);
        } catch (error) {
            console.error("Logout error:", error);
            // Force logout even if API call fails
            await logoutInternal();
            setTimeout(()=>{
                router.replace("/");
            }, 100);
        }
    };
    // Refresh token function
    const refreshToken = async ()=>{
        try {
            await refreshTokenInternal();
        } catch (error) {
            console.error("Token refresh failed:", error);
            await logoutInternal();
            throw error;
        }
    };
    // Clear error function
    const clearError = ()=>{
        dispatch({
            type: "SET_ERROR",
            payload: null
        });
    };
    // Update user function
    const updateUser = (userData)=>{
        if (state.user) {
            const updatedUser = {
                ...state.user,
                ...userData
            };
            localStorage.setItem(_config.appConfig.storage.user, JSON.stringify(updatedUser));
            dispatch({
                type: "UPDATE_USER",
                payload: userData
            });
        }
    };
    const value = {
        ...state,
        login,
        register,
        logout,
        refreshToken,
        clearError,
        updateUser
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(AuthContext.Provider, {
        value: value,
        children: children
    });
};
const useAuth = ()=>{
    const context = (0, _react.useContext)(AuthContext);
    if (context === undefined) {
        throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
};
const useRequireAuth = (redirectTo = "/auth/login")=>{
    const { isAuthenticated, isInitialized } = useAuth();
    const router = (0, _router.useRouter)();
    (0, _react.useEffect)(()=>{
        if (isInitialized && !isAuthenticated) {
            const currentPath = router.asPath;
            const redirectUrl = `${redirectTo}?redirect=${encodeURIComponent(currentPath)}`;
            router.replace(redirectUrl);
        }
    }, [
        isAuthenticated,
        isInitialized,
        router,
        redirectTo
    ]);
    return {
        isAuthenticated,
        isInitialized
    };
};
const _default = AuthContext;

//# sourceMappingURL=data:application/json;base64,