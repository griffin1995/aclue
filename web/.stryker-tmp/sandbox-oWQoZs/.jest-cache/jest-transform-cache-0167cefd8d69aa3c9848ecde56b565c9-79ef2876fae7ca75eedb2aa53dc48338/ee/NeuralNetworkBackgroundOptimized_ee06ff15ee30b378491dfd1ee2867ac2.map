{"version":3,"names":["cov_27uvwgl88b","actualCoverage","s","NeuralNetworkBackgroundOptimized","f","default","_default","nodeCount","defaultNodeCount","b","connectionDistance","animationSpeed","colors","primary","secondary","accent","connections","performanceMode","canvasRef","_react","useRef","animationRef","nodesRef","lastFrameTimeRef","frameCountRef","fpsRef","spatialGridRef","Map","connectionCacheRef","isVisibleRef","dimensions","setDimensions","useState","width","height","perfConfig","high","fps","nodeMultiplier","cacheConnections","balanced","low","isMobile","window","innerWidth","Math","floor","targetFrameTime","GRID_SIZE","getGridKey","x","y","gridX","gridY","getNeighboringCells","cells","dx","dy","push","updateSpatialGrid","useCallback","newGrid","current","forEach","node","key","has","set","get","gridIndex","length","hexToRgba","hex","alpha","r","parseInt","slice","g","useEffect","updateDimensions","innerHeight","resizeTimer","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","handleVisibilityChange","document","hidden","undefined","performance","now","animate","nodes","nodeTypes","i","id","random","vx","vy","size","opacity","pulsePhase","PI","type","clear","findConnections","cached","processed","Set","nodeA","indexA","neighborCells","cellKey","nodesInCell","nodeB","pairKey","add","distance","sqrt","max","from","to","strength","currentTime","deltaTime","requestAnimationFrame","canvas","ctx","getContext","fillStyle","fillRect","speedMultiplier","min","sin","lineWidth","connection","beginPath","moveTo","lineTo","strokeStyle","stroke","arc","color","fill","avgFrameTime","round","cancelAnimationFrame","_jsxruntime","jsx","ref","className","style","zIndex","background","willChange","transform"],"sources":["/home/jack/Documents/aclue-preprod/web/src/components/ui/NeuralNetworkBackgroundOptimized.tsx"],"sourcesContent":["'use client'\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\n\ninterface Node {\n  id: number;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  size: number;\n  opacity: number;\n  pulsePhase: number;\n  type: 'primary' | 'secondary' | 'accent';\n  gridIndex?: number; // For spatial indexing\n}\n\ninterface Connection {\n  from: Node;\n  to: Node;\n  opacity: number;\n  strength: number;\n}\n\ninterface NeuralNetworkBackgroundProps {\n  nodeCount?: number;\n  connectionDistance?: number;\n  animationSpeed?: number;\n  colors?: {\n    primary: string;\n    secondary: string;\n    accent: string;\n    connections: string;\n  };\n  performanceMode?: 'high' | 'balanced' | 'low';\n}\n\n/**\n * Optimized Neural Network Background Component\n *\n * Performance improvements:\n * - Adaptive frame rate based on device capabilities\n * - Spatial indexing for connection calculations\n * - Visibility-based rendering (pauses when tab is hidden)\n * - Mobile-optimized node count\n * - Memory-efficient connection caching\n * - RequestIdleCallback for non-critical updates\n * - Reduced calculations through grid-based spatial partitioning\n */\nexport const NeuralNetworkBackgroundOptimized: React.FC<NeuralNetworkBackgroundProps> = ({\n  nodeCount: defaultNodeCount = 80,\n  connectionDistance = 150,\n  animationSpeed = 0.5,\n  colors = {\n    primary: '#3b82f6',\n    secondary: '#8b5cf6',\n    accent: '#06b6d4',\n    connections: '#3b82f6'\n  },\n  performanceMode = 'balanced'\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const nodesRef = useRef<Node[]>([]);\n  const lastFrameTimeRef = useRef<number>(0);\n  const frameCountRef = useRef<number>(0);\n  const fpsRef = useRef<number>(60);\n  const spatialGridRef = useRef<Map<string, Node[]>>(new Map());\n  const connectionCacheRef = useRef<Map<string, Connection[]>>(new Map());\n  const isVisibleRef = useRef<boolean>(true);\n\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  // Performance configuration based on mode\n  const perfConfig = {\n    high: { fps: 60, nodeMultiplier: 1, cacheConnections: false },\n    balanced: { fps: 30, nodeMultiplier: 0.7, cacheConnections: true },\n    low: { fps: 15, nodeMultiplier: 0.4, cacheConnections: true }\n  }[performanceMode];\n\n  // Detect mobile and reduce node count\n  const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\n  const nodeCount = Math.floor(\n    (isMobile ? defaultNodeCount * 0.5 : defaultNodeCount) * perfConfig.nodeMultiplier\n  );\n\n  // Target frame time based on desired FPS\n  const targetFrameTime = 1000 / perfConfig.fps;\n\n  // Grid size for spatial partitioning\n  const GRID_SIZE = connectionDistance;\n\n  /**\n   * Get grid key for spatial indexing\n   */\n  const getGridKey = (x: number, y: number): string => {\n    const gridX = Math.floor(x / GRID_SIZE);\n    const gridY = Math.floor(y / GRID_SIZE);\n    return `${gridX},${gridY}`;\n  };\n\n  /**\n   * Get neighboring grid cells for connection search\n   */\n  const getNeighboringCells = (x: number, y: number): string[] => {\n    const gridX = Math.floor(x / GRID_SIZE);\n    const gridY = Math.floor(y / GRID_SIZE);\n    const cells: string[] = [];\n\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        cells.push(`${gridX + dx},${gridY + dy}`);\n      }\n    }\n\n    return cells;\n  };\n\n  /**\n   * Update spatial grid with node positions\n   */\n  const updateSpatialGrid = useCallback(() => {\n    const newGrid = new Map<string, Node[]>();\n\n    nodesRef.current.forEach(node => {\n      const key = getGridKey(node.x, node.y);\n      if (!newGrid.has(key)) {\n        newGrid.set(key, []);\n      }\n      newGrid.get(key)!.push(node);\n      node.gridIndex = newGrid.get(key)!.length - 1;\n    });\n\n    spatialGridRef.current = newGrid;\n  }, []);\n\n  /**\n   * Convert hex to rgba\n   */\n  const hexToRgba = useCallback((hex: string, alpha: number): string => {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }, []);\n\n  /**\n   * Handle window resize\n   */\n  useEffect(() => {\n    const updateDimensions = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    updateDimensions();\n\n    // Debounced resize handler\n    let resizeTimer: NodeJS.Timeout;\n    const handleResize = () => {\n      clearTimeout(resizeTimer);\n      resizeTimer = setTimeout(updateDimensions, 250);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      clearTimeout(resizeTimer);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  /**\n   * Handle visibility change\n   */\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      isVisibleRef.current = !document.hidden;\n\n      if (!document.hidden && animationRef.current === undefined) {\n        // Resume animation when tab becomes visible\n        lastFrameTimeRef.current = performance.now();\n        animate();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n\n  /**\n   * Initialize nodes\n   */\n  useEffect(() => {\n    if (dimensions.width === 0 || dimensions.height === 0) return;\n\n    const nodes: Node[] = [];\n    const nodeTypes: Array<'primary' | 'secondary' | 'accent'> = ['primary', 'secondary', 'accent'];\n\n    for (let i = 0; i < nodeCount; i++) {\n      nodes.push({\n        id: i,\n        x: Math.random() * dimensions.width,\n        y: Math.random() * dimensions.height,\n        vx: (Math.random() - 0.5) * animationSpeed,\n        vy: (Math.random() - 0.5) * animationSpeed,\n        size: Math.random() * 4 + 2,\n        opacity: Math.random() * 0.7 + 0.3,\n        pulsePhase: Math.random() * Math.PI * 2,\n        type: nodeTypes[Math.floor(Math.random() * nodeTypes.length)] as \"primary\" | \"secondary\" | \"accent\"\n      });\n    }\n\n    nodesRef.current = nodes;\n    updateSpatialGrid();\n\n    // Clear connection cache when nodes change\n    connectionCacheRef.current.clear();\n  }, [dimensions, nodeCount, animationSpeed, updateSpatialGrid]);\n\n  /**\n   * Find connections using spatial partitioning\n   */\n  const findConnections = useCallback((): Connection[] => {\n    // Check cache first if enabled\n    if (perfConfig.cacheConnections && frameCountRef.current % 5 !== 0) {\n      const cached = connectionCacheRef.current.get('current');\n      if (cached) return cached;\n    }\n\n    const connections: Connection[] = [];\n    const processed = new Set<string>();\n\n    nodesRef.current.forEach((nodeA, indexA) => {\n      const neighborCells = getNeighboringCells(nodeA.x, nodeA.y);\n\n      neighborCells.forEach(cellKey => {\n        const nodesInCell = spatialGridRef.current.get(cellKey) || [];\n\n        nodesInCell.forEach(nodeB => {\n          if (nodeA.id >= nodeB.id) return; // Avoid duplicates\n\n          const pairKey = `${nodeA.id}-${nodeB.id}`;\n          if (processed.has(pairKey)) return;\n          processed.add(pairKey);\n\n          const dx = nodeA.x - nodeB.x;\n          const dy = nodeA.y - nodeB.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < connectionDistance) {\n            const opacity = Math.max(0, 1 - distance / connectionDistance);\n            connections.push({\n              from: nodeA,\n              to: nodeB,\n              opacity: opacity * 0.3,\n              strength: opacity\n            });\n          }\n        });\n      });\n    });\n\n    // Cache connections if enabled\n    if (perfConfig.cacheConnections) {\n      connectionCacheRef.current.set('current', connections);\n    }\n\n    return connections;\n  }, [connectionDistance, perfConfig.cacheConnections]);\n\n  /**\n   * Animation loop\n   */\n  const animate = useCallback(() => {\n    if (!canvasRef.current || dimensions.width === 0 || dimensions.height === 0) return;\n\n    // Pause animation when tab is hidden\n    if (!isVisibleRef.current) {\n      animationRef.current = undefined;\n      return;\n    }\n\n    const currentTime = performance.now();\n    const deltaTime = currentTime - lastFrameTimeRef.current;\n\n    // Frame rate limiting\n    if (deltaTime < targetFrameTime) {\n      animationRef.current = requestAnimationFrame(animate);\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpha: false });\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = 'transparent';\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n\n    // Update nodes with frame-independent movement\n    const speedMultiplier = deltaTime / 16.67; // Normalize to 60fps baseline\n\n    nodesRef.current.forEach(node => {\n      // Update position\n      node.x += node.vx * speedMultiplier;\n      node.y += node.vy * speedMultiplier;\n\n      // Bounce off edges\n      if (node.x <= 0 || node.x >= dimensions.width) {\n        node.vx *= -1;\n        node.x = Math.max(0, Math.min(dimensions.width, node.x));\n      }\n      if (node.y <= 0 || node.y >= dimensions.height) {\n        node.vy *= -1;\n        node.y = Math.max(0, Math.min(dimensions.height, node.y));\n      }\n\n      // Update pulse (slower for better performance)\n      node.pulsePhase += 0.01 * speedMultiplier;\n      node.opacity = 0.3 + 0.4 * Math.sin(node.pulsePhase);\n    });\n\n    // Update spatial grid periodically\n    if (frameCountRef.current % 10 === 0) {\n      updateSpatialGrid();\n    }\n\n    // Find and draw connections\n    const connections = findConnections();\n\n    // Draw connections with reduced quality for performance\n    ctx.lineWidth = 1;\n    connections.forEach(connection => {\n      ctx.beginPath();\n      ctx.moveTo(connection.from.x, connection.from.y);\n      ctx.lineTo(connection.to.x, connection.to.y);\n\n      // Simplified gradient for performance\n      ctx.strokeStyle = hexToRgba(colors.connections, connection.opacity);\n      ctx.stroke();\n    });\n\n    // Draw nodes with reduced effects\n    nodesRef.current.forEach(node => {\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\n\n      // Get color based on type\n      let color = colors.primary;\n      if (node.type === 'secondary') color = colors.secondary;\n      if (node.type === 'accent') color = colors.accent;\n\n      // Simple fill without gradient for performance\n      ctx.fillStyle = hexToRgba(color, node.opacity);\n      ctx.fill();\n    });\n\n    // Update frame tracking\n    lastFrameTimeRef.current = currentTime;\n    frameCountRef.current++;\n\n    // Calculate actual FPS periodically\n    if (frameCountRef.current % 60 === 0) {\n      const avgFrameTime = deltaTime;\n      fpsRef.current = Math.round(1000 / avgFrameTime);\n    }\n\n    animationRef.current = requestAnimationFrame(animate);\n  }, [\n    dimensions,\n    colors,\n    targetFrameTime,\n    updateSpatialGrid,\n    findConnections,\n    hexToRgba\n  ]);\n\n  /**\n   * Start animation\n   */\n  useEffect(() => {\n    if (!canvasRef.current || dimensions.width === 0 || dimensions.height === 0) return;\n\n    const canvas = canvasRef.current;\n    canvas.width = dimensions.width;\n    canvas.height = dimensions.height;\n\n    lastFrameTimeRef.current = performance.now();\n    animate();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [dimensions, animate]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed inset-0 w-full h-full pointer-events-none\"\n      style={{\n        zIndex: -1,\n        background: 'radial-gradient(ellipse at center, rgba(59, 130, 246, 0.05) 0%, rgba(139, 92, 246, 0.05) 35%, rgba(6, 182, 212, 0.05) 70%, transparent 100%)',\n        willChange: 'transform',\n        transform: 'translateZ(0)', // Force GPU acceleration\n      }}\n      aria-hidden=\"true\"\n    />\n  );\n};\n\nexport default NeuralNetworkBackgroundOptimized;"],"mappingsgD;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;EA7WnCC,gCAAgC,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAhCC,gCAAA;;EA6WbE,OAAgD,WAAAA,CAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAhDI,QAAA;;;;;;;;yEA5ZgE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CzD,MAAMH,gCAAA,GAA2EA,CAAC;EACvFI,SAAA,EAAWC,gBAAA;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,WAAmB,EAAE;EAChCC,kBAAA;EAAA;EAAA,CAAAV,cAAA,GAAAS,CAAA,WAAqB,GAAG;EACxBE,cAAA;EAAA;EAAA,CAAAX,cAAA,GAAAS,CAAA,WAAiB,GAAG;EACpBG,MAAA;EAAA;EAAA,CAAAZ,cAAA,GAAAS,CAAA,WAAS;IACPI,OAAA,EAAS;IACTC,SAAA,EAAW;IACXC,MAAA,EAAQ;IACRC,WAAA,EAAa;EACf,CAAC;EACDC,eAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAS,CAAA,WAAkB,UAAU;AAAA,CAC7B;EAAA;EAAAT,cAAA,GAAAI,CAAA;EACC,MAAMc,SAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAY,IAAAiB,MAAA,CAAAC,MAAM,EAAoB;EAC5C,MAAMC,YAAA;EAAA;EAAA,CAAArB,cAAA,GAAAE,CAAA,QAAe,IAAAiB,MAAA,CAAAC,MAAM;EAC3B,MAAME,QAAA;EAAA;EAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAW,IAAAiB,MAAA,CAAAC,MAAM,EAAS,EAAE;EAClC,MAAMG,gBAAA;EAAA;EAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAmB,IAAAiB,MAAA,CAAAC,MAAM,EAAS;EACxC,MAAMI,aAAA;EAAA;EAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAgB,IAAAiB,MAAA,CAAAC,MAAM,EAAS;EACrC,MAAMK,MAAA;EAAA;EAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAS,IAAAiB,MAAA,CAAAC,MAAM,EAAS;EAC9B,MAAMM,cAAA;EAAA;EAAA,CAAA1B,cAAA,GAAAE,CAAA,QAAiB,IAAAiB,MAAA,CAAAC,MAAM,EAAsB,IAAIO,GAAA;EACvD,MAAMC,kBAAA;EAAA;EAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAqB,IAAAiB,MAAA,CAAAC,MAAM,EAA4B,IAAIO,GAAA;EACjE,MAAME,YAAA;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAe,IAAAiB,MAAA,CAAAC,MAAM,EAAU;EAErC,MAAM,CAACU,UAAA,EAAYC,aAAA,CAAc;EAAA;EAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAG,IAAAiB,MAAA,CAAAa,QAAQ,EAAC;IAAEC,KAAA,EAAO;IAAGC,MAAA,EAAQ;EAAE;EAEnE;EACA,MAAMC,UAAA;EAAA;EAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAa;IACjBkC,IAAA,EAAM;MAAEC,GAAA,EAAK;MAAIC,cAAA,EAAgB;MAAGC,gBAAA,EAAkB;IAAM;IAC5DC,QAAA,EAAU;MAAEH,GAAA,EAAK;MAAIC,cAAA,EAAgB;MAAKC,gBAAA,EAAkB;IAAK;IACjEE,GAAA,EAAK;MAAEJ,GAAA,EAAK;MAAIC,cAAA,EAAgB;MAAKC,gBAAA,EAAkB;IAAK;EAC9D,CAAC,CAACtB,eAAA,CAAgB;EAElB;EACA,MAAMyB,QAAA;EAAA;EAAA,CAAA1C,cAAA,GAAAE,CAAA;EAAW;EAAA,CAAAF,cAAA,GAAAS,CAAA,kBAAOkC,MAAA,KAAW;EAAA;EAAA,CAAA3C,cAAA,GAAAS,CAAA,WAAekC,MAAA,CAAOC,UAAU,GAAG;EACtE,MAAMrC,SAAA;EAAA;EAAA,CAAAP,cAAA,GAAAE,CAAA,QAAY2C,IAAA,CAAKC,KAAK,CAC1B,CAACJ,QAAA;EAAA;EAAA,CAAA1C,cAAA,GAAAS,CAAA,WAAWD,gBAAA,GAAmB;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,WAAMD,gBAAe,KAAK2B,UAAA,CAAWG,cAAc;EAGpF;EACA,MAAMS,eAAA;EAAA;EAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAkB,OAAOiC,UAAA,CAAWE,GAAG;EAE7C;EACA,MAAMW,SAAA;EAAA;EAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAYQ,kBAAA;EAElB;;;EAAA;EAAAV,cAAA,GAAAE,CAAA;EAGA,MAAM+C,UAAA,GAAaA,CAACC,CAAA,EAAWC,CAAA;IAAA;IAAAnD,cAAA,GAAAI,CAAA;IAC7B,MAAMgD,KAAA;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,QAAQ2C,IAAA,CAAKC,KAAK,CAACI,CAAA,GAAIF,SAAA;IAC7B,MAAMK,KAAA;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAQ2C,IAAA,CAAKC,KAAK,CAACK,CAAA,GAAIH,SAAA;IAAA;IAAAhD,cAAA,GAAAE,CAAA;IAC7B,OAAO,GAAGkD,KAAA,IAASC,KAAA,EAAO;EAC5B;EAEA;;;EAAA;EAAArD,cAAA,GAAAE,CAAA;EAGA,MAAMoD,mBAAA,GAAsBA,CAACJ,CAAA,EAAWC,CAAA;IAAA;IAAAnD,cAAA,GAAAI,CAAA;IACtC,MAAMgD,KAAA;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,QAAQ2C,IAAA,CAAKC,KAAK,CAACI,CAAA,GAAIF,SAAA;IAC7B,MAAMK,KAAA;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAQ2C,IAAA,CAAKC,KAAK,CAACK,CAAA,GAAIH,SAAA;IAC7B,MAAMO,KAAA;IAAA;IAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAkB,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAE1B,KAAK,IAAIsD,EAAA;IAAA;IAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAK,CAAC,IAAGsD,EAAA,IAAM,GAAGA,EAAA,IAAM;MAAA;MAAAxD,cAAA,GAAAE,CAAA;MAC/B,KAAK,IAAIuD,EAAA;MAAA;MAAA,CAAAzD,cAAA,GAAAE,CAAA,QAAK,CAAC,IAAGuD,EAAA,IAAM,GAAGA,EAAA,IAAM;QAAA;QAAAzD,cAAA,GAAAE,CAAA;QAC/BqD,KAAA,CAAMG,IAAI,CAAC,GAAGN,KAAA,GAAQI,EAAA,IAAMH,KAAA,GAAQI,EAAA,EAAI;MAC1C;IACF;IAAA;IAAAzD,cAAA,GAAAE,CAAA;IAEA,OAAOqD,KAAA;EACT;EAEA;;;EAGA,MAAMI,iBAAA;EAAA;EAAA,CAAA3D,cAAA,GAAAE,CAAA,QAAoB,IAAAiB,MAAA,CAAAyC,WAAW,EAAC;IAAA;IAAA5D,cAAA,GAAAI,CAAA;IACpC,MAAMyD,OAAA;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAU,IAAIyB,GAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IAEpBoB,QAAA,CAASwC,OAAO,CAACC,OAAO,CAACC,IAAA;MAAA;MAAAhE,cAAA,GAAAI,CAAA;MACvB,MAAM6D,GAAA;MAAA;MAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAM+C,UAAA,CAAWe,IAAA,CAAKd,CAAC,EAAEc,IAAA,CAAKb,CAAC;MAAA;MAAAnD,cAAA,GAAAE,CAAA;MACrC,IAAI,CAAC2D,OAAA,CAAQK,GAAG,CAACD,GAAA,GAAM;QAAA;QAAAjE,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QACrB2D,OAAA,CAAQM,GAAG,CAACF,GAAA,EAAK,EAAE;MACrB;MAAA;MAAA;QAAAjE,cAAA,GAAAS,CAAA;MAAA;MAAAT,cAAA,GAAAE,CAAA;MACA2D,OAAA,CAAQO,GAAG,CAACH,GAAA,EAAMP,IAAI,CAACM,IAAA;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MACvB8D,IAAA,CAAKK,SAAS,GAAGR,OAAA,CAAQO,GAAG,CAACH,GAAA,EAAMK,MAAM,GAAG;IAC9C;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAEAwB,cAAA,CAAeoC,OAAO,GAAGD,OAAA;EAC3B,GAAG,EAAE;EAEL;;;EAGA,MAAMU,SAAA;EAAA;EAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAY,IAAAiB,MAAA,CAAAyC,WAAW,EAAC,CAACY,GAAA,EAAaC,KAAA;IAAA;IAAAzE,cAAA,GAAAI,CAAA;IAC1C,MAAMsE,CAAA;IAAA;IAAA,CAAA1E,cAAA,GAAAE,CAAA,QAAIyE,QAAA,CAASH,GAAA,CAAII,KAAK,CAAC,GAAG,IAAI;IACpC,MAAMC,CAAA;IAAA;IAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAIyE,QAAA,CAASH,GAAA,CAAII,KAAK,CAAC,GAAG,IAAI;IACpC,MAAMnE,CAAA;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAIyE,QAAA,CAASH,GAAA,CAAII,KAAK,CAAC,GAAG,IAAI;IAAA;IAAA5E,cAAA,GAAAE,CAAA;IACpC,OAAO,QAAQwE,CAAA,KAAMG,CAAA,KAAMpE,CAAA,KAAMgE,KAAA,GAAQ;EAC3C,GAAG,EAAE;EAEL;;;EAAA;EAAAzE,cAAA,GAAAE,CAAA;EAGA,IAAAiB,MAAA,CAAA2D,SAAS,EAAC;IAAA;IAAA9E,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR,MAAM6E,gBAAA,GAAmBA,CAAA;MAAA;MAAA/E,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACvB6B,aAAA,CAAc;QACZE,KAAA,EAAOU,MAAA,CAAOC,UAAU;QACxBV,MAAA,EAAQS,MAAA,CAAOqC;MACjB;IACF;IAAA;IAAAhF,cAAA,GAAAE,CAAA;IAEA6E,gBAAA;IAEA;IACA,IAAIE,WAAA;IAAA;IAAAjF,cAAA,GAAAE,CAAA;IACJ,MAAMgF,YAAA,GAAeA,CAAA;MAAA;MAAAlF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACnBiF,YAAA,CAAaF,WAAA;MAAA;MAAAjF,cAAA,GAAAE,CAAA;MACb+E,WAAA,GAAcG,UAAA,CAAWL,gBAAA,EAAkB;IAC7C;IAAA;IAAA/E,cAAA,GAAAE,CAAA;IAEAyC,MAAA,CAAO0C,gBAAgB,CAAC,UAAUH,YAAA;IAAA;IAAAlF,cAAA,GAAAE,CAAA;IAClC,OAAO;MAAA;MAAAF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACLiF,YAAA,CAAaF,WAAA;MAAA;MAAAjF,cAAA,GAAAE,CAAA;MACbyC,MAAA,CAAO2C,mBAAmB,CAAC,UAAUJ,YAAA;IACvC;EACF,GAAG,EAAE;EAEL;;;EAAA;EAAAlF,cAAA,GAAAE,CAAA;EAGA,IAAAiB,MAAA,CAAA2D,SAAS,EAAC;IAAA;IAAA9E,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR,MAAMqF,sBAAA,GAAyBA,CAAA;MAAA;MAAAvF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAC7B2B,YAAA,CAAaiC,OAAO,GAAG,CAAC0B,QAAA,CAASC,MAAM;MAAA;MAAAzF,cAAA,GAAAE,CAAA;MAEvC;MAAI;MAAA,CAAAF,cAAA,GAAAS,CAAA,YAAC+E,QAAA,CAASC,MAAM;MAAA;MAAA,CAAAzF,cAAA,GAAAS,CAAA,WAAIY,YAAA,CAAayC,OAAO,KAAK4B,SAAA,GAAW;QAAA;QAAA1F,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC1D;QACAqB,gBAAA,CAAiBuC,OAAO,GAAG6B,WAAA,CAAYC,GAAG;QAAA;QAAA5F,cAAA,GAAAE,CAAA;QAC1C2F,OAAA;MACF;MAAA;MAAA;QAAA7F,cAAA,GAAAS,CAAA;MAAA;IACF;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAEAsF,QAAA,CAASH,gBAAgB,CAAC,oBAAoBE,sBAAA;IAAA;IAAAvF,cAAA,GAAAE,CAAA;IAC9C,OAAO,MAAM;MAAA;MAAAF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAsF,QAAA,CAASF,mBAAmB,CAAC,oBAAoBC,sBAAA;IAAA;EAChE,GAAG,EAAE;EAEL;;;EAAA;EAAAvF,cAAA,GAAAE,CAAA;EAGA,IAAAiB,MAAA,CAAA2D,SAAS,EAAC;IAAA;IAAA9E,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAqB,UAAA,CAAWG,KAAK,KAAK;IAAA;IAAA,CAAAjC,cAAA,GAAAS,CAAA,WAAKqB,UAAA,CAAWI,MAAM,KAAK,IAAG;MAAA;MAAAlC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEvD,MAAMqF,KAAA;IAAA;IAAA,CAAA9F,cAAA,GAAAE,CAAA,SAAgB,EAAE;IACxB,MAAM6F,SAAA;IAAA;IAAA,CAAA/F,cAAA,GAAAE,CAAA,SAAuD,CAAC,WAAW,aAAa,SAAS;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAE/F,KAAK,IAAI8F,CAAA;IAAA;IAAA,CAAAhG,cAAA,GAAAE,CAAA,SAAI,IAAG8F,CAAA,GAAIzF,SAAA,EAAWyF,CAAA,IAAK;MAAA;MAAAhG,cAAA,GAAAE,CAAA;MAClC4F,KAAA,CAAMpC,IAAI,CAAC;QACTuC,EAAA,EAAID,CAAA;QACJ9C,CAAA,EAAGL,IAAA,CAAKqD,MAAM,KAAKpE,UAAA,CAAWG,KAAK;QACnCkB,CAAA,EAAGN,IAAA,CAAKqD,MAAM,KAAKpE,UAAA,CAAWI,MAAM;QACpCiE,EAAA,EAAI,CAACtD,IAAA,CAAKqD,MAAM,KAAK,GAAE,IAAKvF,cAAA;QAC5ByF,EAAA,EAAI,CAACvD,IAAA,CAAKqD,MAAM,KAAK,GAAE,IAAKvF,cAAA;QAC5B0F,IAAA,EAAMxD,IAAA,CAAKqD,MAAM,KAAK,IAAI;QAC1BI,OAAA,EAASzD,IAAA,CAAKqD,MAAM,KAAK,MAAM;QAC/BK,UAAA,EAAY1D,IAAA,CAAKqD,MAAM,KAAKrD,IAAA,CAAK2D,EAAE,GAAG;QACtCC,IAAA,EAAMV,SAAS,CAAClD,IAAA,CAAKC,KAAK,CAACD,IAAA,CAAKqD,MAAM,KAAKH,SAAA,CAAUzB,MAAM;MAC7D;IACF;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAEAoB,QAAA,CAASwC,OAAO,GAAGgC,KAAA;IAAA;IAAA9F,cAAA,GAAAE,CAAA;IACnByD,iBAAA;IAEA;IAAA;IAAA3D,cAAA,GAAAE,CAAA;IACA0B,kBAAA,CAAmBkC,OAAO,CAAC4C,KAAK;EAClC,GAAG,CAAC5E,UAAA,EAAYvB,SAAA,EAAWI,cAAA,EAAgBgD,iBAAA,CAAkB;EAE7D;;;EAGA,MAAMgD,eAAA;EAAA;EAAA,CAAA3G,cAAA,GAAAE,CAAA,SAAkB,IAAAiB,MAAA,CAAAyC,WAAW,EAAC;IAAA;IAAA5D,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAClC;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAA0B,UAAA,CAAWI,gBAAgB;IAAA;IAAA,CAAAvC,cAAA,GAAAS,CAAA,WAAIe,aAAA,CAAcsC,OAAO,GAAG,MAAM,IAAG;MAAA;MAAA9D,cAAA,GAAAS,CAAA;MAClE,MAAMmG,MAAA;MAAA;MAAA,CAAA5G,cAAA,GAAAE,CAAA,SAAS0B,kBAAA,CAAmBkC,OAAO,CAACM,GAAG,CAAC;MAAA;MAAApE,cAAA,GAAAE,CAAA;MAC9C,IAAI0G,MAAA,EAAQ;QAAA;QAAA5G,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAAA,OAAO0G,MAAA;MAAA;MAAA;MAAA;QAAA5G,cAAA,GAAAS,CAAA;MAAA;IACrB;IAAA;IAAA;MAAAT,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAMO,WAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,SAA4B,EAAE;IACpC,MAAM2G,SAAA;IAAA;IAAA,CAAA7G,cAAA,GAAAE,CAAA,SAAY,IAAI4G,GAAA;IAAA;IAAA9G,cAAA,GAAAE,CAAA;IAEtBoB,QAAA,CAASwC,OAAO,CAACC,OAAO,CAAC,CAACgD,KAAA,EAAOC,MAAA;MAAA;MAAAhH,cAAA,GAAAI,CAAA;MAC/B,MAAM6G,aAAA;MAAA;MAAA,CAAAjH,cAAA,GAAAE,CAAA,SAAgBoD,mBAAA,CAAoByD,KAAA,CAAM7D,CAAC,EAAE6D,KAAA,CAAM5D,CAAC;MAAA;MAAAnD,cAAA,GAAAE,CAAA;MAE1D+G,aAAA,CAAclD,OAAO,CAACmD,OAAA;QAAA;QAAAlH,cAAA,GAAAI,CAAA;QACpB,MAAM+G,WAAA;QAAA;QAAA,CAAAnH,cAAA,GAAAE,CAAA;QAAc;QAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAiB,cAAA,CAAeoC,OAAO,CAACM,GAAG,CAAC8C,OAAA;QAAA;QAAA,CAAAlH,cAAA,GAAAS,CAAA,WAAY,EAAE;QAAA;QAAAT,cAAA,GAAAE,CAAA;QAE7DiH,WAAA,CAAYpD,OAAO,CAACqD,KAAA;UAAA;UAAApH,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAE,CAAA;UAClB,IAAI6G,KAAA,CAAMd,EAAE,IAAImB,KAAA,CAAMnB,EAAE,EAAE;YAAA;YAAAjG,cAAA,GAAAS,CAAA;YAAAT,cAAA,GAAAE,CAAA;YAAA;UAAA;UAAA;UAAA;YAAAF,cAAA,GAAAS,CAAA;UAAA,EAAQ;UAElC,MAAM4G,OAAA;UAAA;UAAA,CAAArH,cAAA,GAAAE,CAAA,SAAU,GAAG6G,KAAA,CAAMd,EAAE,IAAImB,KAAA,CAAMnB,EAAE,EAAE;UAAA;UAAAjG,cAAA,GAAAE,CAAA;UACzC,IAAI2G,SAAA,CAAU3C,GAAG,CAACmD,OAAA,GAAU;YAAA;YAAArH,cAAA,GAAAS,CAAA;YAAAT,cAAA,GAAAE,CAAA;YAAA;UAAA;UAAA;UAAA;YAAAF,cAAA,GAAAS,CAAA;UAAA;UAAAT,cAAA,GAAAE,CAAA;UAC5B2G,SAAA,CAAUS,GAAG,CAACD,OAAA;UAEd,MAAM7D,EAAA;UAAA;UAAA,CAAAxD,cAAA,GAAAE,CAAA,SAAK6G,KAAA,CAAM7D,CAAC,GAAGkE,KAAA,CAAMlE,CAAC;UAC5B,MAAMO,EAAA;UAAA;UAAA,CAAAzD,cAAA,GAAAE,CAAA,SAAK6G,KAAA,CAAM5D,CAAC,GAAGiE,KAAA,CAAMjE,CAAC;UAC5B,MAAMoE,QAAA;UAAA;UAAA,CAAAvH,cAAA,GAAAE,CAAA,SAAW2C,IAAA,CAAK2E,IAAI,CAAChE,EAAA,GAAKA,EAAA,GAAKC,EAAA,GAAKA,EAAA;UAAA;UAAAzD,cAAA,GAAAE,CAAA;UAE1C,IAAIqH,QAAA,GAAW7G,kBAAA,EAAoB;YAAA;YAAAV,cAAA,GAAAS,CAAA;YACjC,MAAM6F,OAAA;YAAA;YAAA,CAAAtG,cAAA,GAAAE,CAAA,SAAU2C,IAAA,CAAK4E,GAAG,CAAC,GAAG,IAAIF,QAAA,GAAW7G,kBAAA;YAAA;YAAAV,cAAA,GAAAE,CAAA;YAC3Cc,WAAA,CAAY0C,IAAI,CAAC;cACfgE,IAAA,EAAMX,KAAA;cACNY,EAAA,EAAIP,KAAA;cACJd,OAAA,EAASA,OAAA,GAAU;cACnBsB,QAAA,EAAUtB;YACZ;UACF;UAAA;UAAA;YAAAtG,cAAA,GAAAS,CAAA;UAAA;QACF;MACF;IACF;IAEA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACA,IAAIiC,UAAA,CAAWI,gBAAgB,EAAE;MAAA;MAAAvC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAC/B0B,kBAAA,CAAmBkC,OAAO,CAACK,GAAG,CAAC,WAAWnD,WAAA;IAC5C;IAAA;IAAA;MAAAhB,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAEA,OAAOc,WAAA;EACT,GAAG,CAACN,kBAAA,EAAoByB,UAAA,CAAWI,gBAAgB,CAAC;EAEpD;;;EAGA,MAAMsD,OAAA;EAAA;EAAA,CAAA7F,cAAA,GAAAE,CAAA,SAAU,IAAAiB,MAAA,CAAAyC,WAAW,EAAC;IAAA;IAAA5D,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC1B;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,YAACS,SAAA,CAAU4C,OAAO;IAAA;IAAA,CAAA9D,cAAA,GAAAS,CAAA,WAAIqB,UAAA,CAAWG,KAAK,KAAK;IAAA;IAAA,CAAAjC,cAAA,GAAAS,CAAA,WAAKqB,UAAA,CAAWI,MAAM,KAAK,IAAG;MAAA;MAAAlC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAE7E;IAAAT,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC2B,YAAA,CAAaiC,OAAO,EAAE;MAAA;MAAA9D,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACzBmB,YAAA,CAAayC,OAAO,GAAG4B,SAAA;MAAA;MAAA1F,cAAA,GAAAE,CAAA;MACvB;IACF;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAMoH,WAAA;IAAA;IAAA,CAAA7H,cAAA,GAAAE,CAAA,SAAcyF,WAAA,CAAYC,GAAG;IACnC,MAAMkC,SAAA;IAAA;IAAA,CAAA9H,cAAA,GAAAE,CAAA,SAAY2H,WAAA,GAActG,gBAAA,CAAiBuC,OAAO;IAExD;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACA,IAAI4H,SAAA,GAAY/E,eAAA,EAAiB;MAAA;MAAA/C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAC/BmB,YAAA,CAAayC,OAAO,GAAGiE,qBAAA,CAAsBlC,OAAA;MAAA;MAAA7F,cAAA,GAAAE,CAAA;MAC7C;IACF;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAMuH,MAAA;IAAA;IAAA,CAAAhI,cAAA,GAAAE,CAAA,SAASgB,SAAA,CAAU4C,OAAO;IAChC,MAAMmE,GAAA;IAAA;IAAA,CAAAjI,cAAA,GAAAE,CAAA,SAAM8H,MAAA,CAAOE,UAAU,CAAC,MAAM;MAAEzD,KAAA,EAAO;IAAM;IAAA;IAAAzE,cAAA,GAAAE,CAAA;IACnD,IAAI,CAAC+H,GAAA,EAAK;MAAA;MAAAjI,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEV;IAAAT,cAAA,GAAAE,CAAA;IACA+H,GAAA,CAAIE,SAAS,GAAG;IAAA;IAAAnI,cAAA,GAAAE,CAAA;IAChB+H,GAAA,CAAIG,QAAQ,CAAC,GAAG,GAAGtG,UAAA,CAAWG,KAAK,EAAEH,UAAA,CAAWI,MAAM;IAEtD;IACA,MAAMmG,eAAA;IAAA;IAAA,CAAArI,cAAA,GAAAE,CAAA,SAAkB4H,SAAA,GAAY,QAAO;IAAA;IAAA9H,cAAA,GAAAE,CAAA;IAE3CoB,QAAA,CAASwC,OAAO,CAACC,OAAO,CAACC,IAAA;MAAA;MAAAhE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACvB;MACA8D,IAAA,CAAKd,CAAC,IAAIc,IAAA,CAAKmC,EAAE,GAAGkC,eAAA;MAAA;MAAArI,cAAA,GAAAE,CAAA;MACpB8D,IAAA,CAAKb,CAAC,IAAIa,IAAA,CAAKoC,EAAE,GAAGiC,eAAA;MAEpB;MAAA;MAAArI,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAuD,IAAA,CAAKd,CAAC,IAAI;MAAA;MAAA,CAAAlD,cAAA,GAAAS,CAAA,WAAKuD,IAAA,CAAKd,CAAC,IAAIpB,UAAA,CAAWG,KAAK,GAAE;QAAA;QAAAjC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC7C8D,IAAA,CAAKmC,EAAE,IAAI,CAAC;QAAA;QAAAnG,cAAA,GAAAE,CAAA;QACZ8D,IAAA,CAAKd,CAAC,GAAGL,IAAA,CAAK4E,GAAG,CAAC,GAAG5E,IAAA,CAAKyF,GAAG,CAACxG,UAAA,CAAWG,KAAK,EAAE+B,IAAA,CAAKd,CAAC;MACxD;MAAA;MAAA;QAAAlD,cAAA,GAAAS,CAAA;MAAA;MAAAT,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAuD,IAAA,CAAKb,CAAC,IAAI;MAAA;MAAA,CAAAnD,cAAA,GAAAS,CAAA,WAAKuD,IAAA,CAAKb,CAAC,IAAIrB,UAAA,CAAWI,MAAM,GAAE;QAAA;QAAAlC,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAC9C8D,IAAA,CAAKoC,EAAE,IAAI,CAAC;QAAA;QAAApG,cAAA,GAAAE,CAAA;QACZ8D,IAAA,CAAKb,CAAC,GAAGN,IAAA,CAAK4E,GAAG,CAAC,GAAG5E,IAAA,CAAKyF,GAAG,CAACxG,UAAA,CAAWI,MAAM,EAAE8B,IAAA,CAAKb,CAAC;MACzD;MAAA;MAAA;QAAAnD,cAAA,GAAAS,CAAA;MAAA;MAEA;MAAAT,cAAA,GAAAE,CAAA;MACA8D,IAAA,CAAKuC,UAAU,IAAI,OAAO8B,eAAA;MAAA;MAAArI,cAAA,GAAAE,CAAA;MAC1B8D,IAAA,CAAKsC,OAAO,GAAG,MAAM,MAAMzD,IAAA,CAAK0F,GAAG,CAACvE,IAAA,CAAKuC,UAAU;IACrD;IAEA;IAAA;IAAAvG,cAAA,GAAAE,CAAA;IACA,IAAIsB,aAAA,CAAcsC,OAAO,GAAG,OAAO,GAAG;MAAA;MAAA9D,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACpCyD,iBAAA;IACF;IAAA;IAAA;MAAA3D,cAAA,GAAAS,CAAA;IAAA;IAEA;IACA,MAAMO,WAAA;IAAA;IAAA,CAAAhB,cAAA,GAAAE,CAAA,SAAcyG,eAAA;IAEpB;IAAA;IAAA3G,cAAA,GAAAE,CAAA;IACA+H,GAAA,CAAIO,SAAS,GAAG;IAAA;IAAAxI,cAAA,GAAAE,CAAA;IAChBc,WAAA,CAAY+C,OAAO,CAAC0E,UAAA;MAAA;MAAAzI,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAClB+H,GAAA,CAAIS,SAAS;MAAA;MAAA1I,cAAA,GAAAE,CAAA;MACb+H,GAAA,CAAIU,MAAM,CAACF,UAAA,CAAWf,IAAI,CAACxE,CAAC,EAAEuF,UAAA,CAAWf,IAAI,CAACvE,CAAC;MAAA;MAAAnD,cAAA,GAAAE,CAAA;MAC/C+H,GAAA,CAAIW,MAAM,CAACH,UAAA,CAAWd,EAAE,CAACzE,CAAC,EAAEuF,UAAA,CAAWd,EAAE,CAACxE,CAAC;MAE3C;MAAA;MAAAnD,cAAA,GAAAE,CAAA;MACA+H,GAAA,CAAIY,WAAW,GAAGtE,SAAA,CAAU3D,MAAA,CAAOI,WAAW,EAAEyH,UAAA,CAAWnC,OAAO;MAAA;MAAAtG,cAAA,GAAAE,CAAA;MAClE+H,GAAA,CAAIa,MAAM;IACZ;IAEA;IAAA;IAAA9I,cAAA,GAAAE,CAAA;IACAoB,QAAA,CAASwC,OAAO,CAACC,OAAO,CAACC,IAAA;MAAA;MAAAhE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACvB+H,GAAA,CAAIS,SAAS;MAAA;MAAA1I,cAAA,GAAAE,CAAA;MACb+H,GAAA,CAAIc,GAAG,CAAC/E,IAAA,CAAKd,CAAC,EAAEc,IAAA,CAAKb,CAAC,EAAEa,IAAA,CAAKqC,IAAI,EAAE,GAAGxD,IAAA,CAAK2D,EAAE,GAAG;MAEhD;MACA,IAAIwC,KAAA;MAAA;MAAA,CAAAhJ,cAAA,GAAAE,CAAA,SAAQU,MAAA,CAAOC,OAAO;MAAA;MAAAb,cAAA,GAAAE,CAAA;MAC1B,IAAI8D,IAAA,CAAKyC,IAAI,KAAK,aAAa;QAAA;QAAAzG,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAAA8I,KAAA,GAAQpI,MAAA,CAAOE,SAAS;MAAA;MAAA;MAAA;QAAAd,cAAA,GAAAS,CAAA;MAAA;MAAAT,cAAA,GAAAE,CAAA;MACvD,IAAI8D,IAAA,CAAKyC,IAAI,KAAK,UAAU;QAAA;QAAAzG,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QAAA8I,KAAA,GAAQpI,MAAA,CAAOG,MAAM;MAAA;MAAA;MAAA;QAAAf,cAAA,GAAAS,CAAA;MAAA;MAEjD;MAAAT,cAAA,GAAAE,CAAA;MACA+H,GAAA,CAAIE,SAAS,GAAG5D,SAAA,CAAUyE,KAAA,EAAOhF,IAAA,CAAKsC,OAAO;MAAA;MAAAtG,cAAA,GAAAE,CAAA;MAC7C+H,GAAA,CAAIgB,IAAI;IACV;IAEA;IAAA;IAAAjJ,cAAA,GAAAE,CAAA;IACAqB,gBAAA,CAAiBuC,OAAO,GAAG+D,WAAA;IAAA;IAAA7H,cAAA,GAAAE,CAAA;IAC3BsB,aAAA,CAAcsC,OAAO;IAErB;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IACA,IAAIsB,aAAA,CAAcsC,OAAO,GAAG,OAAO,GAAG;MAAA;MAAA9D,cAAA,GAAAS,CAAA;MACpC,MAAMyI,YAAA;MAAA;MAAA,CAAAlJ,cAAA,GAAAE,CAAA,SAAe4H,SAAA;MAAA;MAAA9H,cAAA,GAAAE,CAAA;MACrBuB,MAAA,CAAOqC,OAAO,GAAGjB,IAAA,CAAKsG,KAAK,CAAC,OAAOD,YAAA;IACrC;IAAA;IAAA;MAAAlJ,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAEAmB,YAAA,CAAayC,OAAO,GAAGiE,qBAAA,CAAsBlC,OAAA;EAC/C,GAAG,CACD/D,UAAA,EACAlB,MAAA,EACAmC,eAAA,EACAY,iBAAA,EACAgD,eAAA,EACApC,SAAA,CACD;EAED;;;EAAA;EAAAvE,cAAA,GAAAE,CAAA;EAGA,IAAAiB,MAAA,CAAA2D,SAAS,EAAC;IAAA;IAAA9E,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,YAACS,SAAA,CAAU4C,OAAO;IAAA;IAAA,CAAA9D,cAAA,GAAAS,CAAA,WAAIqB,UAAA,CAAWG,KAAK,KAAK;IAAA;IAAA,CAAAjC,cAAA,GAAAS,CAAA,WAAKqB,UAAA,CAAWI,MAAM,KAAK,IAAG;MAAA;MAAAlC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAE7E,MAAMuH,MAAA;IAAA;IAAA,CAAAhI,cAAA,GAAAE,CAAA,SAASgB,SAAA,CAAU4C,OAAO;IAAA;IAAA9D,cAAA,GAAAE,CAAA;IAChC8H,MAAA,CAAO/F,KAAK,GAAGH,UAAA,CAAWG,KAAK;IAAA;IAAAjC,cAAA,GAAAE,CAAA;IAC/B8H,MAAA,CAAO9F,MAAM,GAAGJ,UAAA,CAAWI,MAAM;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IAEjCqB,gBAAA,CAAiBuC,OAAO,GAAG6B,WAAA,CAAYC,GAAG;IAAA;IAAA5F,cAAA,GAAAE,CAAA;IAC1C2F,OAAA;IAAA;IAAA7F,cAAA,GAAAE,CAAA;IAEA,OAAO;MAAA;MAAAF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACL,IAAImB,YAAA,CAAayC,OAAO,EAAE;QAAA;QAAA9D,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAE,CAAA;QACxBkJ,oBAAA,CAAqB/H,YAAA,CAAayC,OAAO;MAC3C;MAAA;MAAA;QAAA9D,cAAA,GAAAS,CAAA;MAAA;IACF;EACF,GAAG,CAACqB,UAAA,EAAY+D,OAAA,CAAQ;EAAA;EAAA7F,cAAA,GAAAE,CAAA;EAExB,oBACE,IAAAmJ,WAAA,CAAAC,GAAA,EAAC;IACCC,GAAA,EAAKrI,SAAA;IACLsI,SAAA,EAAU;IACVC,KAAA,EAAO;MACLC,MAAA,EAAQ,CAAC;MACTC,UAAA,EAAY;MACZC,UAAA,EAAY;MACZC,SAAA,EAAW;IACb;IACA,eAAY;;AAGlB;MAEAvJ,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,SAAeC,gCAAA","ignoreList":[]}