{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/lib/api.ts"],"sourcesContent":["/**\n * aclue API Client\n * \n * Centralised HTTP client for all backend API communication.\n * Provides type-safe methods for authentication, data fetching,\n * and real-time interactions with the aclue backend.\n * \n * Key Features:\n *   - Automatic JWT token management with refresh\n *   - Request/response interceptors for auth and error handling\n *   - Type-safe API methods with full TypeScript support\n *   - Automatic retry logic for failed requests\n *   - Comprehensive error handling and user feedback\n * \n * Architecture:\n *   - TokenManager: Secure storage and management of JWT tokens\n *   - ApiClient: Main HTTP client with interceptors and methods\n *   - Convenience exports: Simplified API for common operations\n * \n * Usage:\n *   import { api } from '@/lib/api';\n *   const user = await api.getCurrentUser();\n *   const products = await api.getProducts({ category: 'electronics' });\n */\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { config, endpoints, appConfig } from '@/config';\nimport { \n  ApiResponse, \n  PaginatedResponse, \n  ApiError,\n  AuthResponse,\n  LoginRequest,\n  RegisterRequest,\n  RefreshTokenRequest,\n  User,\n  Product,\n  Category,\n  SearchQuery,\n  SearchResult,\n  SwipeSession,\n  SwipeRequest,\n  SwipeInteraction,\n  Recommendation,\n  RecommendationRequest,\n  RecommendationResponse,\n  GiftLink,\n  CreateGiftLinkRequest,\n  GiftLinkInteraction,\n  AnalyticsEvent\n} from '@/types';\n\n// ==============================================================================\n// TOKEN MANAGEMENT\n// ==============================================================================\n// Singleton class for secure JWT token storage and management\n\n/**\n * Secure JWT token manager with localStorage persistence.\n * \n * Manages access and refresh tokens for API authentication:\n *   - Singleton pattern ensures consistent token state\n *   - Automatic localStorage synchronisation\n *   - Secure token cleanup on logout\n *   - Server-side rendering safe (checks for window)\n * \n * Token Lifecycle:\n *   1. Tokens received from authentication endpoints\n *   2. Stored in localStorage and memory\n *   3. Access token used for API requests\n *   4. Refresh token used to renew expired access tokens\n *   5. Cleared on logout or authentication errors\n */\nclass TokenManager {\n  private static instance: TokenManager;  // Singleton instance\n  private accessToken: string | null = null;   // In-memory access token cache\n  private refreshToken: string | null = null;  // In-memory refresh token cache\n\n  /**\n   * Get singleton TokenManager instance.\n   * \n   * Creates new instance on first call and initialises tokens\n   * from localStorage if available.\n   * \n   * Returns:\n   *   TokenManager: Singleton instance\n   */\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n      // Initialize tokens from localStorage on first creation\n      TokenManager.instance.initializeFromStorage();\n    }\n    return TokenManager.instance;\n  }\n\n  /**\n   * Initialise tokens from localStorage on browser load.\n   * \n   * Safely checks for browser environment and loads previously\n   * stored tokens into memory cache.\n   * \n   * Note: Only runs in browser environment (SSR safe)\n   */\n  private initializeFromStorage(): void {\n    if (typeof window !== 'undefined') {\n      this.accessToken = localStorage.getItem(appConfig.storage.authToken);\n      this.refreshToken = localStorage.getItem(appConfig.storage.refreshToken);\n    }\n  }\n\n  /**\n   * Store new JWT tokens in memory and localStorage.\n   * \n   * Updates both in-memory cache and persistent storage\n   * for session continuity across browser reloads.\n   * \n   * Parameters:\n   *   accessToken: JWT access token for API requests\n   *   refreshToken: JWT refresh token for session renewal\n   */\n  setTokens(accessToken: string, refreshToken: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    \n    // Persist to localStorage for session continuity\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(appConfig.storage.authToken, accessToken);\n      localStorage.setItem(appConfig.storage.refreshToken, refreshToken);\n    }\n  }\n\n  /**\n   * Retrieve current access token for API requests.\n   *\n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   *\n   * Returns:\n   *   string | null: Current access token or null if not available\n   */\n  getAccessToken(): string | null {\n    // Return cached token if available\n    if (this.accessToken) return this.accessToken;\n\n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem(appConfig.storage.authToken);\n      return token || null; // Ensure we return null instead of undefined\n    }\n\n    return null;\n  }\n\n  /**\n   * Retrieve current refresh token for session renewal.\n   *\n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   *\n   * Returns:\n   *   string | null: Current refresh token or null if not available\n   */\n  getRefreshToken(): string | null {\n    // Return cached token if available\n    if (this.refreshToken) return this.refreshToken;\n\n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem(appConfig.storage.refreshToken);\n      return token || null; // Ensure we return null instead of undefined\n    }\n\n    return null;\n  }\n\n  /**\n   * Clear all stored tokens and user data.\n   * \n   * Removes tokens from both memory and localStorage.\n   * Called during logout or authentication errors.\n   * \n   * Security:\n   *   - Clears all authentication-related data\n   *   - Prevents token reuse after logout\n   *   - Ensures clean state for new authentication\n   */\n  clearTokens(): void {\n    // Clear memory cache\n    this.accessToken = null;\n    this.refreshToken = null;\n    \n    // Clear persistent storage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(appConfig.storage.authToken);\n      localStorage.removeItem(appConfig.storage.refreshToken);\n      localStorage.removeItem(appConfig.storage.user);\n    }\n  }\n}\n\n// ==============================================================================\n// API CLIENT\n// ==============================================================================\n// Main HTTP client with authentication and error handling\n\n/**\n * Comprehensive HTTP client for aclue API communication.\n * \n * Features:\n *   - Automatic JWT token attachment to requests\n *   - Token refresh on 401 errors with request retry\n *   - Consistent error handling and user feedback\n *   - Request/response interceptors for common patterns\n *   - Type-safe methods for all API endpoints\n * \n * Request Flow:\n *   1. Add Authorization header with current access token\n *   2. Send request to backend API\n *   3. Handle successful response or error\n *   4. On 401 error: refresh token and retry original request\n *   5. On refresh failure: clear tokens and redirect to login\n */\nclass ApiClient {\n  private client: AxiosInstance;      // Axios HTTP client instance\n  private tokenManager: TokenManager; // Token storage and management\n  private isRefreshing = false;       // Flag to prevent concurrent refresh attempts\n  private failedQueue: Array<{        // Queue for requests waiting on token refresh\n    resolve: (value: any) => void;\n    reject: (error: any) => void;\n  }> = [];\n\n  /**\n   * Initialise API client with configuration and interceptors.\n   * \n   * Sets up:\n   *   - Base URL from configuration\n   *   - Request/response timeouts\n   *   - Default headers\n   *   - Authentication and error interceptors\n   */\n  constructor() {\n    this.tokenManager = TokenManager.getInstance();\n    \n    // Create axios instance with base configuration\n    this.client = axios.create({\n      baseURL: config.apiUrl,              // Backend API base URL\n      timeout: 30000,                      // 30 second timeout for requests\n      headers: {\n        'Content-Type': 'application/json', // JSON request body format\n        'Accept': 'application/json',       // Expected response format\n      },\n    });\n\n    // Set up request/response interceptors\n    this.setupInterceptors();\n  }\n\n  /**\n   * Set up request and response interceptors for authentication and error handling.\n   * \n   * Request Interceptor:\n   *   - Automatically adds Authorization header with current access token\n   *   - Ensures all API requests are authenticated\n   * \n   * Response Interceptor:\n   *   - Handles 401 errors with automatic token refresh\n   *   - Queues failed requests during refresh process\n   *   - Retries original requests after successful refresh\n   *   - Redirects to login on refresh failure\n   */\n  private setupInterceptors(): void {\n    // ===========================================================================\n    // REQUEST INTERCEPTOR: Add authentication token to all requests\n    // ===========================================================================\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.tokenManager.getAccessToken();\n        if (token && config.headers) {\n          // Add Bearer token to Authorization header\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // ===========================================================================\n    // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh\n    // ===========================================================================\n    this.client.interceptors.response.use(\n      (response) => response, // Pass through successful responses\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized errors with automatic token refresh\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          \n          // If already refreshing, queue this request\n          if (this.isRefreshing) {\n            return new Promise((resolve, reject) => {\n              this.failedQueue.push({ resolve, reject });\n            }).then((token) => {\n              // Retry with new token\n              originalRequest.headers.Authorization = `Bearer ${token}`;\n              return this.client(originalRequest);\n            }).catch((err) => {\n              return Promise.reject(err);\n            });\n          }\n\n          // Mark request as retry to prevent infinite loops\n          originalRequest._retry = true;\n          this.isRefreshing = true;\n\n          try {\n            // Attempt to refresh the access token\n            const refreshToken = this.tokenManager.getRefreshToken();\n            if (!refreshToken) {\n              throw new Error('No refresh token available');\n            }\n\n            // Call refresh endpoint\n            const response = await this.refreshAccessToken({ refresh_token: refreshToken });\n            const { access_token, refresh_token: newRefreshToken } = response.data;\n\n            // Store new tokens\n            this.tokenManager.setTokens(access_token, newRefreshToken);\n            \n            // Process queued requests with new token\n            this.processQueue(access_token, null);\n            \n            // Retry original request with new token\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            return this.client(originalRequest);\n            \n          } catch (refreshError) {\n            // Refresh failed - clear tokens and redirect to login\n            this.processQueue(null, refreshError);\n            this.tokenManager.clearTokens();\n            \n            // Redirect to login if we're in the browser\n            if (typeof window !== 'undefined') {\n              window.location.href = '/auth/login';\n            }\n            \n            return Promise.reject(refreshError);\n          } finally {\n            this.isRefreshing = false;\n          }\n        }\n\n        // Handle other errors with consistent error formatting\n        return Promise.reject(this.handleError(error));\n      }\n    );\n  }\n\n  /**\n   * Process queued requests after token refresh attempt.\n   * \n   * During token refresh, multiple requests may fail with 401 errors.\n   * These requests are queued and processed once refresh completes.\n   * \n   * Parameters:\n   *   token: New access token (null if refresh failed)\n   *   error: Refresh error (null if refresh succeeded)\n   */\n  private processQueue(token: string | null, error: any): void {\n    this.failedQueue.forEach(({ resolve, reject }) => {\n      if (error) {\n        // Refresh failed - reject all queued requests\n        reject(error);\n      } else {\n        // Refresh succeeded - resolve with new token\n        resolve(token);\n      }\n    });\n    \n    // Clear the queue\n    this.failedQueue = [];\n  }\n\n  /**\n   * Convert axios errors to standardised ApiError format.\n   * \n   * Provides consistent error handling across all API methods\n   * with user-friendly messages and debugging information.\n   * \n   * Error Types:\n   *   - Response errors: Server returned error status (400, 500, etc.)\n   *   - Network errors: Request failed to reach server\n   *   - Request errors: Invalid request configuration\n   * \n   * Parameters:\n   *   error: Axios error object\n   * \n   * Returns:\n   *   ApiError: Standardised error with message, code, and details\n   */\n  private handleError(error: any): ApiError {\n    const apiError: ApiError = {\n      message: appConfig.errors.unknown,\n      code: 'UNKNOWN_ERROR',\n      status: 500,\n      timestamp: new Date().toISOString(),\n    };\n\n    if (error.response) {\n      // Server responded with error status (4xx, 5xx)\n      apiError.status = error.response.status;\n      apiError.message = error.response.data?.message || this.getErrorMessageByStatus(error.response.status);\n      apiError.code = error.response.data?.code || `HTTP_${error.response.status}`;\n      apiError.details = error.response.data?.details;\n    } else if (error.request) {\n      // Network error - request made but no response received\n      apiError.message = appConfig.errors.network;\n      apiError.code = 'NETWORK_ERROR';\n      apiError.status = 0;\n    } else {\n      // Request setup error - something wrong with request configuration\n      apiError.message = error.message || appConfig.errors.unknown;\n      apiError.code = 'REQUEST_ERROR';\n    }\n\n    return apiError;\n  }\n\n  /**\n   * Get user-friendly error message for HTTP status codes.\n   * \n   * Maps common HTTP status codes to localised error messages\n   * from application configuration.\n   * \n   * Parameters:\n   *   status: HTTP status code\n   * \n   * Returns:\n   *   string: User-friendly error message\n   */\n  private getErrorMessageByStatus(status: number): string {\n    switch (status) {\n      case 400:\n        return appConfig.errors.validation;   // \"Please check your input and try again\"\n      case 401:\n        return appConfig.errors.unauthorized; // \"Please log in to continue\"\n      case 403:\n        return appConfig.errors.forbidden;    // \"You don't have permission to do this\"\n      case 404:\n        return appConfig.errors.notFound;     // \"The requested item was not found\"\n      case 500:\n        return appConfig.errors.server;       // \"Something went wrong on our end\"\n      default:\n        return appConfig.errors.unknown;      // \"An unexpected error occurred\"\n    }\n  }\n\n  // Generic request methods\n  async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.get(url, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.post(url, data, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.put(url, data, config);\n    return response.data;\n  }\n\n  async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.patch(url, data, config);\n    return response.data;\n  }\n\n  async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.delete(url, config);\n    return response.data;\n  }\n\n  // Authentication methods\n  async login(data: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.login, data);\n  }\n\n  async register(data: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.register, data);\n  }\n\n  async refreshAccessToken(data: RefreshTokenRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.refresh, data);\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    const response = await this.post<void>(endpoints.auth.logout);\n    this.tokenManager.clearTokens();\n    return response;\n  }\n\n  async getCurrentUser(): Promise<ApiResponse<User>> {\n    return this.get<User>(endpoints.auth.me);\n  }\n\n  async forgotPassword(email: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.forgotPassword, { email });\n  }\n\n  async resetPassword(token: string, password: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.resetPassword, { token, password });\n  }\n\n  async verifyEmail(token: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.verifyEmail, { token });\n  }\n\n  // User methods\n  async updateProfile(data: Partial<User>): Promise<ApiResponse<User>> {\n    return this.put<User>(endpoints.users.updateProfile, data);\n  }\n\n  async getUserPreferences(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.preferences);\n  }\n\n  async updateUserPreferences(data: any): Promise<ApiResponse<any>> {\n    return this.put(endpoints.users.preferences, data);\n  }\n\n  async getUserStatistics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.statistics);\n  }\n\n  async deleteAccount(): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.users.deleteAccount);\n  }\n\n  // Product methods\n  async getProducts(params?: any): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.list, { params });\n  }\n\n  async searchProducts(query: SearchQuery): Promise<ApiResponse<SearchResult>> {\n    return this.post<SearchResult>(endpoints.products.search, query);\n  }\n\n  async getProduct(id: string): Promise<ApiResponse<Product>> {\n    return this.get<Product>(endpoints.products.byId(id));\n  }\n\n  async getCategories(): Promise<ApiResponse<Category[]>> {\n    return this.get<Category[]>(endpoints.products.categories);\n  }\n\n  async getFeaturedProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.featured);\n  }\n\n  async getTrendingProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.trending);\n  }\n\n  async getProductsByCategory(categoryId: string, params?: any): Promise<PaginatedResponse<Product>> {\n    return this.get<Product[]>(endpoints.products.byCategory(categoryId), { params });\n  }\n\n  // Swipe methods\n  async createSwipeSession(data: any): Promise<ApiResponse<SwipeSession>> {\n    return this.post<SwipeSession>(endpoints.swipes.createSession, data);\n  }\n\n  async getCurrentSwipeSession(): Promise<ApiResponse<SwipeSession>> {\n    return this.get<SwipeSession>(endpoints.swipes.currentSession);\n  }\n\n  async recordSwipe(sessionId: string, data: SwipeRequest): Promise<ApiResponse<SwipeInteraction>> {\n    return this.post<SwipeInteraction>(endpoints.swipes.interactions(sessionId), data);\n  }\n\n  async getSwipeAnalytics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.swipes.analytics);\n  }\n\n  // Recommendation methods\n  async generateRecommendations(data: RecommendationRequest): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.generate, data);\n  }\n\n  async getRecommendations(params?: any): Promise<PaginatedResponse<Recommendation>> {\n    return this.get<Recommendation[]>(endpoints.recommendations.list, { params });\n  }\n\n  async getRecommendation(id: string): Promise<ApiResponse<Recommendation>> {\n    return this.get<Recommendation>(endpoints.recommendations.byId(id));\n  }\n\n  async provideFeedback(id: string, feedback: any): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.recommendations.feedback(id), feedback);\n  }\n\n  async refreshRecommendations(): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.refresh);\n  }\n\n  // Gift Link methods\n  async createGiftLink(data: CreateGiftLinkRequest): Promise<ApiResponse<GiftLink>> {\n    return this.post<GiftLink>(endpoints.giftLinks.create, data);\n  }\n\n  async getGiftLinks(): Promise<ApiResponse<GiftLink[]>> {\n    return this.get<GiftLink[]>(endpoints.giftLinks.list);\n  }\n\n  async getGiftLink(id: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byId(id));\n  }\n\n  async getGiftLinkByToken(token: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byToken(token));\n  }\n\n  async deleteGiftLink(id: string): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.giftLinks.delete(id));\n  }\n\n  async getGiftLinkAnalytics(id: string): Promise<ApiResponse<GiftLinkInteraction[]>> {\n    return this.get<GiftLinkInteraction[]>(endpoints.giftLinks.analytics(id));\n  }\n\n  // Analytics methods\n  async trackEvent(event: AnalyticsEvent): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.analytics.track, event);\n  }\n\n  async getAnalyticsDashboard(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.analytics.dashboard);\n  }\n\n  // Health check\n  async healthCheck(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.health);\n  }\n}\n\n// Create and export API client instance\nexport const apiClient = new ApiClient();\n\n// Export token manager for external use\nexport const tokenManager = TokenManager.getInstance();\n\n// Export convenience methods with nested structure for better organisation\nexport const api = {\n  // Authentication methods\n  auth: {\n    login: (data: LoginRequest) => apiClient.login(data),\n    register: (data: RegisterRequest) => apiClient.register(data),\n    logout: () => apiClient.logout(),\n    getCurrentUser: () => apiClient.getCurrentUser(),\n    refresh: (data: RefreshTokenRequest) => apiClient.refreshAccessToken(data),\n    forgotPassword: (email: string) => apiClient.forgotPassword(email),\n    resetPassword: (token: string, password: string) => apiClient.resetPassword(token, password),\n    verifyEmail: (token: string) => apiClient.verifyEmail(token),\n  },\n\n  // User management methods\n  users: {\n    updateProfile: (data: Partial<User>) => apiClient.updateProfile(data),\n    getPreferences: () => apiClient.getUserPreferences(),\n    updatePreferences: (data: any) => apiClient.updateUserPreferences(data),\n    getStatistics: () => apiClient.getUserStatistics(),\n    deleteAccount: () => apiClient.deleteAccount(),\n  },\n\n  // Product methods\n  products: {\n    getProducts: (params?: any) => apiClient.getProducts(params),\n    searchProducts: (query: SearchQuery) => apiClient.searchProducts(query),\n    getProduct: (id: string) => apiClient.getProduct(id),\n    getCategories: () => apiClient.getCategories(),\n    getFeatured: () => apiClient.getFeaturedProducts(),\n    getTrending: () => apiClient.getTrendingProducts(),\n    getByCategory: (categoryId: string, params?: any) => apiClient.getProductsByCategory(categoryId, params),\n  },\n\n  // Swipe methods\n  swipes: {\n    createSession: (data: any) => apiClient.createSwipeSession(data),\n    getCurrentSession: () => apiClient.getCurrentSwipeSession(),\n    recordSwipe: (sessionId: string, data: SwipeRequest) => apiClient.recordSwipe(sessionId, data),\n    getAnalytics: () => apiClient.getSwipeAnalytics(),\n\n    // Alternative method names for backward compatibility\n    startSession: (data: any) => apiClient.createSwipeSession(data),\n  },\n\n  // Recommendation methods\n  recommendations: {\n    generate: (data: RecommendationRequest) => apiClient.generateRecommendations(data),\n    getRecommendations: (params?: any) => apiClient.getRecommendations(params),\n    getRecommendation: (id: string) => apiClient.getRecommendation(id),\n    provideFeedback: (id: string, feedback: any) => apiClient.provideFeedback(id, feedback),\n    refresh: () => apiClient.refreshRecommendations(),\n\n    // Alternative method name for compatibility with tests\n    createRecommendationRequest: (data: RecommendationRequest) => apiClient.generateRecommendations(data),\n  },\n\n  // Gift Link methods\n  giftLinks: {\n    create: (data: CreateGiftLinkRequest) => apiClient.createGiftLink(data),\n    getAll: () => apiClient.getGiftLinks(),\n    getById: (id: string) => apiClient.getGiftLink(id),\n    getByToken: (token: string) => apiClient.getGiftLinkByToken(token),\n    delete: (id: string) => apiClient.deleteGiftLink(id),\n    getAnalytics: (id: string) => apiClient.getGiftLinkAnalytics(id),\n  },\n\n  // Analytics methods\n  analytics: {\n    trackEvent: (event: AnalyticsEvent) => apiClient.trackEvent(event),\n    getDashboard: () => apiClient.getAnalyticsDashboard(),\n  },\n\n  // Health check\n  health: () => apiClient.healthCheck(),\n};\n\nexport default apiClient;"],"names":["api","apiClient","tokenManager","TokenManager","getInstance","instance","initializeFromStorage","window","accessToken","localStorage","getItem","appConfig","storage","authToken","refreshToken","setTokens","setItem","getAccessToken","token","getRefreshToken","clearTokens","removeItem","user","ApiClient","constructor","isRefreshing","failedQueue","client","axios","create","baseURL","config","apiUrl","timeout","headers","setupInterceptors","interceptors","request","use","Authorization","error","Promise","reject","response","originalRequest","status","_retry","resolve","push","then","catch","err","Error","refreshAccessToken","refresh_token","access_token","newRefreshToken","data","processQueue","refreshError","location","href","handleError","forEach","apiError","message","errors","unknown","code","timestamp","Date","toISOString","getErrorMessageByStatus","details","network","validation","unauthorized","forbidden","notFound","server","get","url","hasOwnProperty","success","post","put","patch","delete","login","endpoints","auth","register","refresh","logout","getCurrentUser","me","forgotPassword","email","resetPassword","password","verifyEmail","updateProfile","users","getUserPreferences","preferences","updateUserPreferences","getUserStatistics","statistics","deleteAccount","getProducts","params","products","list","searchProducts","query","search","getProduct","id","byId","getCategories","categories","getFeaturedProducts","featured","getTrendingProducts","trending","getProductsByCategory","categoryId","byCategory","createSwipeSession","swipes","createSession","getCurrentSwipeSession","currentSession","recordSwipe","sessionId","interactions","getSwipeAnalytics","analytics","generateRecommendations","recommendations","generate","getRecommendations","getRecommendation","provideFeedback","feedback","refreshRecommendations","createGiftLink","giftLinks","getGiftLinks","getGiftLink","getGiftLinkByToken","byToken","deleteGiftLink","getGiftLinkAnalytics","trackEvent","event","track","getAnalyticsDashboard","dashboard","healthCheck","health","getPreferences","updatePreferences","getStatistics","getFeatured","getTrending","getByCategory","getCurrentSession","getAnalytics","startSession","createRecommendationRequest","getAll","getById","getByToken","getDashboard"],"mappings":"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"}