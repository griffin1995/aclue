{"version":3,"names":["cov_b0twjdddy","actualCoverage","s","newsletterSignupAction","f","subscribeEmailAction","newsletterSchema","_zod","z","object","email","string","min","max","transform","toLowerCase","trim","source","optional","default","marketing_consent","boolean","NEWSLETTER_CONFIG","api","baseUrl","b","process","env","NEXT_PUBLIC_API_URL","timeout","endpoint","formData","console","log","headersList","_headers","headers","userAgent","get","rawData","validationResult","safeParse","success","error","errors","code","details","validatedData","data","newsletterPayload","user_agent","response","fetch","method","body","JSON","stringify","ok","errorData","json","catch","detail","status","message","responseData","name","includes","FormData","append"],"sources":["/home/jack/Documents/aclue-preprod/web/src/app/actions/newsletter.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { headers } from 'next/headers'\n\n/**\n * Newsletter Server Actions - App Router Implementation\n *\n * Server-side newsletter signup actions for optimal performance and security.\n * Integrates with existing FastAPI backend newsletter endpoint.\n *\n * Features:\n * - Server-side form processing with Zod validation\n * - Integration with backend API endpoint\n * - Enhanced error handling and logging\n * - User agent and source tracking\n * - GDPR-compliant data handling\n *\n * Backend Integration:\n * - Endpoint: POST /api/v1/newsletter/subscribe\n * - Maintains compatibility with existing API structure\n * - Preserves source tracking for analytics\n */\n\n// =============================================================================\n// VALIDATION SCHEMAS\n// =============================================================================\n\n/**\n * Newsletter signup validation schema\n */\nconst newsletterSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address')\n    .max(320, 'Email address is too long')\n    .transform(email => email.toLowerCase().trim()),\n  source: z.string().optional().default('app_router_page'),\n  marketing_consent: z.boolean().optional().default(true),\n})\n\nexport type NewsletterFormData = z.infer<typeof newsletterSchema>\n\n/**\n * Newsletter signup result interface\n */\nexport interface NewsletterResult {\n  success: boolean\n  error?: string\n  code?: string\n  details?: Record<string, any>\n  message?: string\n}\n\n/**\n * API configuration for newsletter service\n */\nconst NEWSLETTER_CONFIG = {\n  api: {\n    baseUrl: process.env.NEXT_PUBLIC_API_URL || 'https://aclue-backend-production.up.railway.app',\n    timeout: 10000, // 10 seconds\n    endpoint: '/api/v1/newsletter/signup', // Note: API uses 'signup' not 'subscribe'\n  },\n} as const\n\n// =============================================================================\n// SERVER ACTIONS\n// =============================================================================\n\n/**\n * Server action for newsletter signup\n * @param formData - Form data containing email and optional fields\n */\nexport async function newsletterSignupAction(formData: FormData): Promise<NewsletterResult> {\n  console.log('üìß Newsletter signup server action started')\n\n  try {\n    // Get user agent from headers for tracking\n    const headersList = headers()\n    const userAgent = headersList.get('user-agent') || 'Unknown'\n\n    // Extract and validate form data\n    const rawData = {\n      email: formData.get('email') as string,\n      source: formData.get('source') as string || 'app_router_page',\n      marketing_consent: formData.get('marketing_consent') !== 'false', // Default to true\n    }\n\n    console.log('üìã Newsletter form data:', {\n      email: rawData.email,\n      source: rawData.source,\n      marketing_consent: rawData.marketing_consent\n    })\n\n    // Validate using Zod schema\n    const validationResult = newsletterSchema.safeParse(rawData)\n\n    if (!validationResult.success) {\n      console.error('‚ùå Newsletter validation failed:', validationResult.error.errors)\n      return {\n        success: false,\n        error: 'Invalid email address',\n        code: 'VALIDATION_ERROR',\n        details: validationResult.error.errors,\n      }\n    }\n\n    const validatedData = validationResult.data\n\n    // Prepare API payload (match existing backend expectations)\n    const newsletterPayload = {\n      email: validatedData.email,\n      source: validatedData.source,\n      user_agent: userAgent,\n      marketing_consent: validatedData.marketing_consent,\n    }\n\n    console.log('üåê Calling backend newsletter API:', NEWSLETTER_CONFIG.api.baseUrl)\n\n    // Call backend newsletter signup API\n    const response = await fetch(`${NEWSLETTER_CONFIG.api.baseUrl}${NEWSLETTER_CONFIG.api.endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'User-Agent': 'aclue-Web-Server/1.0',\n      },\n      body: JSON.stringify(newsletterPayload),\n      // Temporarily remove AbortSignal.timeout to test if this is causing the issue\n      // signal: AbortSignal.timeout(NEWSLETTER_CONFIG.api.timeout),\n    })\n\n    // Handle API response\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        detail: 'Newsletter signup failed'\n      }))\n\n      console.error('‚ùå Backend newsletter signup failed:', response.status, errorData)\n\n      // Handle specific error cases\n      if (response.status === 409) {\n        return {\n          success: true, // Show success to user for better UX (already subscribed)\n          message: 'Thank you! You\\'re now on our mailing list.',\n          code: 'ALREADY_SUBSCRIBED',\n        }\n      }\n\n      return {\n        success: false,\n        error: errorData.detail || 'Unable to process signup. Please try again.',\n        code: response.status === 400 ? 'INVALID_DATA' : 'SIGNUP_ERROR',\n        details: errorData,\n      }\n    }\n\n    const responseData = await response.json()\n    console.log('‚úÖ Newsletter signup successful:', responseData)\n\n    return {\n      success: true,\n      message: responseData.message || 'Thank you! You\\'re now on our mailing list.',\n      code: 'SIGNUP_SUCCESS',\n    }\n\n  } catch (error: any) {\n    console.error('üí• Newsletter signup error:', error)\n\n    // Enhanced error classification\n    if (error.name === 'AbortError') {\n      return {\n        success: false,\n        error: 'Request timeout. Please try again.',\n        code: 'TIMEOUT_ERROR',\n      }\n    }\n\n    if (error.message?.includes('fetch')) {\n      return {\n        success: false,\n        error: 'Unable to connect to our service. Please check your connection and try again.',\n        code: 'NETWORK_ERROR',\n      }\n    }\n\n    return {\n      success: false,\n      error: 'An unexpected error occurred. Please try again.',\n      code: 'UNKNOWN_ERROR',\n      details: { message: error.message },\n    }\n  }\n}\n\n/**\n * Alternative action with direct email parameter for simpler usage\n * @param email - Email address to subscribe\n * @param source - Source of the signup (default: 'direct')\n */\nexport async function subscribeEmailAction(\n  email: string,\n  source: string = 'direct'\n): Promise<NewsletterResult> {\n  console.log('üìß Direct email subscription started for:', email)\n\n  const formData = new FormData()\n  formData.append('email', email)\n  formData.append('source', source)\n  formData.append('marketing_consent', 'true')\n\n  return newsletterSignupAction(formData)\n}"],"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","ignoreList":[]}