{"version":3,"names":["cov_g8txeeeag","actualCoverage","s","useDarkMode","f","theme","setThemeState","_react","useState","isDark","setIsDark","useEffect","window","b","savedTheme","localStorage","getItem","_config","appConfig","storage","includes","updateDarkMode","shouldBeDark","matchMedia","matches","root","document","documentElement","classList","add","remove","mediaQuery","handleChange","addEventListener","removeEventListener","setTheme","newTheme","setItem","toggleTheme"],"sources":["/home/jack/Documents/aclue-preprod/web/src/hooks/useDarkMode.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { appConfig } from '@/config';\n\nexport type Theme = 'light' | 'dark' | 'system';\n\ninterface UseDarkModeReturn {\n  theme: Theme;\n  isDark: boolean;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nexport function useDarkMode(): UseDarkModeReturn {\n  const [theme, setThemeState] = useState<Theme>('system');\n  const [isDark, setIsDark] = useState(false);\n\n  // Initialize theme from localStorage\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const savedTheme = localStorage.getItem(appConfig.storage.theme) as Theme;\n      if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {\n        setThemeState(savedTheme);\n      }\n    }\n  }, []);\n\n  // Update dark mode state based on theme preference\n  useEffect(() => {\n    const updateDarkMode = () => {\n      let shouldBeDark = false;\n\n      if (theme === 'dark') {\n        shouldBeDark = true;\n      } else if (theme === 'light') {\n        shouldBeDark = false;\n      } else if (theme === 'system') {\n        shouldBeDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      }\n\n      setIsDark(shouldBeDark);\n\n      // Update DOM\n      if (typeof window !== 'undefined') {\n        const root = window.document.documentElement;\n        if (shouldBeDark) {\n          root.classList.add('dark');\n        } else {\n          root.classList.remove('dark');\n        }\n      }\n    };\n\n    updateDarkMode();\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        updateDarkMode();\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  // Set theme and persist to localStorage\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(appConfig.storage.theme, newTheme);\n    }\n  };\n\n  // Toggle between light and dark mode\n  const toggleTheme = () => {\n    if (theme === 'system') {\n      // If currently system, toggle to the opposite of current dark state\n      setTheme(isDark ? 'light' : 'dark');\n    } else {\n      // If manually set, toggle between light and dark\n      setTheme(theme === 'light' ? 'dark' : 'light');\n    }\n  };\n\n  return {\n    theme,\n    isDark,\n    setTheme,\n    toggleTheme,\n  };\n}"],"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","ignoreList":[]}