{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/components/auth/__tests__/AuthGuard.test.tsx"],"sourcesContent":["/**\n * AuthGuard Component Test Suite\n * \n * Comprehensive tests for the authentication guard component that protects\n * routes and ensures proper access control throughout the application.\n * \n * Test Coverage:\n * - Authentication state validation\n * - Route protection and redirection logic\n * - Loading states and user experience\n * - Error handling and edge cases\n * - Integration with authentication context\n * \n * Testing Strategy:\n * Based on React Testing Library patterns for user-centric testing,\n * focusing on behaviour rather than implementation details.\n * \n * Authentication Context:\n * Tests the integration with AuthContext and proper handling of\n * authenticated vs unauthenticated states for route protection.\n */\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { useRouter } from 'next/router';\nimport { AuthGuard } from '../AuthGuard';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Mock Next.js router\njest.mock('next/router', () => ({\n  useRouter: jest.fn(),\n}));\n\n// Mock authentication hook\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: jest.fn(),\n}));\n\n// ==============================================================================\n// TEST SETUP AND UTILITIES\n// ==============================================================================\n\n// Mock router implementation\nconst mockPush = jest.fn();\nconst mockRouter = {\n  push: mockPush,\n  pathname: '/dashboard',\n  query: {},\n  asPath: '/dashboard',\n};\n\n// Mock child component for testing\nconst MockChildComponent = () => <div>Protected Content</div>;\n\n// Test wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return <div data-testid=\"test-wrapper\">{children}</div>;\n};\n\n// ==============================================================================\n// AUTHENTICATION GUARD TESTS\n// ==============================================================================\n\ndescribe('AuthGuard Component', () => {\n  // Setup mocks before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (useRouter as jest.Mock).mockReturnValue(mockRouter);\n  });\n\n  describe('Authenticated User Access', () => {\n    /**\n     * Test authenticated user can access protected content.\n     * \n     * Validates that when user is properly authenticated,\n     * the AuthGuard renders children without redirecting.\n     * \n     * Business Context:\n     * Authenticated users should have seamless access to protected\n     * routes without unnecessary redirects or loading states.\n     */\n    it('should render protected content for authenticated users', async () => {\n      // Mock authenticated user state\n      (useAuth as jest.Mock).mockReturnValue({\n        user: {\n          id: 'user-123',\n          email: 'test@aclue.app',\n          firstName: 'Test',\n          lastName: 'User',\n        },\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      // Render AuthGuard with protected content\n      render(\n        <AuthGuard>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify protected content is rendered\n      expect(screen.getByText('Protected Content')).toBeInTheDocument();\n      \n      // Verify no redirect occurred\n      expect(mockPush).not.toHaveBeenCalled();\n    });\n\n    /**\n     * Test AuthGuard handles user data properly.\n     * \n     * Validates that user information is correctly processed\n     * and available to child components through context.\n     */\n    it('should provide user context to protected components', async () => {\n      const mockUser = {\n        id: 'user-456',\n        email: 'premium@aclue.app',\n        firstName: 'Premium',\n        lastName: 'User',\n        subscriptionTier: 'premium',\n      };\n\n      (useAuth as jest.Mock).mockReturnValue({\n        user: mockUser,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      // Test component that uses auth context\n      const TestChildComponent = () => {\n        const { user } = useAuth();\n        return (\n          <div>\n            <span data-testid=\"user-email\">{user?.email}</span>\n            <span data-testid=\"user-name\">{user?.firstName} {user?.lastName}</span>\n          </div>\n        );\n      };\n\n      render(\n        <AuthGuard>\n          <TestChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify user data is accessible\n      expect(screen.getByTestId('user-email')).toHaveTextContent('premium@aclue.app');\n      expect(screen.getByTestId('user-name')).toHaveTextContent('Premium User');\n    });\n  });\n\n  describe('Unauthenticated User Handling', () => {\n    /**\n     * Test unauthenticated user redirection to login.\n     * \n     * Validates that users without valid authentication\n     * are redirected to the login page with proper return URL.\n     * \n     * Security Context:\n     * Critical security feature ensuring protected routes\n     * are not accessible without proper authentication.\n     */\n    it('should redirect unauthenticated users to login', async () => {\n      // Mock unauthenticated state\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n\n      // Render AuthGuard\n      render(\n        <AuthGuard>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Wait for redirect to occur\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/login?returnUrl=/dashboard');\n      });\n\n      // Verify protected content is not rendered\n      expect(screen.queryByText('Protected Content')).not.toBeInTheDocument();\n    });\n\n    /**\n     * Test proper return URL construction for redirects.\n     * \n     * Validates that users are redirected back to their original\n     * destination after successful authentication.\n     */\n    it('should preserve return URL for post-login redirect', async () => {\n      // Mock complex route with query parameters\n      (useRouter as jest.Mock).mockReturnValue({\n        ...mockRouter,\n        asPath: '/dashboard/recommendations?category=electronics&price=100-500',\n      });\n\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n\n      render(\n        <AuthGuard>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Wait for redirect with encoded return URL\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith(\n          '/auth/login?returnUrl=' + \n          encodeURIComponent('/dashboard/recommendations?category=electronics&price=100-500')\n        );\n      });\n    });\n  });\n\n  describe('Loading States', () => {\n    /**\n     * Test loading state display during authentication check.\n     * \n     * Validates that appropriate loading UI is shown while\n     * authentication status is being determined.\n     * \n     * User Experience Context:\n     * Prevents flash of unauthenticated content and provides\n     * smooth loading experience during auth state resolution.\n     */\n    it('should display loading state during authentication check', () => {\n      // Mock loading authentication state\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: true,\n        error: null,\n      });\n\n      render(\n        <AuthGuard>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify loading indicator is displayed\n      expect(screen.getByText('Loading...')).toBeInTheDocument();\n      expect(screen.queryByText('Protected Content')).not.toBeInTheDocument();\n      \n      // Verify no redirect during loading\n      expect(mockPush).not.toHaveBeenCalled();\n    });\n\n    /**\n     * Test loading state with custom loading component.\n     * \n     * Validates that custom loading components can be provided\n     * for branded loading experiences.\n     */\n    it('should render custom loading component when provided', () => {\n      const CustomLoader = () => (\n        <div data-testid=\"custom-loader\">\n          <div className=\"spinner\" />\n          <span>Authenticating...</span>\n        </div>\n      );\n\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: true,\n        error: null,\n      });\n\n      render(\n        <AuthGuard loadingComponent={<CustomLoader />}>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify custom loading component is rendered\n      expect(screen.getByTestId('custom-loader')).toBeInTheDocument();\n      expect(screen.getByText('Authenticating...')).toBeInTheDocument();\n      expect(screen.queryByText('Loading...')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    /**\n     * Test authentication error handling and display.\n     * \n     * Validates that authentication errors are properly handled\n     * with appropriate error messages and recovery options.\n     * \n     * Error Handling Context:\n     * Users should be informed of authentication failures\n     * with clear next steps for resolution.\n     */\n    it('should handle and display authentication errors', () => {\n      const authError = {\n        message: 'Authentication failed',\n        code: 'AUTH_ERROR',\n      };\n\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: authError,\n      });\n\n      render(\n        <AuthGuard>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify error message is displayed\n      expect(screen.getByText('Authentication Error')).toBeInTheDocument();\n      expect(screen.getByText('Authentication failed')).toBeInTheDocument();\n      \n      // Verify protected content is not rendered\n      expect(screen.queryByText('Protected Content')).not.toBeInTheDocument();\n    });\n\n    /**\n     * Test token expiration handling.\n     * \n     * Validates that expired tokens are handled gracefully\n     * with automatic redirect to login for re-authentication.\n     */\n    it('should handle token expiration gracefully', async () => {\n      const tokenExpiredError = {\n        message: 'Token has expired',\n        code: 'TOKEN_EXPIRED',\n      };\n\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: tokenExpiredError,\n      });\n\n      render(\n        <AuthGuard>\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify redirect to login occurs\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/login?returnUrl=/dashboard');\n      });\n    });\n  });\n\n  describe('Role-Based Access Control', () => {\n    /**\n     * Test role-based access restrictions.\n     * \n     * Validates that users with insufficient permissions\n     * are properly restricted from accessing protected content.\n     * \n     * Authorization Context:\n     * Different user roles (free, premium, admin) should have\n     * appropriate access controls for feature gating.\n     */\n    it('should restrict access based on required roles', () => {\n      // Mock user with basic role\n      (useAuth as jest.Mock).mockReturnValue({\n        user: {\n          id: 'user-789',\n          email: 'basic@aclue.app',\n          firstName: 'Basic',\n          lastName: 'User',\n          subscriptionTier: 'free',\n        },\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      // AuthGuard with premium role requirement\n      render(\n        <AuthGuard requiredRole=\"premium\">\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify access denied message\n      expect(screen.getByText('Access Denied')).toBeInTheDocument();\n      expect(screen.getByText('Upgrade to Premium')).toBeInTheDocument();\n      expect(screen.queryByText('Protected Content')).not.toBeInTheDocument();\n    });\n\n    /**\n     * Test successful role-based access.\n     * \n     * Validates that users with sufficient permissions\n     * can access role-protected content.\n     */\n    it('should grant access to users with sufficient roles', () => {\n      // Mock user with premium role\n      (useAuth as jest.Mock).mockReturnValue({\n        user: {\n          id: 'user-890',\n          email: 'premium@aclue.app',\n          firstName: 'Premium',\n          lastName: 'User',\n          subscriptionTier: 'premium',\n        },\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      // AuthGuard with premium role requirement\n      render(\n        <AuthGuard requiredRole=\"premium\">\n          <MockChildComponent />\n        </AuthGuard>\n      );\n\n      // Verify access granted\n      expect(screen.getByText('Protected Content')).toBeInTheDocument();\n      expect(screen.queryByText('Access Denied')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Integration Tests', () => {\n    /**\n     * Test integration with authentication context changes.\n     * \n     * Validates that AuthGuard properly responds to changes\n     * in authentication state during component lifecycle.\n     */\n    it('should respond to authentication state changes', async () => {\n      // Start with unauthenticated state\n      const { rerender } = render(\n        <TestWrapper>\n          <AuthGuard>\n            <MockChildComponent />\n          </AuthGuard>\n        </TestWrapper>\n      );\n\n      // Initially unauthenticated\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n\n      rerender(\n        <TestWrapper>\n          <AuthGuard>\n            <MockChildComponent />\n          </AuthGuard>\n        </TestWrapper>\n      );\n\n      // Should redirect to login\n      await waitFor(() => {\n        expect(mockPush).toHaveBeenCalledWith('/auth/login?returnUrl=/dashboard');\n      });\n\n      // Clear the mock and update to authenticated state\n      mockPush.mockClear();\n      (useAuth as jest.Mock).mockReturnValue({\n        user: {\n          id: 'user-991',\n          email: 'newauth@aclue.app',\n          firstName: 'New',\n          lastName: 'User',\n        },\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      rerender(\n        <TestWrapper>\n          <AuthGuard>\n            <MockChildComponent />\n          </AuthGuard>\n        </TestWrapper>\n      );\n\n      // Should now render protected content\n      expect(screen.getByText('Protected Content')).toBeInTheDocument();\n      expect(mockPush).not.toHaveBeenCalled();\n    });\n\n    /**\n     * Test AuthGuard with multiple children components.\n     * \n     * Validates that complex component trees are properly\n     * handled within authentication protection.\n     */\n    it('should handle complex component trees', () => {\n      (useAuth as jest.Mock).mockReturnValue({\n        user: {\n          id: 'user-992',\n          email: 'complex@aclue.app',\n          firstName: 'Complex',\n          lastName: 'User',\n        },\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      const ComplexChildren = () => (\n        <div>\n          <header data-testid=\"protected-header\">Protected Header</header>\n          <main data-testid=\"protected-main\">\n            <section data-testid=\"protected-section\">Protected Section</section>\n          </main>\n          <footer data-testid=\"protected-footer\">Protected Footer</footer>\n        </div>\n      );\n\n      render(\n        <AuthGuard>\n          <ComplexChildren />\n        </AuthGuard>\n      );\n\n      // Verify all protected elements are rendered\n      expect(screen.getByTestId('protected-header')).toBeInTheDocument();\n      expect(screen.getByTestId('protected-main')).toBeInTheDocument();\n      expect(screen.getByTestId('protected-section')).toBeInTheDocument();\n      expect(screen.getByTestId('protected-footer')).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useRouter","fn","useAuth","mockPush","mockRouter","push","pathname","query","asPath","MockChildComponent","div","TestWrapper","children","data-testid","describe","beforeEach","clearAllMocks","mockReturnValue","it","user","id","email","firstName","lastName","isAuthenticated","isLoading","error","render","AuthGuard","expect","screen","getByText","toBeInTheDocument","not","toHaveBeenCalled","mockUser","subscriptionTier","TestChildComponent","span","getByTestId","toHaveTextContent","waitFor","toHaveBeenCalledWith","queryByText","encodeURIComponent","CustomLoader","className","loadingComponent","authError","message","code","tokenExpiredError","requiredRole","rerender","mockClear","ComplexChildren","header","main","section","footer"],"mappings":"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"}