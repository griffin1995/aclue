9e6f4eee6f00f1ca78b5d16f2e1e0095
/**
 * Amazon Affiliate Links Service
 * 
 * Production-ready implementation for Amazon Associates UK affiliate link generation,
 * tracking, analytics, and revenue optimization. Implements industry-standard
 * practices for affiliate marketing compliance and performance tracking.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AmazonAffiliateService: function() {
        return AmazonAffiliateService;
    },
    affiliateService: function() {
        return affiliateService;
    },
    extractASIN: function() {
        return extractASIN;
    },
    generateAffiliateLink: function() {
        return generateAffiliateLink;
    },
    generateSearchLink: function() {
        return generateSearchLink;
    },
    getAffiliateAnalytics: function() {
        return getAffiliateAnalytics;
    },
    getCommissionRate: function() {
        return getCommissionRate;
    },
    isValidAmazonUrl: function() {
        return isValidAmazonUrl;
    },
    trackAffiliateClick: function() {
        return trackAffiliateClick;
    },
    trackAffiliateConversion: function() {
        return trackAffiliateConversion;
    }
});
const _config = require("../config");
const _analytics = require("./analytics");
class AmazonAffiliateService {
    constructor(){
        this.clickEvents = [];
        this.conversionEvents = [];
        this.initializeTracking();
    }
    static getInstance() {
        if (!AmazonAffiliateService.instance) {
            AmazonAffiliateService.instance = new AmazonAffiliateService();
        }
        return AmazonAffiliateService.instance;
    }
    /**
   * Initialize affiliate tracking and analytics
   */ initializeTracking() {
        if (typeof window !== "undefined") {
            // Load existing events from localStorage
            const storedClicks = localStorage.getItem("aclue_affiliate_clicks");
            const storedConversions = localStorage.getItem("aclue_affiliate_conversions");
            if (storedClicks) {
                try {
                    this.clickEvents = JSON.parse(storedClicks);
                } catch (error) {
                    console.error("Error loading affiliate click events:", error);
                }
            }
            if (storedConversions) {
                try {
                    this.conversionEvents = JSON.parse(storedConversions);
                } catch (error) {
                    console.error("Error loading affiliate conversion events:", error);
                }
            }
            // Clean up old events (older than 30 days)
            this.cleanupOldEvents();
            // Set up periodic cleanup
            setInterval(()=>this.cleanupOldEvents(), 24 * 60 * 60 * 1000); // Daily cleanup
        }
    }
    /**
   * Generate affiliate link with comprehensive tracking
   */ generateAffiliateLink(productUrl, options = {}) {
        try {
            const url = new URL(productUrl);
            // Ensure we're using the correct Amazon domain
            if (!this.isValidAmazonUrl(productUrl)) {
                console.warn("Invalid Amazon URL provided:", productUrl);
                return productUrl;
            }
            // Convert to UK domain if needed
            if (!url.hostname.includes("amazon.co.uk")) {
                url.hostname = "amazon.co.uk";
            }
            // Add associate tag
            url.searchParams.set("tag", options.associateTag || _config.amazonConfig.uk.associateTag);
            // Add tracking parameters
            if (options.ref) {
                url.searchParams.set("ref_", options.ref);
            }
            // UTM parameters for analytics
            if (options.campaign) {
                url.searchParams.set("utm_campaign", options.campaign);
            }
            if (options.medium) {
                url.searchParams.set("utm_medium", options.medium);
            }
            if (options.source) {
                url.searchParams.set("utm_source", options.source);
            }
            if (options.term) {
                url.searchParams.set("utm_term", options.term);
            }
            if (options.content) {
                url.searchParams.set("utm_content", options.content);
            }
            // Add custom parameters
            if (options.customParameters) {
                Object.entries(options.customParameters).forEach(([key, value])=>{
                    url.searchParams.set(key, value);
                });
            }
            // Add unique tracking identifier
            const trackingId = this.generateTrackingId();
            url.searchParams.set("gs_track", trackingId);
            // Add timestamp
            url.searchParams.set("timestamp", Date.now().toString());
            return url.toString();
        } catch (error) {
            console.error("Error generating affiliate link:", error);
            return productUrl;
        }
    }
    /**
   * Generate Amazon search link with affiliate tracking
   */ generateSearchLink(searchTerm, category, options = {}) {
        const baseUrl = "https://amazon.co.uk/s";
        const url = new URL(baseUrl);
        // Search parameters
        url.searchParams.set("k", searchTerm);
        url.searchParams.set("tag", options.associateTag || _config.amazonConfig.uk.associateTag);
        // Category filter
        if (category && _config.amazonConfig.productCategories[category]) {
            url.searchParams.set("i", _config.amazonConfig.productCategories[category]);
        }
        // Tracking parameters
        if (options.ref) {
            url.searchParams.set("ref", options.ref);
        }
        // UTM parameters
        if (options.campaign) url.searchParams.set("utm_campaign", options.campaign);
        if (options.medium) url.searchParams.set("utm_medium", options.medium);
        if (options.source) url.searchParams.set("utm_source", options.source);
        // Add tracking identifier
        const trackingId = this.generateTrackingId();
        url.searchParams.set("gs_track", trackingId);
        return url.toString();
    }
    /**
   * Track affiliate link click with comprehensive analytics
   */ async trackAffiliateClick(event) {
        const clickEvent = {
            ...event,
            timestamp: Date.now(),
            userAgent: typeof window !== "undefined" ? navigator.userAgent : undefined,
            referrer: typeof window !== "undefined" ? document.referrer : undefined
        };
        // Store event locally
        this.clickEvents.push(clickEvent);
        this.persistClickEvents();
        // Send to analytics service
        try {
            await _analytics.analytics.track("affiliate_link_clicked", {
                affiliate_product_id: event.productId,
                affiliate_asin: event.asin,
                affiliate_category: event.category,
                affiliate_price: event.price,
                affiliate_currency: event.currency,
                affiliate_source: event.source,
                affiliate_url: event.affiliateUrl,
                original_url: event.originalUrl,
                user_id: event.userId,
                session_id: event.sessionId
            });
        } catch (error) {
            console.error("Error sending affiliate click to analytics:", error);
        }
        // Send to backend for server-side tracking
        if (_config.config.features.affiliateTracking) {
            try {
                await fetch(`${_config.config.apiUrl}/api/v1/analytics/affiliate/click`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(clickEvent)
                });
            } catch (error) {
                console.error("Error sending affiliate click to backend:", error);
            }
        }
    }
    /**
   * Track affiliate conversion (when user makes a purchase)
   */ async trackAffiliateConversion(event) {
        const conversionEvent = {
            ...event,
            conversionTimestamp: Date.now()
        };
        // Store event locally
        this.conversionEvents.push(conversionEvent);
        this.persistConversionEvents();
        // Send to analytics service
        try {
            await _analytics.analytics.track("affiliate_conversion", {
                affiliate_order_id: event.orderId,
                affiliate_product_id: event.productId,
                affiliate_asin: event.asin,
                affiliate_revenue: event.revenue,
                affiliate_commission: event.commission,
                affiliate_currency: event.currency,
                affiliate_quantity: event.quantity,
                affiliate_category: event.category,
                affiliate_url: event.affiliateUrl,
                conversion_time_minutes: (conversionEvent.conversionTimestamp - event.clickTimestamp) / (1000 * 60),
                user_id: event.userId,
                session_id: event.sessionId
            });
        } catch (error) {
            console.error("Error sending affiliate conversion to analytics:", error);
        }
        // Send to backend
        if (_config.config.features.affiliateTracking) {
            try {
                await fetch(`${_config.config.apiUrl}/api/v1/analytics/affiliate/conversion`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(conversionEvent)
                });
            } catch (error) {
                console.error("Error sending affiliate conversion to backend:", error);
            }
        }
    }
    /**
   * Get comprehensive affiliate analytics
   */ getAnalytics(timeframe = "month") {
        const now = Date.now();
        const timeframMs = {
            day: 24 * 60 * 60 * 1000,
            week: 7 * 24 * 60 * 60 * 1000,
            month: 30 * 24 * 60 * 60 * 1000,
            year: 365 * 24 * 60 * 60 * 1000,
            all: Infinity
        };
        const cutoff = now - timeframMs[timeframe];
        // Filter events by timeframe
        const relevantClicks = this.clickEvents.filter((event)=>event.timestamp >= cutoff);
        const relevantConversions = this.conversionEvents.filter((event)=>event.conversionTimestamp >= cutoff);
        // Calculate metrics
        const totalClicks = relevantClicks.length;
        const totalConversions = relevantConversions.length;
        const totalRevenue = relevantConversions.reduce((sum, event)=>sum + event.revenue, 0);
        const totalCommission = relevantConversions.reduce((sum, event)=>sum + event.commission, 0);
        const conversionRate = totalClicks > 0 ? totalConversions / totalClicks : 0;
        const averageOrderValue = totalConversions > 0 ? totalRevenue / totalConversions : 0;
        // Clicks by category
        const clicksByCategory = {};
        relevantClicks.forEach((event)=>{
            if (event.category) {
                clicksByCategory[event.category] = (clicksByCategory[event.category] || 0) + 1;
            }
        });
        // Revenue by category
        const revenueByCategory = {};
        relevantConversions.forEach((event)=>{
            if (event.category) {
                revenueByCategory[event.category] = (revenueByCategory[event.category] || 0) + event.revenue;
            }
        });
        // Performance by source
        const performanceBySource = {};
        const clicksBySource = {};
        const conversionsBySource = {};
        const revenueBySource = {};
        relevantClicks.forEach((event)=>{
            clicksBySource[event.source] = (clicksBySource[event.source] || 0) + 1;
        });
        relevantConversions.forEach((event)=>{
            // Find corresponding click event
            const clickEvent = relevantClicks.find((click)=>click.productId === event.productId && click.timestamp <= event.clickTimestamp);
            if (clickEvent) {
                conversionsBySource[clickEvent.source] = (conversionsBySource[clickEvent.source] || 0) + 1;
                revenueBySource[clickEvent.source] = (revenueBySource[clickEvent.source] || 0) + event.revenue;
            }
        });
        Object.keys(clicksBySource).forEach((source)=>{
            const clicks = clicksBySource[source] || 0;
            const conversions = conversionsBySource[source] || 0;
            const revenue = revenueBySource[source] || 0;
            performanceBySource[source] = {
                clicks,
                conversions,
                revenue,
                conversionRate: clicks > 0 ? conversions / clicks : 0
            };
        });
        return {
            totalClicks,
            totalConversions,
            totalRevenue,
            totalCommission,
            conversionRate,
            averageOrderValue,
            clicksByCategory,
            revenueByCategory,
            topPerformingProducts: [],
            performanceBySource
        };
    }
    /**
   * Extract ASIN from Amazon product URL
   */ extractASIN(productUrl) {
        try {
            const asinPatterns = [
                /\/dp\/([A-Z0-9]{10})/,
                /\/gp\/product\/([A-Z0-9]{10})/,
                /\/product\/([A-Z0-9]{10})/,
                /\/ASIN\/([A-Z0-9]{10})/,
                /asin=([A-Z0-9]{10})/i,
                /\/([A-Z0-9]{10})(?:\/|\?|$)/
            ];
            for (const pattern of asinPatterns){
                const match = productUrl.match(pattern);
                if (match && match[1]) {
                    return match[1];
                }
            }
            return null;
        } catch (error) {
            console.error("Error extracting ASIN:", error);
            return null;
        }
    }
    /**
   * Validate Amazon URL
   */ isValidAmazonUrl(url) {
        try {
            const urlObj = new URL(url);
            const validDomains = [
                "amazon.co.uk",
                "amazon.com",
                "amazon.de",
                "amazon.fr",
                "amazon.it",
                "amazon.es",
                "amazon.ca",
                "amazon.com.au",
                "amazon.co.jp",
                "amazon.com.br",
                "amazon.in",
                "amazon.com.mx",
                "amazon.cn",
                "amazon.sg",
                "amazon.ae",
                "amazon.nl",
                "amazon.se",
                "amazon.pl"
            ];
            return validDomains.some((domain)=>urlObj.hostname.includes(domain));
        } catch (error) {
            return false;
        }
    }
    /**
   * Get commission rate for product category
   */ getCommissionRate(category) {
        const normalizedCategory = category.toLowerCase().replace(/\s+/g, "");
        const categoryMappings = {
            "electronics": "electronics",
            "computers": "electronics",
            "mobile": "electronics",
            "fashion": "fashion",
            "clothing": "fashion",
            "shoes": "fashion",
            "accessories": "fashion",
            "homeandgarden": "homeAndGarden",
            "home": "homeAndGarden",
            "garden": "homeAndGarden",
            "furniture": "homeAndGarden",
            "kitchen": "homeAndGarden",
            "sportsandoutdoors": "sportsAndOutdoors",
            "sports": "sportsAndOutdoors",
            "fitness": "sportsAndOutdoors",
            "outdoor": "sportsAndOutdoors",
            "books": "books",
            "ebooks": "books",
            "kindle": "books",
            "toys": "toys",
            "toysgames": "toys",
            "games": "toys",
            "videogames": "toys",
            "beauty": "beautyAndPersonalCare",
            "beautyandpersonalcare": "beautyAndPersonalCare",
            "personalcare": "beautyAndPersonalCare",
            "health": "beautyAndPersonalCare",
            "automotive": "automotive",
            "car": "automotive",
            "motorcycle": "automotive",
            "industrial": "industrial",
            "tools": "industrial",
            "business": "industrial"
        };
        const mappedCategory = categoryMappings[normalizedCategory];
        return _config.amazonConfig.commissionRates[mappedCategory] || _config.amazonConfig.commissionRates.default;
    }
    /**
   * Generate unique tracking identifier
   */ generateTrackingId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substr(2, 9);
        return `gs_${timestamp}_${random}`;
    }
    /**
   * Persist click events to localStorage
   */ persistClickEvents() {
        if (typeof window !== "undefined") {
            try {
                localStorage.setItem("aclue_affiliate_clicks", JSON.stringify(this.clickEvents));
            } catch (error) {
                console.error("Error persisting affiliate click events:", error);
            }
        }
    }
    /**
   * Persist conversion events to localStorage
   */ persistConversionEvents() {
        if (typeof window !== "undefined") {
            try {
                localStorage.setItem("aclue_affiliate_conversions", JSON.stringify(this.conversionEvents));
            } catch (error) {
                console.error("Error persisting affiliate conversion events:", error);
            }
        }
    }
    /**
   * Clean up old events (older than 30 days)
   */ cleanupOldEvents() {
        const thirtyDaysAgo = Date.now() - 30 * 24 * 60 * 60 * 1000;
        this.clickEvents = this.clickEvents.filter((event)=>event.timestamp >= thirtyDaysAgo);
        this.conversionEvents = this.conversionEvents.filter((event)=>event.conversionTimestamp >= thirtyDaysAgo);
        this.persistClickEvents();
        this.persistConversionEvents();
    }
}
const affiliateService = AmazonAffiliateService.getInstance();
const generateAffiliateLink = (url, options)=>affiliateService.generateAffiliateLink(url, options);
const generateSearchLink = (searchTerm, category, options)=>affiliateService.generateSearchLink(searchTerm, category, options);
const trackAffiliateClick = (event)=>affiliateService.trackAffiliateClick(event);
const trackAffiliateConversion = (event)=>affiliateService.trackAffiliateConversion(event);
const extractASIN = (url)=>affiliateService.extractASIN(url);
const isValidAmazonUrl = (url)=>affiliateService.isValidAmazonUrl(url);
const getCommissionRate = (category)=>affiliateService.getCommissionRate(category);
const getAffiliateAnalytics = (timeframe)=>affiliateService.getAnalytics(timeframe);

//# sourceMappingURL=data:application/json;base64,