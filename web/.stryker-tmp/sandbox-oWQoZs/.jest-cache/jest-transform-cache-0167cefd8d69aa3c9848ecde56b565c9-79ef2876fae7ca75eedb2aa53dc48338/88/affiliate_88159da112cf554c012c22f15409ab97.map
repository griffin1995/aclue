{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/lib/affiliate.ts"],"sourcesContent":["/**\n * Amazon Affiliate Links Service\n * \n * Production-ready implementation for Amazon Associates UK affiliate link generation,\n * tracking, analytics, and revenue optimization. Implements industry-standard\n * practices for affiliate marketing compliance and performance tracking.\n */\n\nimport { amazonConfig, config } from '@/config';\nimport { analytics } from '@/lib/analytics';\n\nexport interface AffiliateClickEvent {\n  productId?: string;\n  asin?: string;\n  category?: string;\n  price?: number;\n  currency?: string;\n  affiliateUrl: string;\n  originalUrl?: string;\n  source: 'recommendation' | 'search' | 'category' | 'direct';\n  userId?: string;\n  sessionId?: string;\n  timestamp: number;\n  referrer?: string;\n  userAgent?: string;\n}\n\nexport interface AffiliateConversionEvent {\n  orderId: string;\n  productId?: string;\n  asin?: string;\n  revenue: number;\n  commission: number;\n  currency: string;\n  quantity: number;\n  category?: string;\n  affiliateUrl: string;\n  clickTimestamp: number;\n  conversionTimestamp: number;\n  userId?: string;\n  sessionId?: string;\n}\n\nexport interface AffiliateProduct {\n  id: string;\n  asin?: string;\n  title: string;\n  description?: string;\n  price?: number;\n  currency?: string;\n  category?: string;\n  imageUrl?: string;\n  originalUrl: string;\n  affiliateUrl?: string;\n  commissionRate?: number;\n  estimatedCommission?: number;\n  brand?: string;\n  availability?: string;\n  rating?: number;\n  reviewCount?: number;\n  features?: string[];\n  lastUpdated: Date;\n}\n\nexport interface AffiliateLinkOptions {\n  associateTag?: string;\n  ref?: string;\n  campaign?: string;\n  medium?: string;\n  source?: string;\n  term?: string;\n  content?: string;\n  customParameters?: Record<string, string>;\n}\n\nexport interface AffiliateAnalytics {\n  totalClicks: number;\n  totalConversions: number;\n  totalRevenue: number;\n  totalCommission: number;\n  conversionRate: number;\n  averageOrderValue: number;\n  clicksByCategory: Record<string, number>;\n  revenueByCategory: Record<string, number>;\n  topPerformingProducts: AffiliateProduct[];\n  performanceBySource: Record<string, {\n    clicks: number;\n    conversions: number;\n    revenue: number;\n    conversionRate: number;\n  }>;\n}\n\n/**\n * Comprehensive Amazon Affiliate Links Service\n * Handles link generation, tracking, analytics, and compliance\n */\nexport class AmazonAffiliateService {\n  private static instance: AmazonAffiliateService;\n  private clickEvents: AffiliateClickEvent[] = [];\n  private conversionEvents: AffiliateConversionEvent[] = [];\n  \n  private constructor() {\n    this.initializeTracking();\n  }\n  \n  static getInstance(): AmazonAffiliateService {\n    if (!AmazonAffiliateService.instance) {\n      AmazonAffiliateService.instance = new AmazonAffiliateService();\n    }\n    return AmazonAffiliateService.instance;\n  }\n  \n  /**\n   * Initialize affiliate tracking and analytics\n   */\n  private initializeTracking(): void {\n    if (typeof window !== 'undefined') {\n      // Load existing events from localStorage\n      const storedClicks = localStorage.getItem('aclue_affiliate_clicks');\n      const storedConversions = localStorage.getItem('aclue_affiliate_conversions');\n      \n      if (storedClicks) {\n        try {\n          this.clickEvents = JSON.parse(storedClicks);\n        } catch (error) {\n          console.error('Error loading affiliate click events:', error);\n        }\n      }\n      \n      if (storedConversions) {\n        try {\n          this.conversionEvents = JSON.parse(storedConversions);\n        } catch (error) {\n          console.error('Error loading affiliate conversion events:', error);\n        }\n      }\n      \n      // Clean up old events (older than 30 days)\n      this.cleanupOldEvents();\n      \n      // Set up periodic cleanup\n      setInterval(() => this.cleanupOldEvents(), 24 * 60 * 60 * 1000); // Daily cleanup\n    }\n  }\n  \n  /**\n   * Generate affiliate link with comprehensive tracking\n   */\n  generateAffiliateLink(\n    productUrl: string,\n    options: AffiliateLinkOptions = {}\n  ): string {\n    try {\n      const url = new URL(productUrl);\n      \n      // Ensure we're using the correct Amazon domain\n      if (!this.isValidAmazonUrl(productUrl)) {\n        console.warn('Invalid Amazon URL provided:', productUrl);\n        return productUrl;\n      }\n      \n      // Convert to UK domain if needed\n      if (!url.hostname.includes('amazon.co.uk')) {\n        url.hostname = 'amazon.co.uk';\n      }\n      \n      // Add associate tag\n      url.searchParams.set('tag', options.associateTag || amazonConfig.uk.associateTag);\n      \n      // Add tracking parameters\n      if (options.ref) {\n        url.searchParams.set('ref_', options.ref);\n      }\n      \n      // UTM parameters for analytics\n      if (options.campaign) {\n        url.searchParams.set('utm_campaign', options.campaign);\n      }\n      \n      if (options.medium) {\n        url.searchParams.set('utm_medium', options.medium);\n      }\n      \n      if (options.source) {\n        url.searchParams.set('utm_source', options.source);\n      }\n      \n      if (options.term) {\n        url.searchParams.set('utm_term', options.term);\n      }\n      \n      if (options.content) {\n        url.searchParams.set('utm_content', options.content);\n      }\n      \n      // Add custom parameters\n      if (options.customParameters) {\n        Object.entries(options.customParameters).forEach(([key, value]) => {\n          url.searchParams.set(key, value);\n        });\n      }\n      \n      // Add unique tracking identifier\n      const trackingId = this.generateTrackingId();\n      url.searchParams.set('gs_track', trackingId);\n      \n      // Add timestamp\n      url.searchParams.set('timestamp', Date.now().toString());\n      \n      return url.toString();\n    } catch (error) {\n      console.error('Error generating affiliate link:', error);\n      return productUrl;\n    }\n  }\n  \n  /**\n   * Generate Amazon search link with affiliate tracking\n   */\n  generateSearchLink(\n    searchTerm: string,\n    category?: string,\n    options: AffiliateLinkOptions = {}\n  ): string {\n    const baseUrl = 'https://amazon.co.uk/s';\n    const url = new URL(baseUrl);\n    \n    // Search parameters\n    url.searchParams.set('k', searchTerm);\n    url.searchParams.set('tag', options.associateTag || amazonConfig.uk.associateTag);\n    \n    // Category filter\n    if (category && amazonConfig.productCategories[category]) {\n      url.searchParams.set('i', amazonConfig.productCategories[category]);\n    }\n    \n    // Tracking parameters\n    if (options.ref) {\n      url.searchParams.set('ref', options.ref);\n    }\n    \n    // UTM parameters\n    if (options.campaign) url.searchParams.set('utm_campaign', options.campaign);\n    if (options.medium) url.searchParams.set('utm_medium', options.medium);\n    if (options.source) url.searchParams.set('utm_source', options.source);\n    \n    // Add tracking identifier\n    const trackingId = this.generateTrackingId();\n    url.searchParams.set('gs_track', trackingId);\n    \n    return url.toString();\n  }\n  \n  /**\n   * Track affiliate link click with comprehensive analytics\n   */\n  async trackAffiliateClick(event: Omit<AffiliateClickEvent, 'timestamp'>): Promise<void> {\n    const clickEvent: AffiliateClickEvent = {\n      ...event,\n      timestamp: Date.now(),\n      userAgent: typeof window !== 'undefined' ? navigator.userAgent : undefined,\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n    };\n    \n    // Store event locally\n    this.clickEvents.push(clickEvent);\n    this.persistClickEvents();\n    \n    // Send to analytics service\n    try {\n      await analytics.track('affiliate_link_clicked', {\n        affiliate_product_id: event.productId,\n        affiliate_asin: event.asin,\n        affiliate_category: event.category,\n        affiliate_price: event.price,\n        affiliate_currency: event.currency,\n        affiliate_source: event.source,\n        affiliate_url: event.affiliateUrl,\n        original_url: event.originalUrl,\n        user_id: event.userId,\n        session_id: event.sessionId,\n      });\n    } catch (error) {\n      console.error('Error sending affiliate click to analytics:', error);\n    }\n    \n    // Send to backend for server-side tracking\n    if (config.features.affiliateTracking) {\n      try {\n        await fetch(`${config.apiUrl}/api/v1/analytics/affiliate/click`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(clickEvent),\n        });\n      } catch (error) {\n        console.error('Error sending affiliate click to backend:', error);\n      }\n    }\n  }\n  \n  /**\n   * Track affiliate conversion (when user makes a purchase)\n   */\n  async trackAffiliateConversion(event: Omit<AffiliateConversionEvent, 'conversionTimestamp'>): Promise<void> {\n    const conversionEvent: AffiliateConversionEvent = {\n      ...event,\n      conversionTimestamp: Date.now(),\n    };\n    \n    // Store event locally\n    this.conversionEvents.push(conversionEvent);\n    this.persistConversionEvents();\n    \n    // Send to analytics service\n    try {\n      await analytics.track('affiliate_conversion', {\n        affiliate_order_id: event.orderId,\n        affiliate_product_id: event.productId,\n        affiliate_asin: event.asin,\n        affiliate_revenue: event.revenue,\n        affiliate_commission: event.commission,\n        affiliate_currency: event.currency,\n        affiliate_quantity: event.quantity,\n        affiliate_category: event.category,\n        affiliate_url: event.affiliateUrl,\n        conversion_time_minutes: (conversionEvent.conversionTimestamp - event.clickTimestamp) / (1000 * 60),\n        user_id: event.userId,\n        session_id: event.sessionId,\n      });\n    } catch (error) {\n      console.error('Error sending affiliate conversion to analytics:', error);\n    }\n    \n    // Send to backend\n    if (config.features.affiliateTracking) {\n      try {\n        await fetch(`${config.apiUrl}/api/v1/analytics/affiliate/conversion`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(conversionEvent),\n        });\n      } catch (error) {\n        console.error('Error sending affiliate conversion to backend:', error);\n      }\n    }\n  }\n  \n  /**\n   * Get comprehensive affiliate analytics\n   */\n  getAnalytics(timeframe: 'day' | 'week' | 'month' | 'year' | 'all' = 'month'): AffiliateAnalytics {\n    const now = Date.now();\n    const timeframMs = {\n      day: 24 * 60 * 60 * 1000,\n      week: 7 * 24 * 60 * 60 * 1000,\n      month: 30 * 24 * 60 * 60 * 1000,\n      year: 365 * 24 * 60 * 60 * 1000,\n      all: Infinity,\n    };\n    \n    const cutoff = now - timeframMs[timeframe];\n    \n    // Filter events by timeframe\n    const relevantClicks = this.clickEvents.filter(event => event.timestamp >= cutoff);\n    const relevantConversions = this.conversionEvents.filter(event => event.conversionTimestamp >= cutoff);\n    \n    // Calculate metrics\n    const totalClicks = relevantClicks.length;\n    const totalConversions = relevantConversions.length;\n    const totalRevenue = relevantConversions.reduce((sum, event) => sum + event.revenue, 0);\n    const totalCommission = relevantConversions.reduce((sum, event) => sum + event.commission, 0);\n    const conversionRate = totalClicks > 0 ? totalConversions / totalClicks : 0;\n    const averageOrderValue = totalConversions > 0 ? totalRevenue / totalConversions : 0;\n    \n    // Clicks by category\n    const clicksByCategory: Record<string, number> = {};\n    relevantClicks.forEach(event => {\n      if (event.category) {\n        clicksByCategory[event.category] = (clicksByCategory[event.category] || 0) + 1;\n      }\n    });\n    \n    // Revenue by category\n    const revenueByCategory: Record<string, number> = {};\n    relevantConversions.forEach(event => {\n      if (event.category) {\n        revenueByCategory[event.category] = (revenueByCategory[event.category] || 0) + event.revenue;\n      }\n    });\n    \n    // Performance by source\n    const performanceBySource: Record<string, any> = {};\n    const clicksBySource: Record<string, number> = {};\n    const conversionsBySource: Record<string, number> = {};\n    const revenueBySource: Record<string, number> = {};\n    \n    relevantClicks.forEach(event => {\n      clicksBySource[event.source] = (clicksBySource[event.source] || 0) + 1;\n    });\n    \n    relevantConversions.forEach(event => {\n      // Find corresponding click event\n      const clickEvent = relevantClicks.find(click => \n        click.productId === event.productId && \n        click.timestamp <= event.clickTimestamp\n      );\n      \n      if (clickEvent) {\n        conversionsBySource[clickEvent.source] = (conversionsBySource[clickEvent.source] || 0) + 1;\n        revenueBySource[clickEvent.source] = (revenueBySource[clickEvent.source] || 0) + event.revenue;\n      }\n    });\n    \n    Object.keys(clicksBySource).forEach(source => {\n      const clicks = clicksBySource[source] || 0;\n      const conversions = conversionsBySource[source] || 0;\n      const revenue = revenueBySource[source] || 0;\n      \n      performanceBySource[source] = {\n        clicks,\n        conversions,\n        revenue,\n        conversionRate: clicks > 0 ? conversions / clicks : 0,\n      };\n    });\n    \n    return {\n      totalClicks,\n      totalConversions,\n      totalRevenue,\n      totalCommission,\n      conversionRate,\n      averageOrderValue,\n      clicksByCategory,\n      revenueByCategory,\n      topPerformingProducts: [], // TODO: Implement based on conversion data\n      performanceBySource,\n    };\n  }\n  \n  /**\n   * Extract ASIN from Amazon product URL\n   */\n  extractASIN(productUrl: string): string | null {\n    try {\n      const asinPatterns = [\n        /\\/dp\\/([A-Z0-9]{10})/,\n        /\\/gp\\/product\\/([A-Z0-9]{10})/,\n        /\\/product\\/([A-Z0-9]{10})/,\n        /\\/ASIN\\/([A-Z0-9]{10})/,\n        /asin=([A-Z0-9]{10})/i,\n        /\\/([A-Z0-9]{10})(?:\\/|\\?|$)/,\n      ];\n      \n      for (const pattern of asinPatterns) {\n        const match = productUrl.match(pattern);\n        if (match && match[1]) {\n          return match[1];\n        }\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error extracting ASIN:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Validate Amazon URL\n   */\n  isValidAmazonUrl(url: string): boolean {\n    try {\n      const urlObj = new URL(url);\n      const validDomains = [\n        'amazon.co.uk',\n        'amazon.com',\n        'amazon.de',\n        'amazon.fr',\n        'amazon.it',\n        'amazon.es',\n        'amazon.ca',\n        'amazon.com.au',\n        'amazon.co.jp',\n        'amazon.com.br',\n        'amazon.in',\n        'amazon.com.mx',\n        'amazon.cn',\n        'amazon.sg',\n        'amazon.ae',\n        'amazon.nl',\n        'amazon.se',\n        'amazon.pl',\n      ];\n      \n      return validDomains.some(domain => urlObj.hostname.includes(domain));\n    } catch (error) {\n      return false;\n    }\n  }\n  \n  /**\n   * Get commission rate for product category\n   */\n  getCommissionRate(category: string): number {\n    const normalizedCategory = category.toLowerCase().replace(/\\s+/g, '');\n    \n    const categoryMappings: Record<string, keyof typeof amazonConfig.commissionRates> = {\n      'electronics': 'electronics',\n      'computers': 'electronics',\n      'mobile': 'electronics',\n      'fashion': 'fashion',\n      'clothing': 'fashion',\n      'shoes': 'fashion',\n      'accessories': 'fashion',\n      'homeandgarden': 'homeAndGarden',\n      'home': 'homeAndGarden',\n      'garden': 'homeAndGarden',\n      'furniture': 'homeAndGarden',\n      'kitchen': 'homeAndGarden',\n      'sportsandoutdoors': 'sportsAndOutdoors',\n      'sports': 'sportsAndOutdoors',\n      'fitness': 'sportsAndOutdoors',\n      'outdoor': 'sportsAndOutdoors',\n      'books': 'books',\n      'ebooks': 'books',\n      'kindle': 'books',\n      'toys': 'toys',\n      'toysgames': 'toys',\n      'games': 'toys',\n      'videogames': 'toys',\n      'beauty': 'beautyAndPersonalCare',\n      'beautyandpersonalcare': 'beautyAndPersonalCare',\n      'personalcare': 'beautyAndPersonalCare',\n      'health': 'beautyAndPersonalCare',\n      'automotive': 'automotive',\n      'car': 'automotive',\n      'motorcycle': 'automotive',\n      'industrial': 'industrial',\n      'tools': 'industrial',\n      'business': 'industrial',\n    };\n    \n    const mappedCategory = categoryMappings[normalizedCategory];\n    return amazonConfig.commissionRates[mappedCategory] || amazonConfig.commissionRates.default;\n  }\n  \n  /**\n   * Generate unique tracking identifier\n   */\n  private generateTrackingId(): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substr(2, 9);\n    return `gs_${timestamp}_${random}`;\n  }\n  \n  /**\n   * Persist click events to localStorage\n   */\n  private persistClickEvents(): void {\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('aclue_affiliate_clicks', JSON.stringify(this.clickEvents));\n      } catch (error) {\n        console.error('Error persisting affiliate click events:', error);\n      }\n    }\n  }\n  \n  /**\n   * Persist conversion events to localStorage\n   */\n  private persistConversionEvents(): void {\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('aclue_affiliate_conversions', JSON.stringify(this.conversionEvents));\n      } catch (error) {\n        console.error('Error persisting affiliate conversion events:', error);\n      }\n    }\n  }\n  \n  /**\n   * Clean up old events (older than 30 days)\n   */\n  private cleanupOldEvents(): void {\n    const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\n    \n    this.clickEvents = this.clickEvents.filter(event => event.timestamp >= thirtyDaysAgo);\n    this.conversionEvents = this.conversionEvents.filter(event => event.conversionTimestamp >= thirtyDaysAgo);\n    \n    this.persistClickEvents();\n    this.persistConversionEvents();\n  }\n}\n\n// Export singleton instance\nexport const affiliateService = AmazonAffiliateService.getInstance();\n\n// Export convenience functions\nexport const generateAffiliateLink = (url: string, options?: AffiliateLinkOptions) => \n  affiliateService.generateAffiliateLink(url, options);\n\nexport const generateSearchLink = (searchTerm: string, category?: string, options?: AffiliateLinkOptions) => \n  affiliateService.generateSearchLink(searchTerm, category, options);\n\nexport const trackAffiliateClick = (event: Omit<AffiliateClickEvent, 'timestamp'>) => \n  affiliateService.trackAffiliateClick(event);\n\nexport const trackAffiliateConversion = (event: Omit<AffiliateConversionEvent, 'conversionTimestamp'>) => \n  affiliateService.trackAffiliateConversion(event);\n\nexport const extractASIN = (url: string) => affiliateService.extractASIN(url);\n\nexport const isValidAmazonUrl = (url: string) => affiliateService.isValidAmazonUrl(url);\n\nexport const getCommissionRate = (category: string) => affiliateService.getCommissionRate(category);\n\nexport const getAffiliateAnalytics = (timeframe?: 'day' | 'week' | 'month' | 'year' | 'all') => \n  affiliateService.getAnalytics(timeframe);"],"names":["AmazonAffiliateService","affiliateService","extractASIN","generateAffiliateLink","generateSearchLink","getAffiliateAnalytics","getCommissionRate","isValidAmazonUrl","trackAffiliateClick","trackAffiliateConversion","clickEvents","conversionEvents","initializeTracking","getInstance","instance","window","storedClicks","localStorage","getItem","storedConversions","JSON","parse","error","console","cleanupOldEvents","setInterval","productUrl","options","url","URL","warn","hostname","includes","searchParams","set","associateTag","amazonConfig","uk","ref","campaign","medium","source","term","content","customParameters","Object","entries","forEach","key","value","trackingId","generateTrackingId","Date","now","toString","searchTerm","category","baseUrl","productCategories","event","clickEvent","timestamp","userAgent","navigator","undefined","referrer","document","push","persistClickEvents","analytics","track","affiliate_product_id","productId","affiliate_asin","asin","affiliate_category","affiliate_price","price","affiliate_currency","currency","affiliate_source","affiliate_url","affiliateUrl","original_url","originalUrl","user_id","userId","session_id","sessionId","config","features","affiliateTracking","fetch","apiUrl","method","headers","body","stringify","conversionEvent","conversionTimestamp","persistConversionEvents","affiliate_order_id","orderId","affiliate_revenue","revenue","affiliate_commission","commission","affiliate_quantity","quantity","conversion_time_minutes","clickTimestamp","getAnalytics","timeframe","timeframMs","day","week","month","year","all","Infinity","cutoff","relevantClicks","filter","relevantConversions","totalClicks","length","totalConversions","totalRevenue","reduce","sum","totalCommission","conversionRate","averageOrderValue","clicksByCategory","revenueByCategory","performanceBySource","clicksBySource","conversionsBySource","revenueBySource","find","click","keys","clicks","conversions","topPerformingProducts","asinPatterns","pattern","match","urlObj","validDomains","some","domain","normalizedCategory","toLowerCase","replace","categoryMappings","mappedCategory","commissionRates","default","random","Math","substr","setItem","thirtyDaysAgo"],"mappings":"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"}