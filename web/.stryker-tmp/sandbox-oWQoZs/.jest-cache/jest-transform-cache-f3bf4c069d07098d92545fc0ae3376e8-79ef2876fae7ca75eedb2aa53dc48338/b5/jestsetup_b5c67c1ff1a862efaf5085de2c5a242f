a4366d92e224f6124523856f4eaa4082
// @ts-nocheck
"use strict";
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter () {
            return {
                route: "/",
                pathname: "/",
                query: {},
                asPath: "/",
                push: jest.fn(),
                replace: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn(),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                }
            };
        }
    }));
// Mock Next.js image
jest.mock("next/image", ()=>{
    const MockedImage = ({ src, alt, ...props })=>{
        // eslint-disable-next-line @next/next/no-img-element
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            ...props
        });
    };
    MockedImage.displayName = "NextImage";
    return MockedImage;
});
// Mock Next.js link
jest.mock("next/link", ()=>{
    const MockedLink = ({ children, href, ...props })=>{
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            href: href,
            ...props,
            children: children
        });
    };
    MockedLink.displayName = "NextLink";
    return MockedLink;
});
// Mock framer-motion
jest.mock("framer-motion", ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    ...props,
                    children: children
                }),
            span: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    ...props,
                    children: children
                }),
            img: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                    ...props,
                    children: children
                }),
            a: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                    ...props,
                    children: children
                }),
            form: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                    ...props,
                    children: children
                }),
            input: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    ...props,
                    children: children
                }),
            textarea: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                    ...props,
                    children: children
                }),
            select: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("select", {
                    ...props,
                    children: children
                }),
            h1: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                    ...props,
                    children: children
                }),
            h2: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                    ...props,
                    children: children
                }),
            h3: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                    ...props,
                    children: children
                }),
            p: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    ...props,
                    children: children
                }),
            ul: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                    ...props,
                    children: children
                }),
            li: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children,
        useMotionValue: ()=>({
                set: jest.fn(),
                get: jest.fn()
            }),
        useTransform: ()=>({
                set: jest.fn(),
                get: jest.fn()
            }),
        useAnimation: ()=>({
                start: jest.fn(),
                stop: jest.fn()
            }),
        useSpring: ()=>({
                set: jest.fn(),
                get: jest.fn()
            })
    }));
// Mock react-hot-toast
jest.mock("react-hot-toast", ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn(),
            loading: jest.fn(),
            dismiss: jest.fn()
        },
        Toaster: ()=>null
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
require("jest-canvas-mock");
// Mock global fetch for API testing
global.fetch = jest.fn(()=>Promise.resolve({
        ok: true,
        status: 200,
        json: ()=>Promise.resolve({}),
        text: ()=>Promise.resolve("")
    }));
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};
// Mock matchMedia
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock scrollTo
Object.defineProperty(window, "scrollTo", {
    writable: true,
    value: jest.fn()
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, "localStorage", {
    value: localStorageMock
});
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
Object.defineProperty(window, "sessionStorage", {
    value: sessionStorageMock
});
// Mock crypto.getRandomValues
Object.defineProperty(global, "crypto", {
    value: {
        getRandomValues: (arr)=>{
            for(let i = 0; i < arr.length; i++){
                arr[i] = Math.floor(Math.random() * 256);
            }
            return arr;
        }
    }
});
// Mock navigator
Object.defineProperty(window, "navigator", {
    value: {
        userAgent: "jest",
        platform: "jest",
        language: "en-US",
        languages: [
            "en-US"
        ],
        onLine: true,
        clipboard: {
            writeText: jest.fn().mockResolvedValue(undefined),
            readText: jest.fn().mockResolvedValue("")
        },
        share: jest.fn().mockResolvedValue(undefined),
        vibrate: jest.fn()
    },
    writable: true
});
// Mock fetch
global.fetch = jest.fn();
// Mock console methods for cleaner test output
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === "string" && args[0].includes("Warning: ReactDOM.render is no longer supported")) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args)=>{
        if (typeof args[0] === "string" && (args[0].includes("componentWillReceiveProps") || args[0].includes("componentWillUpdate") || args[0].includes("componentWillMount"))) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
    console.warn = originalWarn;
});
// Clear all mocks after each test
afterEach(()=>{
    jest.clearAllMocks();
    localStorageMock.clear();
    sessionStorageMock.clear();
});

//# sourceMappingURL=data:application/json;base64,