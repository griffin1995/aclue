{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/.stryker-tmp/sandbox-oWQoZs/src/hooks/__tests__/useAuth.test.ts"],"sourcesContent":["/**\n * useAuth Hook Test Suite\n * \n * Comprehensive tests for the authentication hook that manages user\n * authentication state, token handling, and authentication workflows.\n * \n * Test Coverage:\n * - Authentication state management\n * - Login and logout functionality\n * - Token refresh and validation\n * - Error handling and recovery\n * - Local storage integration\n * - API integration with backend\n * \n * Testing Strategy:\n * Hook testing with React Testing Library's renderHook utility,\n * focusing on state transitions, side effects, and integration\n * with authentication services.\n * \n * Business Context:\n * Authentication is critical for user experience and security,\n * requiring robust testing of all authentication flows and edge cases.\n */\n// @ts-nocheck\n\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport { renderHook, act, waitFor } from '@testing-library/react';\nimport { useAuth } from '../useAuth';\nimport * as api from '@/lib/api';\n\n// Mock API functions\njest.mock('@/lib/api', () => ({\n  login: jest.fn(),\n  register: jest.fn(),\n  refreshToken: jest.fn(),\n  getCurrentUser: jest.fn(),\n}));\n\n// Mock localStorage\nconst mockLocalStorage = (() => {\n  let store: Record<string, string> = {};\n  \n  return {\n    getItem: jest.fn((key: string) => store[key] || null),\n    setItem: jest.fn((key: string, value: string) => {\n      store[key] = value;\n    }),\n    removeItem: jest.fn((key: string) => {\n      delete store[key];\n    }),\n    clear: jest.fn(() => {\n      store = {};\n    }),\n  };\n})();\n\nObject.defineProperty(window, 'localStorage', {\n  value: mockLocalStorage,\n});\n\n// ==============================================================================\n// TEST UTILITIES\n// ==============================================================================\n\n// Mock user data\nconst mockUser = {\n  id: 'user-123',\n  email: 'test@aclue.app',\n  firstName: 'Test',\n  lastName: 'User',\n  subscriptionTier: 'free',\n  createdAt: '2025-01-01T00:00:00Z',\n  emailVerified: true,\n};\n\n// Mock authentication response\nconst mockAuthResponse = {\n  access_token: 'mock-access-token',\n  refresh_token: 'mock-refresh-token',\n  user: mockUser,\n};\n\n// Mock login credentials\nconst mockCredentials = {\n  email: 'test@aclue.app',\n  password: 'testpassword123',\n};\n\n// Mock registration data\nconst mockRegistrationData = {\n  email: 'new@aclue.app',\n  password: 'newpassword123',\n  firstName: 'New',\n  lastName: 'User',\n  marketingConsent: false,\n};\n\n// ==============================================================================\n// AUTHENTICATION HOOK TESTS\n// ==============================================================================\n\ndescribe('useAuth Hook', () => {\n  // Clear mocks and storage before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockLocalStorage.clear();\n  });\n\n  describe('Initial State', () => {\n    /**\n     * Test initial authentication state.\n     * \n     * Validates that the hook initializes with proper default\n     * state before any authentication operations.\n     */\n    it('should initialize with default unauthenticated state', () => {\n      const { result } = renderHook(() => useAuth());\n      \n      expect(result.current.user).toBeNull();\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.error).toBeNull();\n      expect(result.current.tokens).toBeNull();\n    });\n\n    /**\n     * Test automatic authentication restoration from storage.\n     * \n     * Validates that valid tokens stored in localStorage\n     * are automatically used to restore authentication state.\n     */\n    it('should restore authentication from stored tokens', async () => {\n      // Mock stored tokens\n      mockLocalStorage.setItem('access_token', 'stored-access-token');\n      mockLocalStorage.setItem('refresh_token', 'stored-refresh-token');\n      \n      // Mock successful user retrieval\n      (api.getCurrentUser as jest.Mock).mockResolvedValue(mockUser);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Should start loading\n      expect(result.current.isLoading).toBe(true);\n      \n      // Wait for authentication restoration\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n      \n      // Verify authenticated state\n      expect(result.current.isAuthenticated).toBe(true);\n      expect(result.current.user).toEqual(mockUser);\n      expect(result.current.tokens).toEqual({\n        accessToken: 'stored-access-token',\n        refreshToken: 'stored-refresh-token',\n      });\n      \n      // Verify API call\n      expect(api.getCurrentUser).toHaveBeenCalledWith('stored-access-token');\n    });\n\n    /**\n     * Test handling of invalid stored tokens.\n     * \n     * Validates that invalid or expired tokens are properly\n     * cleared and the user remains unauthenticated.\n     */\n    it('should handle invalid stored tokens gracefully', async () => {\n      // Mock stored tokens\n      mockLocalStorage.setItem('access_token', 'invalid-token');\n      mockLocalStorage.setItem('refresh_token', 'invalid-refresh');\n      \n      // Mock API error for invalid token\n      (api.getCurrentUser as jest.Mock).mockRejectedValue(\n        new Error('Invalid token')\n      );\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Wait for token validation to fail\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n      \n      // Verify tokens were cleared\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.user).toBeNull();\n      expect(result.current.tokens).toBeNull();\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('access_token');\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('refresh_token');\n    });\n  });\n\n  describe('Login Functionality', () => {\n    /**\n     * Test successful user login.\n     * \n     * Validates that login credentials are properly processed,\n     * tokens are stored, and authentication state is updated.\n     */\n    it('should handle successful login', async () => {\n      // Mock successful login response\n      (api.login as jest.Mock).mockResolvedValue(mockAuthResponse);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Perform login\n      await act(async () => {\n        await result.current.login(mockCredentials);\n      });\n      \n      // Verify authentication state\n      expect(result.current.isAuthenticated).toBe(true);\n      expect(result.current.user).toEqual(mockUser);\n      expect(result.current.tokens).toEqual({\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token',\n      });\n      expect(result.current.error).toBeNull();\n      \n      // Verify tokens were stored\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', 'mock-access-token');\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('refresh_token', 'mock-refresh-token');\n      \n      // Verify API call\n      expect(api.login).toHaveBeenCalledWith(mockCredentials);\n    });\n\n    /**\n     * Test login with invalid credentials.\n     * \n     * Validates that login errors are properly handled with\n     * appropriate error messages and state management.\n     */\n    it('should handle login errors appropriately', async () => {\n      const loginError = new Error('Invalid credentials');\n      (api.login as jest.Mock).mockRejectedValue(loginError);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Attempt login with invalid credentials\n      await act(async () => {\n        try {\n          await result.current.login({\n            email: 'invalid@email.com',\n            password: 'wrongpassword',\n          });\n        } catch (error) {\n          // Expected to throw\n        }\n      });\n      \n      // Verify error state\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.user).toBeNull();\n      expect(result.current.error).toEqual(loginError);\n      \n      // Verify no tokens were stored\n      expect(mockLocalStorage.setItem).not.toHaveBeenCalled();\n    });\n\n    /**\n     * Test login loading state management.\n     * \n     * Validates that loading states are properly managed\n     * during asynchronous login operations.\n     */\n    it('should manage loading state during login', async () => {\n      let resolveLogin: (value: any) => void;\n      const loginPromise = new Promise((resolve) => {\n        resolveLogin = resolve;\n      });\n      \n      (api.login as jest.Mock).mockImplementation(() => loginPromise);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Start login\n      act(() => {\n        result.current.login(mockCredentials);\n      });\n      \n      // Verify loading state\n      expect(result.current.isLoading).toBe(true);\n      \n      // Resolve login\n      await act(async () => {\n        resolveLogin(mockAuthResponse);\n        await loginPromise;\n      });\n      \n      // Verify loading completed\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.isAuthenticated).toBe(true);\n    });\n  });\n\n  describe('Registration Functionality', () => {\n    /**\n     * Test successful user registration.\n     * \n     * Validates that registration data is properly processed\n     * and user is automatically authenticated after registration.\n     */\n    it('should handle successful registration', async () => {\n      const registrationResponse = {\n        ...mockAuthResponse,\n        user: {\n          ...mockUser,\n          email: mockRegistrationData.email,\n          firstName: mockRegistrationData.firstName,\n          lastName: mockRegistrationData.lastName,\n        },\n      };\n      \n      (api.register as jest.Mock).mockResolvedValue(registrationResponse);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Perform registration\n      await act(async () => {\n        await result.current.register(mockRegistrationData);\n      });\n      \n      // Verify authentication state\n      expect(result.current.isAuthenticated).toBe(true);\n      expect(result.current.user?.email).toBe(mockRegistrationData.email);\n      expect(result.current.user?.firstName).toBe(mockRegistrationData.firstName);\n      expect(result.current.tokens).toEqual({\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token',\n      });\n      \n      // Verify API call\n      expect(api.register).toHaveBeenCalledWith(mockRegistrationData);\n    });\n\n    /**\n     * Test registration validation errors.\n     * \n     * Validates that registration validation errors are\n     * properly handled and displayed to users.\n     */\n    it('should handle registration validation errors', async () => {\n      const validationError = new Error('Email already exists');\n      (api.register as jest.Mock).mockRejectedValue(validationError);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Attempt registration with existing email\n      await act(async () => {\n        try {\n          await result.current.register(mockRegistrationData);\n        } catch (error) {\n          // Expected to throw\n        }\n      });\n      \n      // Verify error state\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.error).toEqual(validationError);\n    });\n  });\n\n  describe('Token Management', () => {\n    /**\n     * Test automatic token refresh functionality.\n     * \n     * Validates that expired tokens are automatically refreshed\n     * without requiring user re-authentication.\n     */\n    it('should refresh tokens automatically', async () => {\n      // Set up initial authenticated state\n      const { result } = renderHook(() => useAuth());\n      \n      await act(async () => {\n        (api.login as jest.Mock).mockResolvedValue(mockAuthResponse);\n        await result.current.login(mockCredentials);\n      });\n      \n      // Mock refresh response\n      const refreshResponse = {\n        access_token: 'new-access-token',\n        refresh_token: 'new-refresh-token',\n      };\n      (api.refreshToken as jest.Mock).mockResolvedValue(refreshResponse);\n      \n      // Trigger token refresh\n      await act(async () => {\n        await result.current.refreshTokens();\n      });\n      \n      // Verify tokens were updated\n      expect(result.current.tokens).toEqual({\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n      });\n      \n      // Verify new tokens were stored\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', 'new-access-token');\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('refresh_token', 'new-refresh-token');\n    });\n\n    /**\n     * Test handling of refresh token failures.\n     * \n     * Validates that when token refresh fails, user is\n     * properly logged out and redirected to login.\n     */\n    it('should handle refresh token failure by logging out', async () => {\n      // Set up initial authenticated state\n      const { result } = renderHook(() => useAuth());\n      \n      await act(async () => {\n        (api.login as jest.Mock).mockResolvedValue(mockAuthResponse);\n        await result.current.login(mockCredentials);\n      });\n      \n      // Mock refresh failure\n      (api.refreshToken as jest.Mock).mockRejectedValue(\n        new Error('Refresh token expired')\n      );\n      \n      // Attempt token refresh\n      await act(async () => {\n        try {\n          await result.current.refreshTokens();\n        } catch (error) {\n          // Expected to fail\n        }\n      });\n      \n      // Verify user was logged out\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.user).toBeNull();\n      expect(result.current.tokens).toBeNull();\n      \n      // Verify tokens were cleared\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('access_token');\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('refresh_token');\n    });\n  });\n\n  describe('Logout Functionality', () => {\n    /**\n     * Test successful user logout.\n     * \n     * Validates that logout clears all authentication state\n     * and removes tokens from storage.\n     */\n    it('should handle logout properly', async () => {\n      // Set up initial authenticated state\n      const { result } = renderHook(() => useAuth());\n      \n      await act(async () => {\n        (api.login as jest.Mock).mockResolvedValue(mockAuthResponse);\n        await result.current.login(mockCredentials);\n      });\n      \n      // Verify initially authenticated\n      expect(result.current.isAuthenticated).toBe(true);\n      \n      // Perform logout\n      act(() => {\n        result.current.logout();\n      });\n      \n      // Verify authentication cleared\n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.user).toBeNull();\n      expect(result.current.tokens).toBeNull();\n      expect(result.current.error).toBeNull();\n      \n      // Verify tokens were cleared from storage\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('access_token');\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('refresh_token');\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    /**\n     * Test network error handling.\n     * \n     * Validates that network errors during authentication\n     * operations are properly handled and communicated.\n     */\n    it('should handle network errors gracefully', async () => {\n      const networkError = new Error('Network request failed');\n      (api.login as jest.Mock).mockRejectedValue(networkError);\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Attempt login with network error\n      await act(async () => {\n        try {\n          await result.current.login(mockCredentials);\n        } catch (error) {\n          // Expected to throw\n        }\n      });\n      \n      // Verify error is properly set\n      expect(result.current.error).toEqual(networkError);\n      expect(result.current.isAuthenticated).toBe(false);\n    });\n\n    /**\n     * Test concurrent authentication operations.\n     * \n     * Validates that concurrent authentication operations\n     * are properly handled without state corruption.\n     */\n    it('should handle concurrent authentication operations', async () => {\n      (api.login as jest.Mock).mockImplementation(() => \n        new Promise((resolve) => setTimeout(() => resolve(mockAuthResponse), 100))\n      );\n      \n      const { result } = renderHook(() => useAuth());\n      \n      // Start two concurrent login attempts\n      const loginPromise1 = act(async () => {\n        await result.current.login(mockCredentials);\n      });\n      \n      const loginPromise2 = act(async () => {\n        await result.current.login({\n          email: 'other@example.com',\n          password: 'otherpassword',\n        });\n      });\n      \n      // Wait for both to complete\n      await Promise.all([loginPromise1, loginPromise2]);\n      \n      // Verify final state is consistent\n      expect(result.current.isAuthenticated).toBe(true);\n      expect(result.current.user).toEqual(mockUser);\n    });\n\n    /**\n     * Test error recovery functionality.\n     * \n     * Validates that users can recover from authentication\n     * errors by clearing error state and retrying.\n     */\n    it('should allow error recovery', async () => {\n      const { result } = renderHook(() => useAuth());\n      \n      // Cause an error\n      (api.login as jest.Mock).mockRejectedValue(new Error('Login failed'));\n      \n      await act(async () => {\n        try {\n          await result.current.login(mockCredentials);\n        } catch (error) {\n          // Expected to fail\n        }\n      });\n      \n      // Verify error state\n      expect(result.current.error).toBeTruthy();\n      \n      // Clear error\n      act(() => {\n        result.current.clearError();\n      });\n      \n      // Verify error cleared\n      expect(result.current.error).toBeNull();\n      \n      // Successful retry\n      (api.login as jest.Mock).mockResolvedValue(mockAuthResponse);\n      \n      await act(async () => {\n        await result.current.login(mockCredentials);\n      });\n      \n      // Verify successful authentication\n      expect(result.current.isAuthenticated).toBe(true);\n      expect(result.current.error).toBeNull();\n    });\n  });\n\n  describe('Integration Tests', () => {\n    /**\n     * Test complete authentication flow.\n     * \n     * Validates end-to-end authentication workflow including\n     * registration, login, token refresh, and logout.\n     */\n    it('should handle complete authentication workflow', async () => {\n      const { result } = renderHook(() => useAuth());\n      \n      // 1. Registration\n      const registrationResponse = {\n        ...mockAuthResponse,\n        user: {\n          ...mockUser,\n          email: mockRegistrationData.email,\n          firstName: mockRegistrationData.firstName,\n        },\n      };\n      (api.register as jest.Mock).mockResolvedValue(registrationResponse);\n      \n      await act(async () => {\n        await result.current.register(mockRegistrationData);\n      });\n      \n      expect(result.current.isAuthenticated).toBe(true);\n      \n      // 2. Logout\n      act(() => {\n        result.current.logout();\n      });\n      \n      expect(result.current.isAuthenticated).toBe(false);\n      \n      // 3. Login\n      (api.login as jest.Mock).mockResolvedValue(mockAuthResponse);\n      \n      await act(async () => {\n        await result.current.login(mockCredentials);\n      });\n      \n      expect(result.current.isAuthenticated).toBe(true);\n      \n      // 4. Token refresh\n      const refreshResponse = {\n        access_token: 'refreshed-token',\n        refresh_token: 'refreshed-refresh',\n      };\n      (api.refreshToken as jest.Mock).mockResolvedValue(refreshResponse);\n      \n      await act(async () => {\n        await result.current.refreshTokens();\n      });\n      \n      expect(result.current.tokens?.accessToken).toBe('refreshed-token');\n      \n      // 5. Final logout\n      act(() => {\n        result.current.logout();\n      });\n      \n      expect(result.current.isAuthenticated).toBe(false);\n      expect(result.current.user).toBeNull();\n    });\n  });\n});"],"names":["jest","mock","login","fn","register","refreshToken","getCurrentUser","mockLocalStorage","store","getItem","key","setItem","value","removeItem","clear","Object","defineProperty","window","mockUser","id","email","firstName","lastName","subscriptionTier","createdAt","emailVerified","mockAuthResponse","access_token","refresh_token","user","mockCredentials","password","mockRegistrationData","marketingConsent","describe","beforeEach","clearAllMocks","it","result","renderHook","useAuth","expect","current","toBeNull","isAuthenticated","toBe","isLoading","error","tokens","api","mockResolvedValue","waitFor","toEqual","accessToken","toHaveBeenCalledWith","mockRejectedValue","Error","act","loginError","not","toHaveBeenCalled","resolveLogin","loginPromise","Promise","resolve","mockImplementation","registrationResponse","validationError","refreshResponse","refreshTokens","logout","networkError","setTimeout","loginPromise1","loginPromise2","all","toBeTruthy","clearError"],"mappings":"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"}