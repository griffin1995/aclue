d5858fcf71e32ced734ecdf69a21429c
/**
 * AuthGuard Component Test Suite
 * 
 * Comprehensive tests for the authentication guard component that protects
 * routes and ensures proper access control throughout the application.
 * 
 * Test Coverage:
 * - Authentication state validation
 * - Route protection and redirection logic
 * - Loading states and user experience
 * - Error handling and edge cases
 * - Integration with authentication context
 * 
 * Testing Strategy:
 * Based on React Testing Library patterns for user-centric testing,
 * focusing on behaviour rather than implementation details.
 * 
 * Authentication Context:
 * Tests the integration with AuthContext and proper handling of
 * authenticated vs unauthenticated states for route protection.
 */ // @ts-nocheck
// ==============================================================================
// IMPORTS AND DEPENDENCIES
// ==============================================================================
"use strict";
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter: jest.fn()
    }));
// Mock authentication hook
jest.mock("@/hooks/useAuth", ()=>({
        useAuth: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _router = require("next/router");
const _AuthGuard = require("../AuthGuard");
const _useAuth = require("../../../hooks/useAuth");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ==============================================================================
// TEST SETUP AND UTILITIES
// ==============================================================================
// Mock router implementation
const mockPush = jest.fn();
const mockRouter = {
    push: mockPush,
    pathname: "/dashboard",
    query: {},
    asPath: "/dashboard"
};
// Mock child component for testing
const MockChildComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "Protected Content"
    });
// Test wrapper component
const TestWrapper = ({ children })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "test-wrapper",
        children: children
    });
};
// ==============================================================================
// AUTHENTICATION GUARD TESTS
// ==============================================================================
describe("AuthGuard Component", ()=>{
    // Setup mocks before each test
    beforeEach(()=>{
        jest.clearAllMocks();
        _router.useRouter.mockReturnValue(mockRouter);
    });
    describe("Authenticated User Access", ()=>{
        /**
     * Test authenticated user can access protected content.
     * 
     * Validates that when user is properly authenticated,
     * the AuthGuard renders children without redirecting.
     * 
     * Business Context:
     * Authenticated users should have seamless access to protected
     * routes without unnecessary redirects or loading states.
     */ it("should render protected content for authenticated users", async ()=>{
            // Mock authenticated user state
            _useAuth.useAuth.mockReturnValue({
                user: {
                    id: "user-123",
                    email: "test@aclue.app",
                    firstName: "Test",
                    lastName: "User"
                },
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            // Render AuthGuard with protected content
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify protected content is rendered
            expect(_react1.screen.getByText("Protected Content")).toBeInTheDocument();
            // Verify no redirect occurred
            expect(mockPush).not.toHaveBeenCalled();
        });
        /**
     * Test AuthGuard handles user data properly.
     * 
     * Validates that user information is correctly processed
     * and available to child components through context.
     */ it("should provide user context to protected components", async ()=>{
            const mockUser = {
                id: "user-456",
                email: "premium@aclue.app",
                firstName: "Premium",
                lastName: "User",
                subscriptionTier: "premium"
            };
            _useAuth.useAuth.mockReturnValue({
                user: mockUser,
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            // Test component that uses auth context
            const TestChildComponent = ()=>{
                const { user } = (0, _useAuth.useAuth)();
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            "data-testid": "user-email",
                            children: user?.email
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            "data-testid": "user-name",
                            children: [
                                user?.firstName,
                                " ",
                                user?.lastName
                            ]
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestChildComponent, {})
            }));
            // Verify user data is accessible
            expect(_react1.screen.getByTestId("user-email")).toHaveTextContent("premium@aclue.app");
            expect(_react1.screen.getByTestId("user-name")).toHaveTextContent("Premium User");
        });
    });
    describe("Unauthenticated User Handling", ()=>{
        /**
     * Test unauthenticated user redirection to login.
     * 
     * Validates that users without valid authentication
     * are redirected to the login page with proper return URL.
     * 
     * Security Context:
     * Critical security feature ensuring protected routes
     * are not accessible without proper authentication.
     */ it("should redirect unauthenticated users to login", async ()=>{
            // Mock unauthenticated state
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: null
            });
            // Render AuthGuard
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Wait for redirect to occur
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith("/auth/login?returnUrl=/dashboard");
            });
            // Verify protected content is not rendered
            expect(_react1.screen.queryByText("Protected Content")).not.toBeInTheDocument();
        });
        /**
     * Test proper return URL construction for redirects.
     * 
     * Validates that users are redirected back to their original
     * destination after successful authentication.
     */ it("should preserve return URL for post-login redirect", async ()=>{
            // Mock complex route with query parameters
            _router.useRouter.mockReturnValue({
                ...mockRouter,
                asPath: "/dashboard/recommendations?category=electronics&price=100-500"
            });
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Wait for redirect with encoded return URL
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith("/auth/login?returnUrl=" + encodeURIComponent("/dashboard/recommendations?category=electronics&price=100-500"));
            });
        });
    });
    describe("Loading States", ()=>{
        /**
     * Test loading state display during authentication check.
     * 
     * Validates that appropriate loading UI is shown while
     * authentication status is being determined.
     * 
     * User Experience Context:
     * Prevents flash of unauthenticated content and provides
     * smooth loading experience during auth state resolution.
     */ it("should display loading state during authentication check", ()=>{
            // Mock loading authentication state
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: true,
                error: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify loading indicator is displayed
            expect(_react1.screen.getByText("Loading...")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Protected Content")).not.toBeInTheDocument();
            // Verify no redirect during loading
            expect(mockPush).not.toHaveBeenCalled();
        });
        /**
     * Test loading state with custom loading component.
     * 
     * Validates that custom loading components can be provided
     * for branded loading experiences.
     */ it("should render custom loading component when provided", ()=>{
            const CustomLoader = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "custom-loader",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "spinner"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            children: "Authenticating..."
                        })
                    ]
                });
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: true,
                error: null
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                loadingComponent: /*#__PURE__*/ (0, _jsxruntime.jsx)(CustomLoader, {}),
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify custom loading component is rendered
            expect(_react1.screen.getByTestId("custom-loader")).toBeInTheDocument();
            expect(_react1.screen.getByText("Authenticating...")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Loading...")).not.toBeInTheDocument();
        });
    });
    describe("Error Handling", ()=>{
        /**
     * Test authentication error handling and display.
     * 
     * Validates that authentication errors are properly handled
     * with appropriate error messages and recovery options.
     * 
     * Error Handling Context:
     * Users should be informed of authentication failures
     * with clear next steps for resolution.
     */ it("should handle and display authentication errors", ()=>{
            const authError = {
                message: "Authentication failed",
                code: "AUTH_ERROR"
            };
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: authError
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify error message is displayed
            expect(_react1.screen.getByText("Authentication Error")).toBeInTheDocument();
            expect(_react1.screen.getByText("Authentication failed")).toBeInTheDocument();
            // Verify protected content is not rendered
            expect(_react1.screen.queryByText("Protected Content")).not.toBeInTheDocument();
        });
        /**
     * Test token expiration handling.
     * 
     * Validates that expired tokens are handled gracefully
     * with automatic redirect to login for re-authentication.
     */ it("should handle token expiration gracefully", async ()=>{
            const tokenExpiredError = {
                message: "Token has expired",
                code: "TOKEN_EXPIRED"
            };
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: tokenExpiredError
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify redirect to login occurs
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith("/auth/login?returnUrl=/dashboard");
            });
        });
    });
    describe("Role-Based Access Control", ()=>{
        /**
     * Test role-based access restrictions.
     * 
     * Validates that users with insufficient permissions
     * are properly restricted from accessing protected content.
     * 
     * Authorization Context:
     * Different user roles (free, premium, admin) should have
     * appropriate access controls for feature gating.
     */ it("should restrict access based on required roles", ()=>{
            // Mock user with basic role
            _useAuth.useAuth.mockReturnValue({
                user: {
                    id: "user-789",
                    email: "basic@aclue.app",
                    firstName: "Basic",
                    lastName: "User",
                    subscriptionTier: "free"
                },
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            // AuthGuard with premium role requirement
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                requiredRole: "premium",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify access denied message
            expect(_react1.screen.getByText("Access Denied")).toBeInTheDocument();
            expect(_react1.screen.getByText("Upgrade to Premium")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Protected Content")).not.toBeInTheDocument();
        });
        /**
     * Test successful role-based access.
     * 
     * Validates that users with sufficient permissions
     * can access role-protected content.
     */ it("should grant access to users with sufficient roles", ()=>{
            // Mock user with premium role
            _useAuth.useAuth.mockReturnValue({
                user: {
                    id: "user-890",
                    email: "premium@aclue.app",
                    firstName: "Premium",
                    lastName: "User",
                    subscriptionTier: "premium"
                },
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            // AuthGuard with premium role requirement
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                requiredRole: "premium",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
            }));
            // Verify access granted
            expect(_react1.screen.getByText("Protected Content")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Access Denied")).not.toBeInTheDocument();
        });
    });
    describe("Integration Tests", ()=>{
        /**
     * Test integration with authentication context changes.
     * 
     * Validates that AuthGuard properly responds to changes
     * in authentication state during component lifecycle.
     */ it("should respond to authentication state changes", async ()=>{
            // Start with unauthenticated state
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
                })
            }));
            // Initially unauthenticated
            _useAuth.useAuth.mockReturnValue({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: null
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
                })
            }));
            // Should redirect to login
            await (0, _react1.waitFor)(()=>{
                expect(mockPush).toHaveBeenCalledWith("/auth/login?returnUrl=/dashboard");
            });
            // Clear the mock and update to authenticated state
            mockPush.mockClear();
            _useAuth.useAuth.mockReturnValue({
                user: {
                    id: "user-991",
                    email: "newauth@aclue.app",
                    firstName: "New",
                    lastName: "User"
                },
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChildComponent, {})
                })
            }));
            // Should now render protected content
            expect(_react1.screen.getByText("Protected Content")).toBeInTheDocument();
            expect(mockPush).not.toHaveBeenCalled();
        });
        /**
     * Test AuthGuard with multiple children components.
     * 
     * Validates that complex component trees are properly
     * handled within authentication protection.
     */ it("should handle complex component trees", ()=>{
            _useAuth.useAuth.mockReturnValue({
                user: {
                    id: "user-992",
                    email: "complex@aclue.app",
                    firstName: "Complex",
                    lastName: "User"
                },
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            const ComplexChildren = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("header", {
                            "data-testid": "protected-header",
                            children: "Protected Header"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("main", {
                            "data-testid": "protected-main",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("section", {
                                "data-testid": "protected-section",
                                children: "Protected Section"
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("footer", {
                            "data-testid": "protected-footer",
                            children: "Protected Footer"
                        })
                    ]
                });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthGuard.AuthGuard, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ComplexChildren, {})
            }));
            // Verify all protected elements are rendered
            expect(_react1.screen.getByTestId("protected-header")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("protected-main")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("protected-section")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("protected-footer")).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,