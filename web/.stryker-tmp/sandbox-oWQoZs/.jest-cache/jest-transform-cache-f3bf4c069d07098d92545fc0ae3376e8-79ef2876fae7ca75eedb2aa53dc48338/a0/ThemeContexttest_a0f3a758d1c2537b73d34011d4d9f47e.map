{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/.stryker-tmp/sandbox-oWQoZs/src/context/__tests__/ThemeContext.test.tsx"],"sourcesContent":["// @ts-nocheck\nimport React from 'react';\nimport { render, screen, act } from '@testing-library/react';\nimport { ThemeProvider, useTheme } from '../ThemeContext';\n\n// Mock the useDarkMode hook\nconst mockUseDarkMode = {\n  theme: 'system' as const,\n  isDark: false,\n  setTheme: jest.fn(),\n  toggleTheme: jest.fn(),\n};\n\njest.mock('@/hooks/useDarkMode', () => ({\n  useDarkMode: () => mockUseDarkMode,\n}));\n\n// Test component that uses the theme context\nfunction TestComponent() {\n  const { theme, isDark, setTheme, toggleTheme } = useTheme();\n\n  return (\n    <div>\n      <div data-testid=\"theme\">{theme}</div>\n      <div data-testid=\"isDark\">{isDark.toString()}</div>\n      <button onClick={() => setTheme('dark')} data-testid=\"set-dark\">\n        Set Dark\n      </button>\n      <button onClick={() => setTheme('light')} data-testid=\"set-light\">\n        Set Light\n      </button>\n      <button onClick={toggleTheme} data-testid=\"toggle\">\n        Toggle\n      </button>\n    </div>\n  );\n}\n\ndescribe('ThemeContext', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset mock to default state\n    mockUseDarkMode.theme = 'system';\n    mockUseDarkMode.isDark = false;\n  });\n\n  describe('ThemeProvider', () => {\n    it('provides theme context to children', () => {\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('theme')).toHaveTextContent('system');\n      expect(screen.getByTestId('isDark')).toHaveTextContent('false');\n    });\n\n    it('updates when dark mode hook values change', () => {\n      const { rerender } = render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('theme')).toHaveTextContent('system');\n      expect(screen.getByTestId('isDark')).toHaveTextContent('false');\n\n      // Update mock values\n      mockUseDarkMode.theme = 'dark';\n      mockUseDarkMode.isDark = true;\n\n      rerender(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('theme')).toHaveTextContent('dark');\n      expect(screen.getByTestId('isDark')).toHaveTextContent('true');\n    });\n\n    it('calls setTheme when theme is changed', () => {\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      const setDarkButton = screen.getByTestId('set-dark');\n      act(() => {\n        setDarkButton.click();\n      });\n\n      expect(mockUseDarkMode.setTheme).toHaveBeenCalledWith('dark');\n    });\n\n    it('calls setTheme for light mode', () => {\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      const setLightButton = screen.getByTestId('set-light');\n      act(() => {\n        setLightButton.click();\n      });\n\n      expect(mockUseDarkMode.setTheme).toHaveBeenCalledWith('light');\n    });\n\n    it('calls toggleTheme when toggle is triggered', () => {\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      const toggleButton = screen.getByTestId('toggle');\n      act(() => {\n        toggleButton.click();\n      });\n\n      expect(mockUseDarkMode.toggleTheme).toHaveBeenCalled();\n    });\n  });\n\n  describe('useTheme hook', () => {\n    it('throws error when used outside ThemeProvider', () => {\n      // Suppress console.error for this test\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n      expect(() => {\n        render(<TestComponent />);\n      }).toThrow('useTheme must be used within a ThemeProvider');\n\n      consoleSpy.mockRestore();\n    });\n\n    it('returns correct context values', () => {\n      mockUseDarkMode.theme = 'light';\n      mockUseDarkMode.isDark = false;\n\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('theme')).toHaveTextContent('light');\n      expect(screen.getByTestId('isDark')).toHaveTextContent('false');\n    });\n\n    it('returns correct context values for dark theme', () => {\n      mockUseDarkMode.theme = 'dark';\n      mockUseDarkMode.isDark = true;\n\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('theme')).toHaveTextContent('dark');\n      expect(screen.getByTestId('isDark')).toHaveTextContent('true');\n    });\n\n    it('returns correct context values for system theme', () => {\n      mockUseDarkMode.theme = 'system';\n      mockUseDarkMode.isDark = true; // System preference is dark\n\n      render(\n        <ThemeProvider>\n          <TestComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('theme')).toHaveTextContent('system');\n      expect(screen.getByTestId('isDark')).toHaveTextContent('true');\n    });\n  });\n\n  describe('Theme Context Integration', () => {\n    it('provides all useDarkMode functionality', () => {\n      const TestIntegrationComponent = () => {\n        const themeContext = useTheme();\n        \n        return (\n          <div>\n            <div data-testid=\"has-theme\">{typeof themeContext.theme}</div>\n            <div data-testid=\"has-isDark\">{typeof themeContext.isDark}</div>\n            <div data-testid=\"has-setTheme\">{typeof themeContext.setTheme}</div>\n            <div data-testid=\"has-toggleTheme\">{typeof themeContext.toggleTheme}</div>\n          </div>\n        );\n      };\n\n      render(\n        <ThemeProvider>\n          <TestIntegrationComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('has-theme')).toHaveTextContent('string');\n      expect(screen.getByTestId('has-isDark')).toHaveTextContent('boolean');\n      expect(screen.getByTestId('has-setTheme')).toHaveTextContent('function');\n      expect(screen.getByTestId('has-toggleTheme')).toHaveTextContent('function');\n    });\n\n    it('maintains referential stability between renders', () => {\n      let renderCount = 0;\n      const contextValues: any[] = [];\n\n      const TestStabilityComponent = () => {\n        const themeContext = useTheme();\n        renderCount++;\n        contextValues.push(themeContext);\n        \n        return <div data-testid=\"render-count\">{renderCount}</div>;\n      };\n\n      const { rerender } = render(\n        <ThemeProvider>\n          <TestStabilityComponent />\n        </ThemeProvider>\n      );\n\n      expect(renderCount).toBe(1);\n\n      rerender(\n        <ThemeProvider>\n          <TestStabilityComponent />\n        </ThemeProvider>\n      );\n\n      expect(renderCount).toBe(2);\n      \n      // The context object should be the same between renders\n      // (assuming useDarkMode provides stable references)\n      expect(contextValues[0]).toBe(contextValues[1]);\n    });\n  });\n\n  describe('Multiple Providers', () => {\n    it('supports nested providers (edge case)', () => {\n      const InnerComponent = () => {\n        const { theme } = useTheme();\n        return <div data-testid=\"inner-theme\">{theme}</div>;\n      };\n\n      const OuterComponent = () => {\n        const { theme } = useTheme();\n        return (\n          <div>\n            <div data-testid=\"outer-theme\">{theme}</div>\n            <ThemeProvider>\n              <InnerComponent />\n            </ThemeProvider>\n          </div>\n        );\n      };\n\n      render(\n        <ThemeProvider>\n          <OuterComponent />\n        </ThemeProvider>\n      );\n\n      expect(screen.getByTestId('outer-theme')).toHaveTextContent('system');\n      expect(screen.getByTestId('inner-theme')).toHaveTextContent('system');\n    });\n  });\n});"],"names":["jest","mock","useDarkMode","mockUseDarkMode","theme","isDark","setTheme","fn","toggleTheme","TestComponent","useTheme","div","data-testid","toString","button","onClick","describe","beforeEach","clearAllMocks","it","render","ThemeProvider","expect","screen","getByTestId","toHaveTextContent","rerender","setDarkButton","act","click","toHaveBeenCalledWith","setLightButton","toggleButton","toHaveBeenCalled","consoleSpy","spyOn","console","mockImplementation","toThrow","mockRestore","TestIntegrationComponent","themeContext","renderCount","contextValues","TestStabilityComponent","push","toBe","InnerComponent","OuterComponent"],"mappings":"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"}