adb3432aa22402ec80b1b8a7ceca8d96
// @ts-nocheck
"use strict";
jest.mock("@/hooks/useDarkMode", ()=>({
        useDarkMode: ()=>mockUseDarkMode
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _ThemeContext = require("../ThemeContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the useDarkMode hook
const mockUseDarkMode = {
    theme: "system",
    isDark: false,
    setTheme: jest.fn(),
    toggleTheme: jest.fn()
};
// Test component that uses the theme context
function TestComponent() {
    const { theme, isDark, setTheme, toggleTheme } = (0, _ThemeContext.useTheme)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "theme",
                children: theme
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "isDark",
                children: isDark.toString()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>setTheme("dark"),
                "data-testid": "set-dark",
                children: "Set Dark"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>setTheme("light"),
                "data-testid": "set-light",
                children: "Set Light"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: toggleTheme,
                "data-testid": "toggle",
                children: "Toggle"
            })
        ]
    });
}
describe("ThemeContext", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset mock to default state
        mockUseDarkMode.theme = "system";
        mockUseDarkMode.isDark = false;
    });
    describe("ThemeProvider", ()=>{
        it("provides theme context to children", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId("theme")).toHaveTextContent("system");
            expect(_react1.screen.getByTestId("isDark")).toHaveTextContent("false");
        });
        it("updates when dark mode hook values change", ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId("theme")).toHaveTextContent("system");
            expect(_react1.screen.getByTestId("isDark")).toHaveTextContent("false");
            // Update mock values
            mockUseDarkMode.theme = "dark";
            mockUseDarkMode.isDark = true;
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId("theme")).toHaveTextContent("dark");
            expect(_react1.screen.getByTestId("isDark")).toHaveTextContent("true");
        });
        it("calls setTheme when theme is changed", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            const setDarkButton = _react1.screen.getByTestId("set-dark");
            (0, _react1.act)(()=>{
                setDarkButton.click();
            });
            expect(mockUseDarkMode.setTheme).toHaveBeenCalledWith("dark");
        });
        it("calls setTheme for light mode", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            const setLightButton = _react1.screen.getByTestId("set-light");
            (0, _react1.act)(()=>{
                setLightButton.click();
            });
            expect(mockUseDarkMode.setTheme).toHaveBeenCalledWith("light");
        });
        it("calls toggleTheme when toggle is triggered", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            const toggleButton = _react1.screen.getByTestId("toggle");
            (0, _react1.act)(()=>{
                toggleButton.click();
            });
            expect(mockUseDarkMode.toggleTheme).toHaveBeenCalled();
        });
    });
    describe("useTheme hook", ()=>{
        it("throws error when used outside ThemeProvider", ()=>{
            // Suppress console.error for this test
            const consoleSpy = jest.spyOn(console, "error").mockImplementation(()=>{});
            expect(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            }).toThrow("useTheme must be used within a ThemeProvider");
            consoleSpy.mockRestore();
        });
        it("returns correct context values", ()=>{
            mockUseDarkMode.theme = "light";
            mockUseDarkMode.isDark = false;
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId("theme")).toHaveTextContent("light");
            expect(_react1.screen.getByTestId("isDark")).toHaveTextContent("false");
        });
        it("returns correct context values for dark theme", ()=>{
            mockUseDarkMode.theme = "dark";
            mockUseDarkMode.isDark = true;
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId("theme")).toHaveTextContent("dark");
            expect(_react1.screen.getByTestId("isDark")).toHaveTextContent("true");
        });
        it("returns correct context values for system theme", ()=>{
            mockUseDarkMode.theme = "system";
            mockUseDarkMode.isDark = true; // System preference is dark
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            expect(_react1.screen.getByTestId("theme")).toHaveTextContent("system");
            expect(_react1.screen.getByTestId("isDark")).toHaveTextContent("true");
        });
    });
    describe("Theme Context Integration", ()=>{
        it("provides all useDarkMode functionality", ()=>{
            const TestIntegrationComponent = ()=>{
                const themeContext = (0, _ThemeContext.useTheme)();
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "has-theme",
                            children: typeof themeContext.theme
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "has-isDark",
                            children: typeof themeContext.isDark
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "has-setTheme",
                            children: typeof themeContext.setTheme
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "has-toggleTheme",
                            children: typeof themeContext.toggleTheme
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestIntegrationComponent, {})
            }));
            expect(_react1.screen.getByTestId("has-theme")).toHaveTextContent("string");
            expect(_react1.screen.getByTestId("has-isDark")).toHaveTextContent("boolean");
            expect(_react1.screen.getByTestId("has-setTheme")).toHaveTextContent("function");
            expect(_react1.screen.getByTestId("has-toggleTheme")).toHaveTextContent("function");
        });
        it("maintains referential stability between renders", ()=>{
            let renderCount = 0;
            const contextValues = [];
            const TestStabilityComponent = ()=>{
                const themeContext = (0, _ThemeContext.useTheme)();
                renderCount++;
                contextValues.push(themeContext);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "render-count",
                    children: renderCount
                });
            };
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestStabilityComponent, {})
            }));
            expect(renderCount).toBe(1);
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestStabilityComponent, {})
            }));
            expect(renderCount).toBe(2);
            // The context object should be the same between renders
            // (assuming useDarkMode provides stable references)
            expect(contextValues[0]).toBe(contextValues[1]);
        });
    });
    describe("Multiple Providers", ()=>{
        it("supports nested providers (edge case)", ()=>{
            const InnerComponent = ()=>{
                const { theme } = (0, _ThemeContext.useTheme)();
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "inner-theme",
                    children: theme
                });
            };
            const OuterComponent = ()=>{
                const { theme } = (0, _ThemeContext.useTheme)();
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "outer-theme",
                            children: theme
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(InnerComponent, {})
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ThemeContext.ThemeProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(OuterComponent, {})
            }));
            expect(_react1.screen.getByTestId("outer-theme")).toHaveTextContent("system");
            expect(_react1.screen.getByTestId("inner-theme")).toHaveTextContent("system");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,