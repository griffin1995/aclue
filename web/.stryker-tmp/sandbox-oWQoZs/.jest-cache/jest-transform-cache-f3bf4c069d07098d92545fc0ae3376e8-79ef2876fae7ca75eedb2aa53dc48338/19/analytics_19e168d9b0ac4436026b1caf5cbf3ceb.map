{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/.stryker-tmp/sandbox-oWQoZs/src/lib/analytics.ts"],"sourcesContent":["/**\n * aclue Analytics Service\n * \n * Comprehensive user behavior tracking and analytics integration using PostHog.\n * Provides business intelligence, user insights, and performance metrics for\n * data-driven product decisions and revenue optimization.\n * \n * Key Features:\n *   - User behavior tracking (swipes, clicks, conversions)\n *   - Revenue analytics (affiliate clicks, commissions)\n *   - Feature flag management for A/B testing\n *   - User segmentation and cohort analysis\n *   - Error tracking and performance monitoring\n * \n * Business Intelligence:\n *   - Track user journey from discovery to purchase\n *   - Measure recommendation algorithm effectiveness\n *   - Monitor affiliate conversion rates and revenue\n *   - Analyze user engagement and retention patterns\n * \n * Privacy & Compliance:\n *   - GDPR-compliant user consent management\n *   - User opt-out functionality\n *   - Data anonymization and retention policies\n *   - Cookie consent integration\n * \n * Integration:\n *   - PostHog for event tracking and analytics\n *   - Feature flags for controlled rollouts\n *   - User identification for personalized experiences\n *   - Custom event validation and enrichment\n * \n * Usage:\n *   import { analytics, trackEvent, identifyUser } from '@/lib/analytics';\n *   \n *   // Initialize analytics\n *   await analytics.init();\n *   \n *   // Track user events\n *   trackEvent('product_swiped', { direction: 'right', product_id: '123' });\n *   \n *   // Identify users\n *   identifyUser('user_123', { subscription_tier: 'premium' });\n */\n// @ts-nocheck\nfunction stryNS_9fa48() {\n  var g = typeof globalThis === 'object' && globalThis && globalThis.Math === Math && globalThis || new Function(\"return this\")();\n  var ns = g.__stryker__ || (g.__stryker__ = {});\n  if (ns.activeMutant === undefined && g.process && g.process.env && g.process.env.__STRYKER_ACTIVE_MUTANT__) {\n    ns.activeMutant = g.process.env.__STRYKER_ACTIVE_MUTANT__;\n  }\n  function retrieveNS() {\n    return ns;\n  }\n  stryNS_9fa48 = retrieveNS;\n  return retrieveNS();\n}\nstryNS_9fa48();\nfunction stryCov_9fa48() {\n  var ns = stryNS_9fa48();\n  var cov = ns.mutantCoverage || (ns.mutantCoverage = {\n    static: {},\n    perTest: {}\n  });\n  function cover() {\n    var c = cov.static;\n    if (ns.currentTestId) {\n      c = cov.perTest[ns.currentTestId] = cov.perTest[ns.currentTestId] || {};\n    }\n    var a = arguments;\n    for (var i = 0; i < a.length; i++) {\n      c[a[i]] = (c[a[i]] || 0) + 1;\n    }\n  }\n  stryCov_9fa48 = cover;\n  cover.apply(null, arguments);\n}\nfunction stryMutAct_9fa48(id) {\n  var ns = stryNS_9fa48();\n  function isActive(id) {\n    if (ns.activeMutant === id) {\n      if (ns.hitCount !== void 0 && ++ns.hitCount > ns.hitLimit) {\n        throw new Error('Stryker: Hit count limit reached (' + ns.hitCount + ')');\n      }\n      return true;\n    }\n    return false;\n  }\n  stryMutAct_9fa48 = isActive;\n  return isActive(id);\n}\nimport posthog from 'posthog-js';\nimport { config } from '@/config';\nimport { createPostHogConfig, validateEvent, getCommonEventProperties } from './posthog-config';\n\n/**\n * Analytics Service class for comprehensive user behavior tracking.\n * \n * Manages PostHog integration with robust error handling, retry logic,\n * and business-specific event tracking. Provides type-safe analytics\n * interface for the entire application.\n * \n * Architecture:\n *   - Singleton pattern for consistent analytics instance\n *   - Automatic initialization with retry logic\n *   - Event validation and enrichment\n *   - Feature flag integration\n *   - Privacy controls and opt-out functionality\n * \n * Error Handling:\n *   - Graceful degradation when analytics unavailable\n *   - Automatic retry on initialization failures\n *   - Comprehensive logging for debugging\n *   - Fallback behavior for critical paths\n */\nclass AnalyticsService {\n  /**\n   * Service state management for reliable analytics operation.\n   */\n  private initialized = stryMutAct_9fa48(\"10157\") ? true : (stryCov_9fa48(\"10157\"), false); // Analytics initialization status\n  private retryCount = 0; // Current retry attempt counter\n  private maxRetries = 3; // Maximum initialization retry attempts\n\n  /**\n   * Initialize PostHog analytics service with robust error handling.\n   * \n   * Performs comprehensive setup including:\n   *   - PostHog SDK initialization with custom configuration\n   *   - Connection testing and validation\n   *   - Automatic retry on failures\n   *   - Development vs production environment handling\n   * \n   * Error Recovery:\n   *   - Retries initialization up to maxRetries times\n   *   - Exponential backoff for retry delays\n   *   - Graceful degradation if initialization fails\n   * \n   * Environment Handling:\n   *   - Server-side rendering compatibility (no window)\n   *   - Development debugging and logging\n   *   - Production optimizations\n   * \n   * Returns:\n   *   Promise<void>: Resolves when initialization complete\n   */\n  async init() {\n    if (stryMutAct_9fa48(\"10158\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10158\");\n      // Prevent initialization in invalid environments\n      if (stryMutAct_9fa48(\"10161\") ? (typeof window === 'undefined' || this.initialized) && !config.posthogKey : stryMutAct_9fa48(\"10160\") ? false : stryMutAct_9fa48(\"10159\") ? true : (stryCov_9fa48(\"10159\", \"10160\", \"10161\"), (stryMutAct_9fa48(\"10163\") ? typeof window === 'undefined' && this.initialized : stryMutAct_9fa48(\"10162\") ? false : (stryCov_9fa48(\"10162\", \"10163\"), (stryMutAct_9fa48(\"10165\") ? typeof window !== 'undefined' : stryMutAct_9fa48(\"10164\") ? false : (stryCov_9fa48(\"10164\", \"10165\"), typeof window === (stryMutAct_9fa48(\"10166\") ? \"\" : (stryCov_9fa48(\"10166\"), 'undefined')))) || this.initialized)) || (stryMutAct_9fa48(\"10167\") ? config.posthogKey : (stryCov_9fa48(\"10167\"), !config.posthogKey)))) {\n        if (stryMutAct_9fa48(\"10168\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10168\");\n          return;\n        }\n      }\n      try {\n        if (stryMutAct_9fa48(\"10169\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10169\");\n          // Create PostHog configuration with environment-specific settings\n          const posthogConfig = createPostHogConfig();\n          console.log(stryMutAct_9fa48(\"10170\") ? \"\" : (stryCov_9fa48(\"10170\"), '[PostHog] Initializing analytics service...'), stryMutAct_9fa48(\"10171\") ? {} : (stryCov_9fa48(\"10171\"), {\n            key: (stryMutAct_9fa48(\"10173\") ? config.posthogKey.substring(0, 10) : stryMutAct_9fa48(\"10172\") ? config.posthogKey : (stryCov_9fa48(\"10172\", \"10173\"), config.posthogKey?.substring(0, 10))) + (stryMutAct_9fa48(\"10174\") ? \"\" : (stryCov_9fa48(\"10174\"), '...')),\n            // Masked key for security\n            host: posthogConfig.api_host,\n            // PostHog server host\n            debug: posthogConfig.debug // Debug mode status\n          }));\n\n          // Initialize PostHog SDK with configuration\n          posthog.init(config.posthogKey, posthogConfig);\n\n          // Mark as successfully initialized\n          this.initialized = stryMutAct_9fa48(\"10175\") ? false : (stryCov_9fa48(\"10175\"), true);\n          this.retryCount = 0; // Reset retry counter\n\n          // Verify analytics connectivity with test event\n          await this.testConnection();\n        }\n      } catch (error) {\n        if (stryMutAct_9fa48(\"10176\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10176\");\n          console.error(stryMutAct_9fa48(\"10177\") ? \"\" : (stryCov_9fa48(\"10177\"), '[PostHog] Initialization failed:'), error);\n\n          // Implement retry logic with exponential backoff\n          if (stryMutAct_9fa48(\"10181\") ? this.retryCount >= this.maxRetries : stryMutAct_9fa48(\"10180\") ? this.retryCount <= this.maxRetries : stryMutAct_9fa48(\"10179\") ? false : stryMutAct_9fa48(\"10178\") ? true : (stryCov_9fa48(\"10178\", \"10179\", \"10180\", \"10181\"), this.retryCount < this.maxRetries)) {\n            if (stryMutAct_9fa48(\"10182\")) {\n              {}\n            } else {\n              stryCov_9fa48(\"10182\");\n              stryMutAct_9fa48(\"10183\") ? this.retryCount-- : (stryCov_9fa48(\"10183\"), this.retryCount++);\n              const delayMs = stryMutAct_9fa48(\"10184\") ? 1000 / this.retryCount : (stryCov_9fa48(\"10184\"), 1000 * this.retryCount); // Exponential backoff\n              console.log(stryMutAct_9fa48(\"10185\") ? `` : (stryCov_9fa48(\"10185\"), `[PostHog] Retrying initialization (${this.retryCount}/${this.maxRetries}) in ${delayMs}ms...`));\n              setTimeout(stryMutAct_9fa48(\"10186\") ? () => undefined : (stryCov_9fa48(\"10186\"), () => this.init()), delayMs);\n            }\n          } else {\n            if (stryMutAct_9fa48(\"10187\")) {\n              {}\n            } else {\n              stryCov_9fa48(\"10187\");\n              console.error(stryMutAct_9fa48(\"10188\") ? \"\" : (stryCov_9fa48(\"10188\"), '[PostHog] Maximum retry attempts reached, analytics disabled'));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Test PostHog connectivity with diagnostic event.\n   * \n   * Sends a test event to verify that analytics are working correctly.\n   * Provides debugging information for troubleshooting connection issues.\n   * \n   * Test Event Data:\n   *   - Common properties (user agent, URL, timestamp)\n   *   - Initialization metadata (time, retry count)\n   *   - Environment information for debugging\n   * \n   * Returns:\n   *   Promise<void>: Resolves when test complete\n   */\n  private async testConnection(): Promise<void> {\n    if (stryMutAct_9fa48(\"10189\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10189\");\n      if (stryMutAct_9fa48(\"10192\") ? false : stryMutAct_9fa48(\"10191\") ? true : stryMutAct_9fa48(\"10190\") ? this.initialized : (stryCov_9fa48(\"10190\", \"10191\", \"10192\"), !this.initialized)) return;\n      try {\n        if (stryMutAct_9fa48(\"10193\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10193\");\n          // Send diagnostic event with initialization metadata\n          this.track(stryMutAct_9fa48(\"10194\") ? \"\" : (stryCov_9fa48(\"10194\"), 'analytics_service_initialized'), stryMutAct_9fa48(\"10195\") ? {} : (stryCov_9fa48(\"10195\"), {\n            ...getCommonEventProperties(),\n            // Standard event properties\n            initialization_time: Date.now(),\n            // Timestamp for performance tracking\n            retry_count: this.retryCount,\n            // Number of retries for debugging\n            environment: config.isProduction ? stryMutAct_9fa48(\"10196\") ? \"\" : (stryCov_9fa48(\"10196\"), 'production') : stryMutAct_9fa48(\"10197\") ? \"\" : (stryCov_9fa48(\"10197\"), 'development')\n          }));\n          console.log(stryMutAct_9fa48(\"10198\") ? \"\" : (stryCov_9fa48(\"10198\"), '[PostHog] Connection test successful - analytics ready'));\n        }\n      } catch (error) {\n        if (stryMutAct_9fa48(\"10199\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10199\");\n          console.warn(stryMutAct_9fa48(\"10200\") ? \"\" : (stryCov_9fa48(\"10200\"), '[PostHog] Connection test failed:'), error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Identify user for personalized analytics and targeting.\n   * \n   * Associates all future events with a specific user ID, enabling:\n   *   - Cross-device tracking and session continuity\n   *   - Personalized feature flags and A/B tests\n   *   - User-specific analytics and cohort analysis\n   *   - Revenue attribution and lifetime value tracking\n   * \n   * Privacy Compliance:\n   *   - Only identifies users who have provided consent\n   *   - Supports pseudonymous identifiers for privacy\n   *   - Respects user opt-out preferences\n   * \n   * Parameters:\n   *   userId: Unique user identifier (UUID, email hash, etc.)\n   *   properties: Additional user attributes for segmentation\n   * \n   * Example:\n   *   analytics.identify('user_123', {\n   *     email: 'user@example.com',\n   *     subscription_tier: 'premium',\n   *     first_name: 'John',\n   *     signup_date: '2024-01-01'\n   *   });\n   */\n  identify(userId: string, properties?: Record<string, any>) {\n    if (stryMutAct_9fa48(\"10201\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10201\");\n      if (stryMutAct_9fa48(\"10203\") ? false : stryMutAct_9fa48(\"10202\") ? true : (stryCov_9fa48(\"10202\", \"10203\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10204\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10204\");\n          console.log(stryMutAct_9fa48(\"10205\") ? \"\" : (stryCov_9fa48(\"10205\"), '[PostHog] Identifying user:'), userId, properties);\n          posthog.identify(userId, properties);\n        }\n      }\n    }\n  }\n\n  /**\n   * Track user events for analytics and business intelligence.\n   * \n   * Records user actions, behaviors, and system events for:\n   *   - Product analytics and user journey mapping\n   *   - Revenue tracking and conversion optimization\n   *   - A/B testing and feature performance measurement\n   *   - Error monitoring and performance analysis\n   * \n   * Event Processing:\n   *   - Validates event name and properties\n   *   - Enriches events with common properties (timestamp, user agent, etc.)\n   *   - Handles errors gracefully without breaking user experience\n   *   - Logs events for debugging in development\n   * \n   * Common Event Categories:\n   *   - User actions: swipe_left, swipe_right, product_clicked\n   *   - Revenue events: affiliate_click, purchase_completed\n   *   - System events: page_viewed, error_occurred\n   *   - Engagement: session_started, feature_used\n   * \n   * Parameters:\n   *   eventName: Descriptive event name (snake_case convention)\n   *   properties: Event-specific data for analysis\n   * \n   * Example:\n   *   analytics.track('product_swiped', {\n   *     direction: 'right',\n   *     product_id: 'B08GYKNCCP',\n   *     category: 'Electronics',\n   *     session_id: 'session_123'\n   *   });\n   */\n  track(eventName: string, properties?: Record<string, any>) {\n    if (stryMutAct_9fa48(\"10206\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10206\");\n      // Handle analytics not initialized gracefully\n      if (stryMutAct_9fa48(\"10209\") ? false : stryMutAct_9fa48(\"10208\") ? true : stryMutAct_9fa48(\"10207\") ? this.initialized : (stryCov_9fa48(\"10207\", \"10208\", \"10209\"), !this.initialized)) {\n        if (stryMutAct_9fa48(\"10210\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10210\");\n          console.warn(stryMutAct_9fa48(\"10211\") ? \"\" : (stryCov_9fa48(\"10211\"), '[PostHog] Analytics not initialized, event queued:'), eventName);\n          // In production, could queue events for later sending\n          return;\n        }\n      }\n\n      // Validate event meets naming and data requirements\n      if (stryMutAct_9fa48(\"10214\") ? false : stryMutAct_9fa48(\"10213\") ? true : stryMutAct_9fa48(\"10212\") ? validateEvent(eventName, properties) : (stryCov_9fa48(\"10212\", \"10213\", \"10214\"), !validateEvent(eventName, properties))) {\n        if (stryMutAct_9fa48(\"10215\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10215\");\n          return;\n        }\n      }\n      try {\n        if (stryMutAct_9fa48(\"10216\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10216\");\n          // Enrich event with common properties for consistent analytics\n          const enrichedProperties = stryMutAct_9fa48(\"10217\") ? {} : (stryCov_9fa48(\"10217\"), {\n            ...getCommonEventProperties(),\n            // Standard properties (timestamp, URL, etc.)\n            ...properties // Event-specific properties\n          });\n          console.log(stryMutAct_9fa48(\"10218\") ? \"\" : (stryCov_9fa48(\"10218\"), '[PostHog] Tracking event:'), eventName, enrichedProperties);\n          posthog.capture(eventName, enrichedProperties);\n        }\n      } catch (error) {\n        if (stryMutAct_9fa48(\"10219\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10219\");\n          console.error(stryMutAct_9fa48(\"10220\") ? \"\" : (stryCov_9fa48(\"10220\"), '[PostHog] Failed to track event:'), eventName, error);\n          // Continue execution even if analytics fails\n        }\n      }\n    }\n  }\n\n  /**\n   * Set or update user properties for segmentation and personalization.\n   * \n   * Updates user profile data for:\n   *   - User segmentation and cohort analysis\n   *   - Personalized feature flags and targeting\n   *   - Revenue analysis and lifetime value tracking\n   *   - Customer support and user insights\n   * \n   * Property Categories:\n   *   - Demographics: age, location, gender\n   *   - Subscription: tier, status, billing_cycle\n   *   - Behavior: last_login, total_swipes, preferences\n   *   - Revenue: total_spent, commission_generated\n   * \n   * Parameters:\n   *   properties: Key-value pairs of user attributes\n   * \n   * Example:\n   *   analytics.setUserProperties({\n   *     subscription_tier: 'premium',\n   *     total_swipes: 150,\n   *     last_active: '2024-01-01',\n   *     favorite_categories: ['Electronics', 'Books']\n   *   });\n   */\n  setUserProperties(properties: Record<string, any>) {\n    if (stryMutAct_9fa48(\"10221\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10221\");\n      if (stryMutAct_9fa48(\"10223\") ? false : stryMutAct_9fa48(\"10222\") ? true : (stryCov_9fa48(\"10222\", \"10223\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10224\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10224\");\n          console.log(stryMutAct_9fa48(\"10225\") ? \"\" : (stryCov_9fa48(\"10225\"), '[PostHog] Setting user properties:'), properties);\n          posthog.people.set(properties);\n        }\n      }\n    }\n  }\n\n  /**\n   * Track page views for navigation analytics and user journey mapping.\n   * \n   * Records page navigation events for:\n   *   - User flow analysis and conversion funnels\n   *   - Page performance and engagement metrics\n   *   - A/B testing of page layouts and content\n   *   - SEO and content optimization insights\n   * \n   * Automatic Enrichment:\n   *   - Referrer information for traffic source analysis\n   *   - Page load time and performance metrics\n   *   - Device and browser information\n   *   - User session context\n   * \n   * Parameters:\n   *   path: Optional page path (defaults to current URL)\n   * \n   * Example:\n   *   analytics.trackPageView('/discover'); // Track specific page\n   *   analytics.trackPageView();            // Track current page\n   */\n  trackPageView(path?: string) {\n    if (stryMutAct_9fa48(\"10226\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10226\");\n      if (stryMutAct_9fa48(\"10228\") ? false : stryMutAct_9fa48(\"10227\") ? true : (stryCov_9fa48(\"10227\", \"10228\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10229\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10229\");\n          const pageUrl = stryMutAct_9fa48(\"10232\") ? path && window.location.href : stryMutAct_9fa48(\"10231\") ? false : stryMutAct_9fa48(\"10230\") ? true : (stryCov_9fa48(\"10230\", \"10231\", \"10232\"), path || window.location.href);\n          console.log(stryMutAct_9fa48(\"10233\") ? \"\" : (stryCov_9fa48(\"10233\"), '[PostHog] Tracking page view:'), pageUrl);\n          posthog.capture(stryMutAct_9fa48(\"10234\") ? \"\" : (stryCov_9fa48(\"10234\"), '$pageview'), stryMutAct_9fa48(\"10235\") ? {} : (stryCov_9fa48(\"10235\"), {\n            $current_url: pageUrl,\n            // Page URL for navigation tracking\n            page_title: document.title,\n            // Page title for content analysis\n            referrer: document.referrer // Previous page for traffic flow\n          }));\n        }\n      }\n    }\n  }\n\n  /**\n   * Reset user session for logout and privacy compliance.\n   * \n   * Clears all user identification and session data for:\n   *   - User logout and session termination\n   *   - Privacy compliance and data protection\n   *   - Shared device usage scenarios\n   *   - Testing and development environments\n   * \n   * Reset Actions:\n   *   - Clears user identification and properties\n   *   - Resets feature flag cache\n   *   - Generates new anonymous session ID\n   *   - Maintains analytics functionality for anonymous tracking\n   * \n   * Privacy Compliance:\n   *   - Ensures no personal data persists after logout\n   *   - Supports \"right to be forgotten\" requirements\n   *   - Clears all locally stored user data\n   * \n   * Example:\n   *   // On user logout\n   *   analytics.reset();\n   */\n  reset() {\n    if (stryMutAct_9fa48(\"10236\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10236\");\n      if (stryMutAct_9fa48(\"10238\") ? false : stryMutAct_9fa48(\"10237\") ? true : (stryCov_9fa48(\"10237\", \"10238\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10239\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10239\");\n          console.log(stryMutAct_9fa48(\"10240\") ? \"\" : (stryCov_9fa48(\"10240\"), '[PostHog] Resetting user session'));\n          posthog.reset();\n        }\n      }\n    }\n  }\n\n  /**\n   * Associate user with groups for organizational analytics.\n   * \n   * Groups users by organization, team, or other entities for:\n   *   - B2B analytics and enterprise insights\n   *   - Team collaboration feature usage\n   *   - Organization-level reporting and billing\n   *   - Multi-tenant application analytics\n   * \n   * Group Types:\n   *   - organization: Company or business entity\n   *   - team: Department or project team\n   *   - subscription: Shared subscription account\n   *   - family: Family gift-giving groups\n   * \n   * Parameters:\n   *   groupType: Type of group (organization, team, etc.)\n   *   groupKey: Unique identifier for the group\n   *   properties: Group-specific attributes\n   * \n   * Example:\n   *   analytics.group('organization', 'acme-corp', {\n   *     name: 'Acme Corporation',\n   *     plan: 'enterprise',\n   *     employees: 500\n   *   });\n   */\n  group(groupType: string, groupKey: string, properties?: Record<string, any>) {\n    if (stryMutAct_9fa48(\"10241\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10241\");\n      if (stryMutAct_9fa48(\"10243\") ? false : stryMutAct_9fa48(\"10242\") ? true : (stryCov_9fa48(\"10242\", \"10243\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10244\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10244\");\n          console.log(stryMutAct_9fa48(\"10245\") ? \"\" : (stryCov_9fa48(\"10245\"), '[PostHog] Setting group:'), groupType, groupKey, properties);\n          posthog.group(groupType, groupKey, properties);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if a feature flag is enabled for the current user.\n   * \n   * Enables controlled feature rollouts and A/B testing for:\n   *   - Gradual feature releases to user segments\n   *   - A/B testing of new functionality\n   *   - Kill switches for problematic features\n   *   - Personalized user experiences\n   * \n   * Feature Flag Categories:\n   *   - UI features: new_swipe_interface, dark_mode\n   *   - Business logic: premium_recommendations, affiliate_tracking\n   *   - Experiments: recommendation_algorithm_v2\n   *   - Rollouts: mobile_app_promotion\n   * \n   * Parameters:\n   *   flag: Feature flag name (snake_case convention)\n   * \n   * Returns:\n   *   boolean: True if feature is enabled for current user\n   * \n   * Example:\n   *   if (analytics.isFeatureEnabled('new_recommendation_engine')) {\n   *     // Show new recommendation UI\n   *   }\n   */\n  isFeatureEnabled(flag: string): boolean {\n    if (stryMutAct_9fa48(\"10246\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10246\");\n      if (stryMutAct_9fa48(\"10248\") ? false : stryMutAct_9fa48(\"10247\") ? true : (stryCov_9fa48(\"10247\", \"10248\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10249\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10249\");\n          const enabled = stryMutAct_9fa48(\"10252\") ? posthog.isFeatureEnabled(flag) !== true : stryMutAct_9fa48(\"10251\") ? false : stryMutAct_9fa48(\"10250\") ? true : (stryCov_9fa48(\"10250\", \"10251\", \"10252\"), posthog.isFeatureEnabled(flag) === (stryMutAct_9fa48(\"10253\") ? false : (stryCov_9fa48(\"10253\"), true)));\n          console.log(stryMutAct_9fa48(\"10254\") ? `` : (stryCov_9fa48(\"10254\"), `[PostHog] Feature flag '${flag}':`), enabled);\n          return enabled;\n        }\n      }\n      return stryMutAct_9fa48(\"10255\") ? true : (stryCov_9fa48(\"10255\"), false); // Default to disabled if analytics not available\n    }\n  }\n\n  /**\n   * Get feature flag value for advanced flag configurations.\n   * \n   * Retrieves feature flag values that can be:\n   *   - Boolean: true/false for simple on/off features\n   *   - String: variant names for multivariate tests\n   *   - Number: configuration values or percentages\n   * \n   * Advanced Use Cases:\n   *   - Multivariate testing with multiple variants\n   *   - Configuration flags with specific values\n   *   - Percentage-based rollouts\n   *   - String-based feature variants\n   * \n   * Parameters:\n   *   flag: Feature flag name\n   * \n   * Returns:\n   *   string | boolean | undefined: Flag value or undefined if not set\n   * \n   * Example:\n   *   const variant = analytics.getFeatureFlag('recommendation_algorithm');\n   *   if (variant === 'collaborative_filtering') {\n   *     // Use collaborative filtering algorithm\n   *   } else if (variant === 'content_based') {\n   *     // Use content-based algorithm\n   *   }\n   */\n  getFeatureFlag(flag: string): string | boolean | undefined {\n    if (stryMutAct_9fa48(\"10256\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10256\");\n      if (stryMutAct_9fa48(\"10258\") ? false : stryMutAct_9fa48(\"10257\") ? true : (stryCov_9fa48(\"10257\", \"10258\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10259\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10259\");\n          const value = posthog.getFeatureFlag(flag);\n          console.log(stryMutAct_9fa48(\"10260\") ? `` : (stryCov_9fa48(\"10260\"), `[PostHog] Feature flag '${flag}' value:`), value);\n          return value;\n        }\n      }\n      return undefined;\n    }\n  }\n\n  /**\n   * Opt user out of analytics tracking for privacy compliance.\n   * \n   * Provides user control over data collection for:\n   *   - GDPR and privacy regulation compliance\n   *   - User preference and consent management\n   *   - Cookie banner and privacy controls\n   *   - Data minimization principles\n   * \n   * Opt-Out Effects:\n   *   - Stops all event tracking and data collection\n   *   - Disables feature flags and personalization\n   *   - Maintains basic functionality without analytics\n   *   - Sets persistent opt-out preference\n   * \n   * Privacy Compliance:\n   *   - Respects user privacy choices\n   *   - Provides clear opt-out mechanism\n   *   - Maintains opt-out status across sessions\n   * \n   * Example:\n   *   // User clicks \"Opt out of analytics\"\n   *   analytics.optOut();\n   */\n  optOut() {\n    if (stryMutAct_9fa48(\"10261\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10261\");\n      if (stryMutAct_9fa48(\"10263\") ? false : stryMutAct_9fa48(\"10262\") ? true : (stryCov_9fa48(\"10262\", \"10263\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10264\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10264\");\n          console.log(stryMutAct_9fa48(\"10265\") ? \"\" : (stryCov_9fa48(\"10265\"), '[PostHog] User opted out of analytics tracking'));\n          posthog.opt_out_capturing();\n        }\n      }\n    }\n  }\n\n  /**\n   * Opt user into analytics tracking after previous opt-out.\n   * \n   * Re-enables analytics for users who previously opted out:\n   *   - Restores full analytics functionality\n   *   - Re-enables feature flags and personalization\n   *   - Resumes event tracking and data collection\n   *   - Updates user consent preferences\n   * \n   * Use Cases:\n   *   - User changes privacy preferences\n   *   - Premium users enabling advanced features\n   *   - Onboarding flow consent updates\n   *   - Settings page privacy controls\n   * \n   * Example:\n   *   // User clicks \"Enable analytics\"\n   *   analytics.optIn();\n   */\n  optIn() {\n    if (stryMutAct_9fa48(\"10266\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10266\");\n      if (stryMutAct_9fa48(\"10268\") ? false : stryMutAct_9fa48(\"10267\") ? true : (stryCov_9fa48(\"10267\", \"10268\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10269\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10269\");\n          console.log(stryMutAct_9fa48(\"10270\") ? \"\" : (stryCov_9fa48(\"10270\"), '[PostHog] User opted into analytics tracking'));\n          posthog.opt_in_capturing();\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if user has opted out of analytics tracking.\n   * \n   * Determines user's current privacy preference for:\n   *   - Conditional UI rendering based on consent\n   *   - Privacy settings page status display\n   *   - Feature availability and functionality\n   *   - Compliance with privacy regulations\n   * \n   * Returns:\n   *   boolean: True if user has opted out, false otherwise\n   * \n   * Example:\n   *   if (!analytics.hasOptedOut()) {\n   *     // Show analytics-dependent features\n   *     renderPersonalizedRecommendations();\n   *   }\n   */\n  hasOptedOut(): boolean {\n    if (stryMutAct_9fa48(\"10271\")) {\n      {}\n    } else {\n      stryCov_9fa48(\"10271\");\n      if (stryMutAct_9fa48(\"10273\") ? false : stryMutAct_9fa48(\"10272\") ? true : (stryCov_9fa48(\"10272\", \"10273\"), this.initialized)) {\n        if (stryMutAct_9fa48(\"10274\")) {\n          {}\n        } else {\n          stryCov_9fa48(\"10274\");\n          return posthog.has_opted_out_capturing();\n        }\n      }\n      return stryMutAct_9fa48(\"10275\") ? true : (stryCov_9fa48(\"10275\"), false); // Default to opted-in if analytics not available\n    }\n  }\n}\n\n// ==============================================================================\n// SINGLETON ANALYTICS INSTANCE\n// ==============================================================================\n// Global analytics instance for application-wide usage\n\n/**\n * Global analytics service instance.\n * \n * Singleton pattern ensures consistent analytics across the entire application.\n * Use this instance for all analytics operations to maintain state and configuration.\n */\nexport const analytics = new AnalyticsService();\n\n// ==============================================================================\n// CONVENIENCE FUNCTIONS\n// ==============================================================================\n// Simplified API for common analytics operations\n\n/**\n * Track user event with simplified API.\n * \n * Convenience function for the most common analytics operation.\n * Provides type-safe event tracking without direct service access.\n * \n * Parameters:\n *   eventName: Descriptive event name (snake_case)\n *   properties: Optional event data\n * \n * Example:\n *   trackEvent('button_clicked', { button_id: 'signup' });\n */\nexport const trackEvent = (eventName: string, properties?: Record<string, any>) => {\n  if (stryMutAct_9fa48(\"10276\")) {\n    {}\n  } else {\n    stryCov_9fa48(\"10276\");\n    analytics.track(eventName, properties);\n  }\n};\n\n/**\n * Identify user with simplified API.\n * \n * Convenience function for user identification without direct service access.\n * \n * Parameters:\n *   userId: Unique user identifier\n *   properties: Optional user attributes\n * \n * Example:\n *   identifyUser('user_123', { email: 'user@example.com' });\n */\nexport const identifyUser = (userId: string, properties?: Record<string, any>) => {\n  if (stryMutAct_9fa48(\"10277\")) {\n    {}\n  } else {\n    stryCov_9fa48(\"10277\");\n    analytics.identify(userId, properties);\n  }\n};\n\n/**\n * Track page view with simplified API.\n * \n * Convenience function for page view tracking without direct service access.\n * \n * Parameters:\n *   path: Optional page path (defaults to current URL)\n * \n * Example:\n *   trackPageView('/discover');\n */\nexport const trackPageView = (path?: string) => {\n  if (stryMutAct_9fa48(\"10278\")) {\n    {}\n  } else {\n    stryCov_9fa48(\"10278\");\n    analytics.trackPageView(path);\n  }\n};\n\n// Default export for importing as single module\nexport default analytics;\n\n// Export all public interfaces\n// Exported: analytics, trackEvent, identifyUser, trackPageView, AnalyticsService"],"names":["analytics","identifyUser","trackEvent","trackPageView","stryNS_9fa48","g","globalThis","Math","Function","ns","__stryker__","activeMutant","undefined","process","env","__STRYKER_ACTIVE_MUTANT__","retrieveNS","stryCov_9fa48","cov","mutantCoverage","static","perTest","cover","c","currentTestId","a","arguments","i","length","apply","stryMutAct_9fa48","id","isActive","hitCount","hitLimit","Error","AnalyticsService","init","window","initialized","config","posthogKey","posthogConfig","createPostHogConfig","console","log","key","substring","host","api_host","debug","posthog","retryCount","testConnection","error","maxRetries","delayMs","setTimeout","track","getCommonEventProperties","initialization_time","Date","now","retry_count","environment","isProduction","warn","identify","userId","properties","eventName","validateEvent","enrichedProperties","capture","setUserProperties","people","set","path","pageUrl","location","href","$current_url","page_title","document","title","referrer","reset","group","groupType","groupKey","isFeatureEnabled","flag","enabled","getFeatureFlag","value","optOut","opt_out_capturing","optIn","opt_in_capturing","hasOptedOut","has_opted_out_capturing"],"mappings":"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"}