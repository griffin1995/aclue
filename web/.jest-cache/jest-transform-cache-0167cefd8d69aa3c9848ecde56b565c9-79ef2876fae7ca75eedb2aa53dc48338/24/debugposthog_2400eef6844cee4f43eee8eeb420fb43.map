{"version":3,"names":["DebugPostHog","cov_gk31k5as","f","logs","setLogs","s","_react","useState","posthogStatus","setPosthogStatus","addLog","message","console","log","prev","Date","toISOString","useEffect","testPostHog","process","env","NODE_ENV","_config","config","posthogKey","b","posthogHost","window","posthog","Promise","resolve","then","_interop_require_wildcard","require","default","init","api_host","debug","capture_pageview","person_profiles","setTimeout","capture","test","timestamp","source","url","location","href","$current_url","error","Error","sendManualEvent","eventName","now","manual","user_agent","navigator","userAgent","sendPageviewEvent","$pathname","pathname","$host","host","$referrer","document","referrer","page_title","title","manual_pageview","_jsxruntime","jsx","className","jsxs","onClick","identify","email","name","response","fetch","method","headers","body","JSON","stringify","api_key","batch","event","properties","distinct_id","status","statusText","join"],"sources":["/home/jack/Documents/aclue-preprod/web/src/pages/debug-posthog.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { config } from '@/config';\n\nexport default function DebugPostHog() {\n  const [logs, setLogs] = useState<string[]>([]);\n  const [posthogStatus, setPosthogStatus] = useState<'loading' | 'success' | 'error'>('loading');\n\n  const addLog = (message: string) => {\n    console.log(message);\n    setLogs(prev => [...prev, `${new Date().toISOString()}: ${message}`]);\n  };\n\n  useEffect(() => {\n    const testPostHog = async () => {\n      try {\n        addLog('=== PostHog Debug Test Starting ===');\n        \n        // Check environment variables\n        addLog(`NODE_ENV: ${process.env.NODE_ENV}`);\n        addLog(`NEXT_PUBLIC_POSTHOG_KEY: ${config.posthogKey ? 'SET' : 'MISSING'}`);\n        addLog(`NEXT_PUBLIC_POSTHOG_HOST: ${config.posthogHost || 'MISSING'}`);\n        \n        // Check if window and posthog exist\n        if (typeof window === 'undefined') {\n          addLog('ERROR: Running on server side');\n          setPosthogStatus('error');\n          return;\n        }\n        \n        addLog('Window object available');\n        \n        // Import PostHog dynamically\n        const posthog = await import('posthog-js');\n        addLog('PostHog module imported successfully');\n        \n        // Initialize PostHog manually for debugging\n        if (config.posthogKey) {\n          addLog('Initializing PostHog...');\n          posthog.default.init(config.posthogKey, {\n            api_host: config.posthogHost || 'https://app.posthog.com',\n            debug: true, // Force debug mode\n            capture_pageview: false,\n            person_profiles: 'identified_only',\n          });\n          addLog('PostHog initialized');\n          \n          // Wait a moment for initialization\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Check if PostHog is loaded\n          if (window.posthog) {\n            addLog('PostHog is available on window object');\n            \n            // Test capturing an event\n            addLog('Sending test event...');\n            window.posthog.capture('debug_test_event', {\n              test: true,\n              timestamp: new Date().toISOString(),\n              source: 'debug_page',\n              url: window.location.href,\n            });\n            addLog('Test event sent');\n            \n            // Test page view\n            addLog('Sending page view...');\n            window.posthog.capture('$pageview', {\n              $current_url: window.location.href,\n            });\n            addLog('Page view sent');\n            \n            setPosthogStatus('success');\n            addLog('=== PostHog Debug Test Completed Successfully ===');\n          } else {\n            addLog('ERROR: PostHog not available on window object');\n            setPosthogStatus('error');\n          }\n        } else {\n          addLog('ERROR: PostHog key not configured');\n          setPosthogStatus('error');\n        }\n      } catch (error) {\n        addLog(`ERROR: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        setPosthogStatus('error');\n      }\n    };\n\n    testPostHog();\n  }, []);\n\n  const sendManualEvent = () => {\n    if (window.posthog) {\n      const eventName = `manual_debug_${Date.now()}`;\n      addLog(`Sending manual event: ${eventName}`);\n      window.posthog.capture(eventName, {\n        manual: true,\n        timestamp: new Date().toISOString(),\n        user_agent: navigator.userAgent,\n      });\n      addLog('Manual event sent');\n    } else {\n      addLog('ERROR: PostHog not available for manual event');\n    }\n  };\n\n  const sendPageviewEvent = () => {\n    if (window.posthog) {\n      addLog('Sending manual $pageview event...');\n      window.posthog.capture('$pageview', {\n        $current_url: window.location.href,\n        $pathname: window.location.pathname,\n        $host: window.location.host,\n        $referrer: document.referrer,\n        page_title: document.title,\n        manual_pageview: true,\n        timestamp: new Date().toISOString(),\n      });\n      addLog('Manual $pageview event sent');\n    } else {\n      addLog('ERROR: PostHog not available for pageview event');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">PostHog Debug Page</h1>\n        \n        {/* Status */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Status</h2>\n          <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${\n            posthogStatus === 'loading' ? 'bg-yellow-100 text-yellow-800' :\n            posthogStatus === 'success' ? 'bg-green-100 text-green-800' :\n            'bg-red-100 text-red-800'\n          }`}>\n            {posthogStatus === 'loading' ? 'Testing...' :\n             posthogStatus === 'success' ? 'PostHog Working' :\n             'PostHog Error'}\n          </div>\n        </div>\n\n        {/* Manual Test */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Manual Test</h2>\n          <button\n            onClick={sendManualEvent}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 mr-4\"\n          >\n            Send Manual Event\n          </button>\n          <button\n            onClick={sendPageviewEvent}\n            className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 mr-4\"\n          >\n            Send $pageview Event\n          </button>\n          <button\n            onClick={() => {\n              if (window.posthog) {\n                window.posthog.identify(`debug_user_${Date.now()}`, {\n                  email: 'debug@example.com',\n                  name: 'Debug User',\n                });\n                addLog('User identified');\n              }\n            }}\n            className=\"bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700\"\n          >\n            Identify User\n          </button>\n        </div>\n\n        {/* Network Check */}\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Network Test</h2>\n          <button\n            onClick={async () => {\n              try {\n                addLog('Testing direct API call...');\n                const response = await fetch('https://eu.i.posthog.com/batch/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                    api_key: config.posthogKey,\n                    batch: [{\n                      event: 'direct_api_test',\n                      properties: {\n                        distinct_id: 'debug_user',\n                        timestamp: new Date().toISOString(),\n                      },\n                    }],\n                  }),\n                });\n                addLog(`Direct API response: ${response.status} ${response.statusText}`);\n              } catch (error) {\n                addLog(`Direct API error: ${error instanceof Error ? error.message : 'Unknown'}`);\n              }\n            }}\n            className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\"\n          >\n            Test Direct API Call\n          </button>\n        </div>\n\n        {/* Logs */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibent mb-4\">Debug Logs</h2>\n          <div className=\"bg-gray-50 rounded p-4 max-h-96 overflow-y-auto\">\n            <pre className=\"text-sm text-gray-700 whitespace-pre-wrap\">\n              {logs.join('\\n')}\n            </pre>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"bg-blue-50 rounded-lg p-6 mt-6\">\n          <h2 className=\"text-lg font-semibold text-blue-900 mb-2\">Instructions</h2>\n          <ol className=\"text-blue-800 space-y-1\">\n            <li>1. Open browser developer tools (F12)</li>\n            <li>2. Go to Console tab to see any JavaScript errors</li>\n            <li>3. Go to Network tab to see if requests are being made to PostHog</li>\n            <li>4. Click the test buttons above</li>\n            <li>5. Check your PostHog dashboard for events</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Make posthog available on window for debugging\ndeclare global {\n  interface Window {\n    posthog: any;\n  }\n}"],"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","ignoreList":[]}