{"version":3,"names":["cov_16qbhsf2ef","actualCoverage","s","useSearch","defaultFilters","categories","priceRange","min","max","rating","availability","brands","sortBy","tags","options","b","f","debounceMs","maxSuggestions","enableFilters","autoSearch","query","setQuery","_react","useState","results","setResults","suggestions","setSuggestions","filters","setFiltersState","isLoading","setIsLoading","isLoadingSuggestions","setIsLoadingSuggestions","error","setError","hasMore","setHasMore","totalCount","setTotalCount","currentPage","setCurrentPage","recentSearches","setRecentSearches","popularSearches","setPopularSearches","debouncedQuery","_useDebounce","useDebounce","useEffect","saved","localStorage","getItem","JSON","parse","setItem","stringify","loadPopularSearches","response","_api","api","search","getPopularSearches","searches","useCallback","searchQuery","queryToSearch","searchParams","q","page","limit","products","total","trim","length","addToRecentSearches","err","Error","message","loadMore","prev","getSuggestions","setFilters","newFilters","resetFilters","clearResults","filtered","filter","toLowerCase","slice","clearRecentSearches","removeItem"],"sources":["/home/jack/Documents/aclue-preprod/web/src/hooks/useSearch.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDebounce } from './useDebounce';\nimport { api } from '@/lib/api';\nimport { Product } from '@/types';\n\nexport interface SearchFilters {\n  categories: string[];\n  priceRange: {\n    min: number;\n    max: number;\n  };\n  rating: number;\n  availability: 'all' | 'in_stock' | 'out_of_stock';\n  brands: string[];\n  sortBy: 'relevance' | 'price_low' | 'price_high' | 'rating' | 'newest' | 'popularity';\n  tags: string[];\n}\n\nexport interface SearchSuggestion {\n  id: string;\n  text: string;\n  type: 'product' | 'category' | 'brand' | 'tag';\n  count?: number;\n}\n\ninterface UseSearchOptions {\n  debounceMs?: number;\n  maxSuggestions?: number;\n  enableFilters?: boolean;\n  autoSearch?: boolean;\n}\n\ninterface UseSearchReturn {\n  query: string;\n  results: Product[];\n  suggestions: SearchSuggestion[];\n  filters: SearchFilters;\n  isLoading: boolean;\n  isLoadingSuggestions: boolean;\n  error: string | null;\n  hasMore: boolean;\n  totalCount: number;\n  recentSearches: string[];\n  popularSearches: string[];\n  setQuery: (query: string) => void;\n  setFilters: (filters: Partial<SearchFilters>) => void;\n  resetFilters: () => void;\n  search: (query?: string) => Promise<void>;\n  loadMore: () => Promise<void>;\n  clearResults: () => void;\n  addToRecentSearches: (query: string) => void;\n  clearRecentSearches: () => void;\n  getSuggestions: (query: string) => Promise<SearchSuggestion[]>;\n}\n\nconst defaultFilters: SearchFilters = {\n  categories: [],\n  priceRange: { min: 0, max: 1000 },\n  rating: 0,\n  availability: 'all',\n  brands: [],\n  sortBy: 'relevance',\n  tags: [],\n};\n\nexport function useSearch(options: UseSearchOptions = {}): UseSearchReturn {\n  const {\n    debounceMs = 300,\n    maxSuggestions = 10,\n    enableFilters = true,\n    autoSearch = true,\n  } = options;\n\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<Product[]>([]);\n  const [suggestions, setSuggestions] = useState<SearchSuggestion[]>([]);\n  const [filters, setFiltersState] = useState<SearchFilters>(defaultFilters);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [hasMore, setHasMore] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const [popularSearches, setPopularSearches] = useState<string[]>([]);\n\n  const debouncedQuery = useDebounce(query, debounceMs);\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('aclue_recent_searches');\n    if (saved) {\n      try {\n        setRecentSearches(JSON.parse(saved));\n      } catch {\n        // Ignore parsing errors\n      }\n    }\n  }, []);\n\n  // Save recent searches to localStorage\n  useEffect(() => {\n    localStorage.setItem('aclue_recent_searches', JSON.stringify(recentSearches));\n  }, [recentSearches]);\n\n  // Load popular searches\n  useEffect(() => {\n    const loadPopularSearches = async () => {\n      try {\n        const response = await api.search.getPopularSearches();\n        setPopularSearches(response.searches);\n      } catch {\n        // Silently fail for popular searches\n      }\n    };\n\n    loadPopularSearches();\n  }, []);\n\n  // Auto-search when query or filters change\n  useEffect(() => {\n    if (autoSearch && (debouncedQuery || enableFilters)) {\n      search(debouncedQuery);\n    }\n  }, [debouncedQuery, filters, autoSearch, enableFilters]);\n\n  // Search function\n  const search = useCallback(async (searchQuery?: string) => {\n    const queryToSearch = searchQuery ?? query;\n    \n    setIsLoading(true);\n    setError(null);\n    setCurrentPage(1);\n\n    try {\n      const searchParams = {\n        q: queryToSearch,\n        page: 1,\n        limit: 20,\n        ...(enableFilters ? filters : {}),\n      };\n\n      const response = await api.products.search(searchParams);\n      \n      setResults(response.products);\n      setTotalCount(response.total);\n      setHasMore(response.hasMore);\n      setCurrentPage(1);\n\n      // Add to recent searches if it's a meaningful query\n      if (queryToSearch.trim().length > 1) {\n        addToRecentSearches(queryToSearch.trim());\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Search failed');\n      setResults([]);\n      setTotalCount(0);\n      setHasMore(false);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [query, filters, enableFilters]);\n\n  // Load more results\n  const loadMore = useCallback(async () => {\n    if (!hasMore || isLoading) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const searchParams = {\n        q: query,\n        page: currentPage + 1,\n        limit: 20,\n        ...(enableFilters ? filters : {}),\n      };\n\n      const response = await api.products.search(searchParams);\n      \n      setResults(prev => [...prev, ...response.products]);\n      setHasMore(response.hasMore);\n      setCurrentPage(prev => prev + 1);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load more results');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [query, filters, currentPage, hasMore, isLoading, enableFilters]);\n\n  // Get search suggestions\n  const getSuggestions = useCallback(async (searchQuery: string): Promise<SearchSuggestion[]> => {\n    if (!searchQuery.trim() || searchQuery.length < 2) {\n      return [];\n    }\n\n    setIsLoadingSuggestions(true);\n\n    try {\n      const response = await api.search.getSuggestions({\n        q: searchQuery,\n        limit: maxSuggestions,\n      });\n\n      const suggestions = response.suggestions;\n      setSuggestions(suggestions);\n      return suggestions;\n    } catch {\n      return [];\n    } finally {\n      setIsLoadingSuggestions(false);\n    }\n  }, [maxSuggestions]);\n\n  // Auto-load suggestions when query changes\n  useEffect(() => {\n    if (query.length >= 2) {\n      getSuggestions(query);\n    } else {\n      setSuggestions([]);\n    }\n  }, [query, getSuggestions]);\n\n  // Update filters\n  const setFilters = useCallback((newFilters: Partial<SearchFilters>) => {\n    setFiltersState(prev => ({ ...prev, ...newFilters }));\n  }, []);\n\n  // Reset filters\n  const resetFilters = useCallback(() => {\n    setFiltersState(defaultFilters);\n  }, []);\n\n  // Clear results\n  const clearResults = useCallback(() => {\n    setResults([]);\n    setTotalCount(0);\n    setHasMore(false);\n    setCurrentPage(1);\n    setError(null);\n  }, []);\n\n  // Add to recent searches\n  const addToRecentSearches = useCallback((searchQuery: string) => {\n    setRecentSearches(prev => {\n      const filtered = prev.filter(s => s.toLowerCase() !== searchQuery.toLowerCase());\n      return [searchQuery, ...filtered].slice(0, 10); // Keep max 10 recent searches\n    });\n  }, []);\n\n  // Clear recent searches\n  const clearRecentSearches = useCallback(() => {\n    setRecentSearches([]);\n    localStorage.removeItem('aclue_recent_searches');\n  }, []);\n\n  return {\n    query,\n    results,\n    suggestions,\n    filters,\n    isLoading,\n    isLoadingSuggestions,\n    error,\n    hasMore,\n    totalCount,\n    recentSearches,\n    popularSearches,\n    setQuery,\n    setFilters,\n    resetFilters,\n    search,\n    loadMore,\n    clearResults,\n    addToRecentSearches,\n    clearRecentSearches,\n    getSuggestions,\n  };\n}"],"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","ignoreList":[]}