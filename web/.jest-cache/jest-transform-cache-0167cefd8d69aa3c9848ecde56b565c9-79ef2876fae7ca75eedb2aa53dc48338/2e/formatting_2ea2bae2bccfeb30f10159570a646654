ca6b2970059e86d342324a8493298e38
/**
 * Formatting utilities for the aclue web application
 */ /**
 * Format a price with currency symbol
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatCurrency: function() {
        return formatCurrency;
    },
    formatDate: function() {
        return formatDate;
    },
    formatDisplayUrl: function() {
        return formatDisplayUrl;
    },
    formatFileSize: function() {
        return formatFileSize;
    },
    formatNumber: function() {
        return formatNumber;
    },
    formatPercentage: function() {
        return formatPercentage;
    },
    formatPhoneNumber: function() {
        return formatPhoneNumber;
    },
    formatPrice: function() {
        return formatPrice;
    },
    formatRelativeTime: function() {
        return formatRelativeTime;
    },
    formatStars: function() {
        return formatStars;
    },
    formatTitleCase: function() {
        return formatTitleCase;
    },
    truncateText: function() {
        return truncateText;
    }
});
function formatPrice(amount, currency) {
    const currencySymbol = formatCurrency(currency);
    const formatted = new Intl.NumberFormat("en-GB", {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(Math.abs(amount));
    return amount < 0 ? `-${currencySymbol}${formatted}` : `${currencySymbol}${formatted}`;
}
function formatCurrency(currency) {
    const currencyMap = {
        USD: "$",
        EUR: "€",
        GBP: "\xa3",
        JPY: "\xa5",
        CAD: "C$",
        AUD: "A$",
        CHF: "CHF",
        CNY: "\xa5",
        SEK: "kr",
        NOK: "kr",
        DKK: "kr",
        PLN: "zł",
        CZK: "Kč",
        HUF: "Ft",
        RUB: "₽",
        INR: "₹",
        BRL: "R$",
        ZAR: "R",
        KRW: "₩",
        SGD: "S$",
        HKD: "HK$",
        MXN: "$",
        NZD: "NZ$"
    };
    return currencyMap[currency.toUpperCase()] || currency.toUpperCase();
}
function formatDate(date) {
    const targetDate = typeof date === "string" ? new Date(date) : date;
    return targetDate.toLocaleDateString("en-GB");
}
function formatRelativeTime(date) {
    const targetDate = typeof date === "string" ? new Date(date) : date;
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - targetDate.getTime()) / 1000);
    const absDiff = Math.abs(diffInSeconds);
    const intervals = [
        {
            label: "year",
            seconds: 31536000
        },
        {
            label: "month",
            seconds: 2592000
        },
        {
            label: "week",
            seconds: 604800
        },
        {
            label: "day",
            seconds: 86400
        },
        {
            label: "hour",
            seconds: 3600
        },
        {
            label: "minute",
            seconds: 60
        },
        {
            label: "second",
            seconds: 1
        }
    ];
    for (const interval of intervals){
        const count = Math.floor(absDiff / interval.seconds);
        if (count >= 1) {
            const suffix = count === 1 ? "" : "s";
            const timeUnit = `${count} ${interval.label}${suffix}`;
            return diffInSeconds < 0 ? `in ${timeUnit}` : `${timeUnit} ago`;
        }
    }
    return diffInSeconds < 0 ? "in 1 second" : "1 second ago";
}
function formatNumber(num, options = {}) {
    const defaultOptions = {
        notation: "standard",
        maximumFractionDigits: 0,
        ...options
    };
    return new Intl.NumberFormat("en-GB", defaultOptions).format(num);
}
function formatPercentage(value, decimals = 1) {
    return formatNumber(value, {
        style: "percent",
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals
    });
}
function formatFileSize(bytes) {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const dm = 1;
    const sizes = [
        "Bytes",
        "KB",
        "MB",
        "GB",
        "TB",
        "PB"
    ];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
}
function formatStars(rating, maxRating = 5) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = maxRating - fullStars - (hasHalfStar ? 1 : 0);
    return "★".repeat(fullStars) + (hasHalfStar ? "☆" : "") + "☆".repeat(emptyStars);
}
function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength - 3) + "...";
}
function formatPhoneNumber(phoneNumber) {
    // Remove all non-digit characters
    const cleaned = phoneNumber.replace(/\D/g, "");
    // Check if the number is a US number
    if (cleaned.length === 10) {
        return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;
    } else if (cleaned.length === 11 && cleaned[0] === "1") {
        return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;
    }
    // Return original if not a recognised format
    return phoneNumber;
}
function formatTitleCase(text) {
    return text.toLowerCase().split(" ").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
}
function formatDisplayUrl(url) {
    try {
        const urlObj = new URL(url);
        return urlObj.hostname + urlObj.pathname + urlObj.search;
    } catch  {
        return url;
    }
}

//# sourceMappingURL=data:application/json;base64,