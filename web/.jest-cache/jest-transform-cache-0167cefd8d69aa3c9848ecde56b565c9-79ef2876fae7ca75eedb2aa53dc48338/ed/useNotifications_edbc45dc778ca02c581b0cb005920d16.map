{"version":3,"names":["cov_jkcb0mine","actualCoverage","s","useNotifications","options","b","f","enablePushNotifications","enableBrowserNotifications","pollingInterval","notifications","setNotifications","_react","useState","permission","setPermission","isSupported","setIsSupported","useEffect","window","navigator","Notification","savedNotifications","localStorage","getItem","parsed","JSON","parse","map","n","timestamp","Date","error","console","setItem","stringify","requestPermission","useCallback","Error","result","showBrowserNotification","notification","browserNotification","title","body","message","icon","badge","tag","id","requireInteraction","type","getTime","data","url","actionUrl","notificationId","onclick","event","preventDefault","focus","open","markAsRead","close","setTimeout","showToastNotification","toastOptions","duration","position","_reacthottoast","toast","success","showNotification","notificationData","now","Math","random","toString","substr","read","prev","markAllAsRead","deleteNotification","filter","clearAll","subscribe","registration","serviceWorker","ready","subscription","pushManager","userVisibleOnly","applicationServerKey","process","env","NEXT_PUBLIC_VAPID_PUBLIC_KEY","fetch","method","headers","unsubscribe","getSubscription","endpoint","interval","setInterval","response","ok","serverNotifications","json","existingIds","Set","newNotifications","has","slice","debug","clearInterval","handleMessage","addEventListener","removeEventListener","unreadCount","length"],"sources":["/home/jack/Documents/aclue-preprod/web/src/hooks/useNotifications.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { toast } from 'react-hot-toast';\n\nexport interface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n  actionLabel?: string;\n  userId?: string;\n  metadata?: Record<string, any>;\n}\n\ninterface UseNotificationsOptions {\n  enablePushNotifications?: boolean;\n  enableBrowserNotifications?: boolean;\n  pollingInterval?: number;\n}\n\ninterface UseNotificationsReturn {\n  notifications: Notification[];\n  unreadCount: number;\n  isSupported: boolean;\n  permission: NotificationPermission;\n  requestPermission: () => Promise<NotificationPermission>;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  deleteNotification: (id: string) => void;\n  clearAll: () => void;\n  showNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;\n  subscribe: () => Promise<void>;\n  unsubscribe: () => Promise<void>;\n}\n\nexport function useNotifications(options: UseNotificationsOptions = {}): UseNotificationsReturn {\n  const {\n    enablePushNotifications = true,\n    enableBrowserNotifications = true,\n    pollingInterval = 30000, // 30 seconds\n  } = options;\n\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [permission, setPermission] = useState<NotificationPermission>('default');\n  const [isSupported, setIsSupported] = useState(false);\n\n  // Check if notifications are supported\n  useEffect(() => {\n    setIsSupported('Notification' in window && 'serviceWorker' in navigator);\n    if ('Notification' in window) {\n      setPermission(Notification.permission);\n    }\n  }, []);\n\n  // Load notifications from localStorage on mount\n  useEffect(() => {\n    const savedNotifications = localStorage.getItem('aclue_notifications');\n    if (savedNotifications) {\n      try {\n        const parsed = JSON.parse(savedNotifications);\n        setNotifications(parsed.map((n: any) => ({\n          ...n,\n          timestamp: new Date(n.timestamp),\n        })));\n      } catch (error) {\n        console.error('Failed to parse saved notifications:', error);\n      }\n    }\n  }, []);\n\n  // Save notifications to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('aclue_notifications', JSON.stringify(notifications));\n  }, [notifications]);\n\n  // Request notification permission\n  const requestPermission = useCallback(async (): Promise<NotificationPermission> => {\n    if (!isSupported) {\n      throw new Error('Notifications are not supported');\n    }\n\n    const result = await Notification.requestPermission();\n    setPermission(result);\n    return result;\n  }, [isSupported]);\n\n  // Show browser notification\n  const showBrowserNotification = useCallback((notification: Notification) => {\n    if (!enableBrowserNotifications || permission !== 'granted') return;\n\n    const browserNotification = new Notification(notification.title, {\n      body: notification.message,\n      icon: '/icons/icon-192x192.png',\n      badge: '/icons/icon-72x72.png',\n      tag: notification.id,\n      requireInteraction: notification.type === 'error',\n      timestamp: notification.timestamp.getTime(),\n      data: {\n        url: notification.actionUrl,\n        notificationId: notification.id,\n      },\n    });\n\n    // Handle notification click\n    browserNotification.onclick = (event) => {\n      event.preventDefault();\n      window.focus();\n      \n      if (notification.actionUrl) {\n        window.open(notification.actionUrl, '_blank');\n      }\n      \n      markAsRead(notification.id);\n      browserNotification.close();\n    };\n\n    // Auto-close after 5 seconds for non-error notifications\n    if (notification.type !== 'error') {\n      setTimeout(() => {\n        browserNotification.close();\n      }, 5000);\n    }\n  }, [enableBrowserNotifications, permission]);\n\n  // Show toast notification\n  const showToastNotification = useCallback((notification: Notification) => {\n    const toastOptions = {\n      duration: notification.type === 'error' ? 10000 : 5000,\n      position: 'top-right' as const,\n    };\n\n    switch (notification.type) {\n      case 'success':\n        toast.success(`${notification.title}\\n${notification.message}`, toastOptions);\n        break;\n      case 'error':\n        toast.error(`${notification.title}\\n${notification.message}`, toastOptions);\n        break;\n      case 'warning':\n        toast(`${notification.title}\\n${notification.message}`, {\n          ...toastOptions,\n          icon: '⚠️',\n        });\n        break;\n      default:\n        toast(`${notification.title}\\n${notification.message}`, toastOptions);\n        break;\n    }\n  }, []);\n\n  // Add new notification\n  const showNotification = useCallback((notificationData: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\n    const notification: Notification = {\n      ...notificationData,\n      id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      read: false,\n    };\n\n    setNotifications(prev => [notification, ...prev]);\n\n    // Show browser notification\n    showBrowserNotification(notification);\n    \n    // Show toast notification\n    showToastNotification(notification);\n  }, [showBrowserNotification, showToastNotification]);\n\n  // Mark notification as read\n  const markAsRead = useCallback((id: string) => {\n    setNotifications(prev =>\n      prev.map(notification =>\n        notification.id === id\n          ? { ...notification, read: true }\n          : notification\n      )\n    );\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev =>\n      prev.map(notification => ({ ...notification, read: true }))\n    );\n  }, []);\n\n  // Delete notification\n  const deleteNotification = useCallback((id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  }, []);\n\n  // Clear all notifications\n  const clearAll = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  // Subscribe to push notifications\n  const subscribe = useCallback(async () => {\n    if (!enablePushNotifications || !isSupported) return;\n\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY,\n      });\n\n      // Send subscription to server\n      await fetch('/api/notifications/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(subscription),\n      });\n\n      showNotification({\n        type: 'success',\n        title: 'Notifications Enabled',\n        message: 'You will now receive push notifications for important updates.',\n      });\n    } catch (error) {\n      console.error('Failed to subscribe to push notifications:', error);\n      showNotification({\n        type: 'error',\n        title: 'Notification Setup Failed',\n        message: 'Unable to enable push notifications. Please try again.',\n      });\n    }\n  }, [enablePushNotifications, isSupported, showNotification]);\n\n  // Unsubscribe from push notifications\n  const unsubscribe = useCallback(async () => {\n    if (!isSupported) return;\n\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n      \n      if (subscription) {\n        await subscription.unsubscribe();\n        \n        // Notify server\n        await fetch('/api/notifications/unsubscribe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ endpoint: subscription.endpoint }),\n        });\n      }\n\n      showNotification({\n        type: 'info',\n        title: 'Notifications Disabled',\n        message: 'You will no longer receive push notifications.',\n      });\n    } catch (error) {\n      console.error('Failed to unsubscribe from push notifications:', error);\n    }\n  }, [isSupported, showNotification]);\n\n  // Poll for new notifications (fallback for real-time)\n  useEffect(() => {\n    if (!pollingInterval) return;\n\n    const interval = setInterval(async () => {\n      try {\n        const response = await fetch('/api/notifications');\n        if (response.ok) {\n          const serverNotifications = await response.json();\n          \n          // Merge with local notifications, avoiding duplicates\n          setNotifications(prev => {\n            const existingIds = new Set(prev.map(n => n.id));\n            const newNotifications = serverNotifications\n              .filter((n: Notification) => !existingIds.has(n.id))\n              .map((n: any) => ({\n                ...n,\n                timestamp: new Date(n.timestamp),\n              }));\n            \n            return [...newNotifications, ...prev].slice(0, 100); // Keep max 100 notifications\n          });\n        }\n      } catch (error) {\n        // Silently fail - polling is a fallback mechanism\n        console.debug('Notification polling failed:', error);\n      }\n    }, pollingInterval);\n\n    return () => clearInterval(interval);\n  }, [pollingInterval]);\n\n  // Listen for service worker messages (for push notifications)\n  useEffect(() => {\n    if (!isSupported) return;\n\n    const handleMessage = (event: MessageEvent) => {\n      if (event.data && event.data.type === 'NOTIFICATION_RECEIVED') {\n        const notification = event.data.notification;\n        showNotification(notification);\n      }\n    };\n\n    navigator.serviceWorker.addEventListener('message', handleMessage);\n    return () => {\n      navigator.serviceWorker.removeEventListener('message', handleMessage);\n    };\n  }, [isSupported, showNotification]);\n\n  // Calculate unread count\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return {\n    notifications,\n    unreadCount,\n    isSupported,\n    permission,\n    requestPermission,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    clearAll,\n    showNotification,\n    subscribe,\n    unsubscribe,\n  };\n}"],"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","ignoreList":[]}