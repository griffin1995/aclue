{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/lib/__tests__/api.test.ts"],"sourcesContent":["import { api, tokenManager } from '../api';\nimport { SwipeRequest, CreateRecommendationRequest } from '@/types';\n\n// Mock fetch\nconst mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n\n// Mock localStorage\nconst mockLocalStorage = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n};\nObject.defineProperty(window, 'localStorage', { value: mockLocalStorage });\n\ndescribe('API Client', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockFetch.mockClear();\n    mockLocalStorage.getItem.mockClear();\n    mockLocalStorage.setItem.mockClear();\n    mockLocalStorage.removeItem.mockClear();\n    tokenManager.clearTokens();\n  });\n\n  describe('TokenManager', () => {\n    it('sets and retrieves tokens correctly', () => {\n      const accessToken = 'test-access-token';\n      const refreshToken = 'test-refresh-token';\n\n      tokenManager.setTokens(accessToken, refreshToken);\n\n      expect(tokenManager.getAccessToken()).toBe(accessToken);\n      expect(tokenManager.getRefreshToken()).toBe(refreshToken);\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('aclue_auth_token', accessToken);\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('aclue_refresh_token', refreshToken);\n    });\n\n    it('clears tokens correctly', () => {\n      tokenManager.setTokens('access', 'refresh');\n      tokenManager.clearTokens();\n\n      expect(tokenManager.getAccessToken()).toBeNull();\n      expect(tokenManager.getRefreshToken()).toBeNull();\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('aclue_auth_token');\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('aclue_refresh_token');\n    });\n\n    it('loads tokens from localStorage on initialization', () => {\n      mockLocalStorage.getItem.mockImplementation((key) => {\n        if (key === 'aclue_auth_token') return 'stored-access-token';\n        if (key === 'aclue_refresh_token') return 'stored-refresh-token';\n        return null;\n      });\n\n      // Re-import to trigger initialization\n      jest.resetModules();\n      const { tokenManager: newTokenManager } = require('../api');\n\n      expect(newTokenManager.getAccessToken()).toBe('stored-access-token');\n      expect(newTokenManager.getRefreshToken()).toBe('stored-refresh-token');\n    });\n  });\n\n  describe('Authentication API', () => {\n    it('registers user successfully', async () => {\n      const mockResponse = {\n        user: { id: '1', email: 'test@example.com' },\n        accessToken: 'access-token',\n        refreshToken: 'refresh-token',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const userData = {\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe',\n      };\n\n      const result = await api.auth.register(userData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'http://localhost:8000/api/v1/auth/register',\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n          body: JSON.stringify(userData),\n        })\n      );\n\n      expect(result).toEqual(mockResponse);\n    });\n\n    it('logs in user successfully', async () => {\n      const mockResponse = {\n        user: { id: '1', email: 'test@example.com' },\n        accessToken: 'access-token',\n        refreshToken: 'refresh-token',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const credentials = {\n        email: 'test@example.com',\n        password: 'password123',\n      };\n\n      const result = await api.auth.login(credentials);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'http://localhost:8000/api/v1/auth/login',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(credentials),\n        })\n      );\n\n      expect(result).toEqual(mockResponse);\n    });\n\n    it('handles authentication errors', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: async () => ({ message: 'Invalid credentials' }),\n      } as Response);\n\n      const credentials = {\n        email: 'test@example.com',\n        password: 'wrong-password',\n      };\n\n      await expect(api.auth.login(credentials)).rejects.toThrow('Invalid credentials');\n    });\n  });\n\n  describe('Swipe API', () => {\n    beforeEach(() => {\n      tokenManager.setTokens('valid-token', 'refresh-token');\n    });\n\n    it('records swipe successfully', async () => {\n      const mockResponse = { success: true };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const swipeData: SwipeRequest = {\n        sessionId: 'session-123',\n        productId: 'product-456',\n        direction: 'right',\n        timestamp: '2024-01-01T00:00:00Z',\n        context: { source: 'discovery' },\n      };\n\n      const result = await api.swipes.recordSwipe(swipeData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'http://localhost:8000/api/v1/swipes',\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Authorization': 'Bearer valid-token',\n            'Content-Type': 'application/json',\n          }),\n          body: JSON.stringify(swipeData),\n        })\n      );\n\n      expect(result).toEqual(mockResponse);\n    });\n\n    it('starts swipe session successfully', async () => {\n      const mockResponse = {\n        sessionId: 'new-session-123',\n        products: [],\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const sessionData = {\n        context: { source: 'onboarding' },\n        preferences: { categories: ['electronics'] },\n      };\n\n      const result = await api.swipes.startSession(sessionData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'http://localhost:8000/api/v1/swipes/session',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(sessionData),\n        })\n      );\n\n      expect(result).toEqual(mockResponse);\n    });\n  });\n\n  describe('Recommendations API', () => {\n    beforeEach(() => {\n      tokenManager.setTokens('valid-token', 'refresh-token');\n    });\n\n    it('fetches recommendations successfully', async () => {\n      const mockRecommendations = [\n        {\n          id: '1',\n          productId: 'product-1',\n          score: 0.95,\n          reason: 'Based on your preferences',\n        },\n      ];\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ recommendations: mockRecommendations }),\n      } as Response);\n\n      const result = await api.recommendations.getRecommendations();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'http://localhost:8000/api/v1/recommendations',\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'Authorization': 'Bearer valid-token',\n          }),\n        })\n      );\n\n      expect(result.recommendations).toEqual(mockRecommendations);\n    });\n\n    it('creates recommendation request successfully', async () => {\n      const mockResponse = { id: 'req-123', status: 'pending' };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const requestData: CreateRecommendationRequest = {\n        preferences: {\n          categories: ['electronics'],\n          priceRange: { min: 10, max: 100 },\n        },\n        count: 10,\n      };\n\n      const result = await api.recommendations.createRecommendationRequest(requestData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'http://localhost:8000/api/v1/recommendations/request',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(requestData),\n        })\n      );\n\n      expect(result).toEqual(mockResponse);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles network errors', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      await expect(api.auth.login({\n        email: 'test@example.com',\n        password: 'password',\n      })).rejects.toThrow('Network error');\n    });\n\n    it('handles server errors with error messages', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ message: 'Internal server error' }),\n      } as Response);\n\n      await expect(api.auth.login({\n        email: 'test@example.com',\n        password: 'password',\n      })).rejects.toThrow('Internal server error');\n    });\n\n    it('handles server errors without error messages', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n        json: async () => ({}),\n      } as Response);\n\n      await expect(api.auth.login({\n        email: 'test@example.com',\n        password: 'password',\n      })).rejects.toThrow('HTTP error! status: 500');\n    });\n  });\n\n  describe('Token Refresh', () => {\n    it('automatically refreshes token on 401 response', async () => {\n      tokenManager.setTokens('expired-token', 'valid-refresh');\n\n      // First call returns 401\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: async () => ({ message: 'Token expired' }),\n      } as Response);\n\n      // Refresh token call returns new tokens\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          accessToken: 'new-access-token',\n          refreshToken: 'new-refresh-token',\n        }),\n      } as Response);\n\n      // Retry with new token succeeds\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ data: 'success' }),\n      } as Response);\n\n      const result = await api.users.getProfile();\n\n      expect(mockFetch).toHaveBeenCalledTimes(3);\n      expect(tokenManager.getAccessToken()).toBe('new-access-token');\n      expect(result).toEqual({ data: 'success' });\n    });\n\n    it('clears tokens if refresh fails', async () => {\n      tokenManager.setTokens('expired-token', 'invalid-refresh');\n\n      // First call returns 401\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: async () => ({ message: 'Token expired' }),\n      } as Response);\n\n      // Refresh token call fails\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: async () => ({ message: 'Invalid refresh token' }),\n      } as Response);\n\n      await expect(api.users.getProfile()).rejects.toThrow('Token expired');\n      expect(tokenManager.getAccessToken()).toBeNull();\n      expect(tokenManager.getRefreshToken()).toBeNull();\n    });\n  });\n});"],"names":["mockFetch","global","fetch","mockLocalStorage","getItem","jest","fn","setItem","removeItem","clear","Object","defineProperty","window","value","describe","beforeEach","clearAllMocks","mockClear","tokenManager","clearTokens","it","accessToken","refreshToken","setTokens","expect","getAccessToken","toBe","getRefreshToken","toHaveBeenCalledWith","toBeNull","mockImplementation","key","resetModules","newTokenManager","require","mockResponse","user","id","email","mockResolvedValueOnce","ok","json","userData","password","firstName","lastName","result","api","auth","register","objectContaining","method","headers","body","JSON","stringify","toEqual","credentials","login","status","message","rejects","toThrow","success","swipeData","sessionId","productId","direction","timestamp","context","source","swipes","recordSwipe","products","sessionData","preferences","categories","startSession","mockRecommendations","score","reason","recommendations","getRecommendations","requestData","priceRange","min","max","count","createRecommendationRequest","mockRejectedValueOnce","Error","statusText","data","users","getProfile","toHaveBeenCalledTimes"],"mappings":"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"}