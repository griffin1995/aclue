{"version":3,"names":["api","cov_vtt3zf6ox","f","s","apiClient","default","_default","tokenManager","TokenManager","getInstance","instance","b","initializeFromStorage","window","accessToken","localStorage","getItem","_config","appConfig","storage","authToken","refreshToken","setTokens","setItem","getAccessToken","getRefreshToken","clearTokens","removeItem","user","ApiClient","constructor","isRefreshing","failedQueue","client","_axios","create","baseURL","config","apiUrl","timeout","headers","setupInterceptors","interceptors","request","use","token","Authorization","error","Promise","reject","response","originalRequest","status","_retry","resolve","push","then","catch","err","Error","refreshAccessToken","refresh_token","access_token","newRefreshToken","data","processQueue","refreshError","location","href","handleError","forEach","apiError","message","errors","unknown","code","timestamp","Date","toISOString","getErrorMessageByStatus","details","network","validation","unauthorized","forbidden","notFound","server","get","url","hasOwnProperty","success","post","put","patch","delete","login","endpoints","auth","register","refresh","logout","getCurrentUser","me","forgotPassword","email","resetPassword","password","verifyEmail","updateProfile","users","getUserPreferences","preferences","updateUserPreferences","getUserStatistics","statistics","deleteAccount","getProducts","params","products","list","searchProducts","query","search","getProduct","id","byId","getCategories","categories","getFeaturedProducts","featured","getTrendingProducts","trending","getProductsByCategory","categoryId","byCategory","createSwipeSession","swipes","createSession","getCurrentSwipeSession","currentSession","recordSwipe","sessionId","interactions","getSwipeAnalytics","analytics","generateRecommendations","recommendations","generate","getRecommendations","getRecommendation","provideFeedback","feedback","refreshRecommendations","createGiftLink","giftLinks","getGiftLinks","getGiftLink","getGiftLinkByToken","byToken","deleteGiftLink","getGiftLinkAnalytics","trackEvent","event","track","getAnalyticsDashboard","dashboard","healthCheck","health"],"sources":["/home/jack/Documents/aclue-preprod/web/src/lib/api.ts"],"sourcesContent":["/**\n * aclue API Client\n * \n * Centralised HTTP client for all backend API communication.\n * Provides type-safe methods for authentication, data fetching,\n * and real-time interactions with the aclue backend.\n * \n * Key Features:\n *   - Automatic JWT token management with refresh\n *   - Request/response interceptors for auth and error handling\n *   - Type-safe API methods with full TypeScript support\n *   - Automatic retry logic for failed requests\n *   - Comprehensive error handling and user feedback\n * \n * Architecture:\n *   - TokenManager: Secure storage and management of JWT tokens\n *   - ApiClient: Main HTTP client with interceptors and methods\n *   - Convenience exports: Simplified API for common operations\n * \n * Usage:\n *   import { api } from '@/lib/api';\n *   const user = await api.getCurrentUser();\n *   const products = await api.getProducts({ category: 'electronics' });\n */\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { config, endpoints, appConfig } from '@/config';\nimport { \n  ApiResponse, \n  PaginatedResponse, \n  ApiError,\n  AuthResponse,\n  LoginRequest,\n  RegisterRequest,\n  RefreshTokenRequest,\n  User,\n  Product,\n  Category,\n  SearchQuery,\n  SearchResult,\n  SwipeSession,\n  SwipeRequest,\n  SwipeInteraction,\n  Recommendation,\n  RecommendationRequest,\n  RecommendationResponse,\n  GiftLink,\n  CreateGiftLinkRequest,\n  GiftLinkInteraction,\n  AnalyticsEvent\n} from '@/types';\n\n// ==============================================================================\n// TOKEN MANAGEMENT\n// ==============================================================================\n// Singleton class for secure JWT token storage and management\n\n/**\n * Secure JWT token manager with localStorage persistence.\n * \n * Manages access and refresh tokens for API authentication:\n *   - Singleton pattern ensures consistent token state\n *   - Automatic localStorage synchronisation\n *   - Secure token cleanup on logout\n *   - Server-side rendering safe (checks for window)\n * \n * Token Lifecycle:\n *   1. Tokens received from authentication endpoints\n *   2. Stored in localStorage and memory\n *   3. Access token used for API requests\n *   4. Refresh token used to renew expired access tokens\n *   5. Cleared on logout or authentication errors\n */\nclass TokenManager {\n  private static instance: TokenManager;  // Singleton instance\n  private accessToken: string | null = null;   // In-memory access token cache\n  private refreshToken: string | null = null;  // In-memory refresh token cache\n\n  /**\n   * Get singleton TokenManager instance.\n   * \n   * Creates new instance on first call and initialises tokens\n   * from localStorage if available.\n   * \n   * Returns:\n   *   TokenManager: Singleton instance\n   */\n  static getInstance(): TokenManager {\n    if (!TokenManager.instance) {\n      TokenManager.instance = new TokenManager();\n      // Initialize tokens from localStorage on first creation\n      TokenManager.instance.initializeFromStorage();\n    }\n    return TokenManager.instance;\n  }\n\n  /**\n   * Initialise tokens from localStorage on browser load.\n   * \n   * Safely checks for browser environment and loads previously\n   * stored tokens into memory cache.\n   * \n   * Note: Only runs in browser environment (SSR safe)\n   */\n  private initializeFromStorage(): void {\n    if (typeof window !== 'undefined') {\n      this.accessToken = localStorage.getItem(appConfig.storage.authToken);\n      this.refreshToken = localStorage.getItem(appConfig.storage.refreshToken);\n    }\n  }\n\n  /**\n   * Store new JWT tokens in memory and localStorage.\n   * \n   * Updates both in-memory cache and persistent storage\n   * for session continuity across browser reloads.\n   * \n   * Parameters:\n   *   accessToken: JWT access token for API requests\n   *   refreshToken: JWT refresh token for session renewal\n   */\n  setTokens(accessToken: string, refreshToken: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    \n    // Persist to localStorage for session continuity\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(appConfig.storage.authToken, accessToken);\n      localStorage.setItem(appConfig.storage.refreshToken, refreshToken);\n    }\n  }\n\n  /**\n   * Retrieve current access token for API requests.\n   * \n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   * \n   * Returns:\n   *   string | null: Current access token or null if not available\n   */\n  getAccessToken(): string | null {\n    // Return cached token if available\n    if (this.accessToken) return this.accessToken;\n    \n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem(appConfig.storage.authToken);\n    }\n    \n    return null;\n  }\n\n  /**\n   * Retrieve current refresh token for session renewal.\n   * \n   * Checks memory cache first, then falls back to localStorage.\n   * Returns null if no token is available.\n   * \n   * Returns:\n   *   string | null: Current refresh token or null if not available\n   */\n  getRefreshToken(): string | null {\n    // Return cached token if available\n    if (this.refreshToken) return this.refreshToken;\n    \n    // Fallback to localStorage (handles page reloads)\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem(appConfig.storage.refreshToken);\n    }\n    \n    return null;\n  }\n\n  /**\n   * Clear all stored tokens and user data.\n   * \n   * Removes tokens from both memory and localStorage.\n   * Called during logout or authentication errors.\n   * \n   * Security:\n   *   - Clears all authentication-related data\n   *   - Prevents token reuse after logout\n   *   - Ensures clean state for new authentication\n   */\n  clearTokens(): void {\n    // Clear memory cache\n    this.accessToken = null;\n    this.refreshToken = null;\n    \n    // Clear persistent storage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(appConfig.storage.authToken);\n      localStorage.removeItem(appConfig.storage.refreshToken);\n      localStorage.removeItem(appConfig.storage.user);\n    }\n  }\n}\n\n// ==============================================================================\n// API CLIENT\n// ==============================================================================\n// Main HTTP client with authentication and error handling\n\n/**\n * Comprehensive HTTP client for aclue API communication.\n * \n * Features:\n *   - Automatic JWT token attachment to requests\n *   - Token refresh on 401 errors with request retry\n *   - Consistent error handling and user feedback\n *   - Request/response interceptors for common patterns\n *   - Type-safe methods for all API endpoints\n * \n * Request Flow:\n *   1. Add Authorization header with current access token\n *   2. Send request to backend API\n *   3. Handle successful response or error\n *   4. On 401 error: refresh token and retry original request\n *   5. On refresh failure: clear tokens and redirect to login\n */\nclass ApiClient {\n  private client: AxiosInstance;      // Axios HTTP client instance\n  private tokenManager: TokenManager; // Token storage and management\n  private isRefreshing = false;       // Flag to prevent concurrent refresh attempts\n  private failedQueue: Array<{        // Queue for requests waiting on token refresh\n    resolve: (value: any) => void;\n    reject: (error: any) => void;\n  }> = [];\n\n  /**\n   * Initialise API client with configuration and interceptors.\n   * \n   * Sets up:\n   *   - Base URL from configuration\n   *   - Request/response timeouts\n   *   - Default headers\n   *   - Authentication and error interceptors\n   */\n  constructor() {\n    this.tokenManager = TokenManager.getInstance();\n    \n    // Create axios instance with base configuration\n    this.client = axios.create({\n      baseURL: config.apiUrl,              // Backend API base URL\n      timeout: 30000,                      // 30 second timeout for requests\n      headers: {\n        'Content-Type': 'application/json', // JSON request body format\n        'Accept': 'application/json',       // Expected response format\n      },\n    });\n\n    // Set up request/response interceptors\n    this.setupInterceptors();\n  }\n\n  /**\n   * Set up request and response interceptors for authentication and error handling.\n   * \n   * Request Interceptor:\n   *   - Automatically adds Authorization header with current access token\n   *   - Ensures all API requests are authenticated\n   * \n   * Response Interceptor:\n   *   - Handles 401 errors with automatic token refresh\n   *   - Queues failed requests during refresh process\n   *   - Retries original requests after successful refresh\n   *   - Redirects to login on refresh failure\n   */\n  private setupInterceptors(): void {\n    // ===========================================================================\n    // REQUEST INTERCEPTOR: Add authentication token to all requests\n    // ===========================================================================\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = this.tokenManager.getAccessToken();\n        if (token && config.headers) {\n          // Add Bearer token to Authorization header\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // ===========================================================================\n    // RESPONSE INTERCEPTOR: Handle authentication errors and token refresh\n    // ===========================================================================\n    this.client.interceptors.response.use(\n      (response) => response, // Pass through successful responses\n      async (error) => {\n        const originalRequest = error.config;\n\n        // Handle 401 Unauthorized errors with automatic token refresh\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          \n          // If already refreshing, queue this request\n          if (this.isRefreshing) {\n            return new Promise((resolve, reject) => {\n              this.failedQueue.push({ resolve, reject });\n            }).then((token) => {\n              // Retry with new token\n              originalRequest.headers.Authorization = `Bearer ${token}`;\n              return this.client(originalRequest);\n            }).catch((err) => {\n              return Promise.reject(err);\n            });\n          }\n\n          // Mark request as retry to prevent infinite loops\n          originalRequest._retry = true;\n          this.isRefreshing = true;\n\n          try {\n            // Attempt to refresh the access token\n            const refreshToken = this.tokenManager.getRefreshToken();\n            if (!refreshToken) {\n              throw new Error('No refresh token available');\n            }\n\n            // Call refresh endpoint\n            const response = await this.refreshAccessToken({ refresh_token: refreshToken });\n            const { access_token, refresh_token: newRefreshToken } = response.data;\n\n            // Store new tokens\n            this.tokenManager.setTokens(access_token, newRefreshToken);\n            \n            // Process queued requests with new token\n            this.processQueue(access_token, null);\n            \n            // Retry original request with new token\n            originalRequest.headers.Authorization = `Bearer ${access_token}`;\n            return this.client(originalRequest);\n            \n          } catch (refreshError) {\n            // Refresh failed - clear tokens and redirect to login\n            this.processQueue(null, refreshError);\n            this.tokenManager.clearTokens();\n            \n            // Redirect to login if we're in the browser\n            if (typeof window !== 'undefined') {\n              window.location.href = '/auth/login';\n            }\n            \n            return Promise.reject(refreshError);\n          } finally {\n            this.isRefreshing = false;\n          }\n        }\n\n        // Handle other errors with consistent error formatting\n        return Promise.reject(this.handleError(error));\n      }\n    );\n  }\n\n  /**\n   * Process queued requests after token refresh attempt.\n   * \n   * During token refresh, multiple requests may fail with 401 errors.\n   * These requests are queued and processed once refresh completes.\n   * \n   * Parameters:\n   *   token: New access token (null if refresh failed)\n   *   error: Refresh error (null if refresh succeeded)\n   */\n  private processQueue(token: string | null, error: any): void {\n    this.failedQueue.forEach(({ resolve, reject }) => {\n      if (error) {\n        // Refresh failed - reject all queued requests\n        reject(error);\n      } else {\n        // Refresh succeeded - resolve with new token\n        resolve(token);\n      }\n    });\n    \n    // Clear the queue\n    this.failedQueue = [];\n  }\n\n  /**\n   * Convert axios errors to standardised ApiError format.\n   * \n   * Provides consistent error handling across all API methods\n   * with user-friendly messages and debugging information.\n   * \n   * Error Types:\n   *   - Response errors: Server returned error status (400, 500, etc.)\n   *   - Network errors: Request failed to reach server\n   *   - Request errors: Invalid request configuration\n   * \n   * Parameters:\n   *   error: Axios error object\n   * \n   * Returns:\n   *   ApiError: Standardised error with message, code, and details\n   */\n  private handleError(error: any): ApiError {\n    const apiError: ApiError = {\n      message: appConfig.errors.unknown,\n      code: 'UNKNOWN_ERROR',\n      status: 500,\n      timestamp: new Date().toISOString(),\n    };\n\n    if (error.response) {\n      // Server responded with error status (4xx, 5xx)\n      apiError.status = error.response.status;\n      apiError.message = error.response.data?.message || this.getErrorMessageByStatus(error.response.status);\n      apiError.code = error.response.data?.code || `HTTP_${error.response.status}`;\n      apiError.details = error.response.data?.details;\n    } else if (error.request) {\n      // Network error - request made but no response received\n      apiError.message = appConfig.errors.network;\n      apiError.code = 'NETWORK_ERROR';\n      apiError.status = 0;\n    } else {\n      // Request setup error - something wrong with request configuration\n      apiError.message = error.message || appConfig.errors.unknown;\n      apiError.code = 'REQUEST_ERROR';\n    }\n\n    return apiError;\n  }\n\n  /**\n   * Get user-friendly error message for HTTP status codes.\n   * \n   * Maps common HTTP status codes to localised error messages\n   * from application configuration.\n   * \n   * Parameters:\n   *   status: HTTP status code\n   * \n   * Returns:\n   *   string: User-friendly error message\n   */\n  private getErrorMessageByStatus(status: number): string {\n    switch (status) {\n      case 400:\n        return appConfig.errors.validation;   // \"Please check your input and try again\"\n      case 401:\n        return appConfig.errors.unauthorized; // \"Please log in to continue\"\n      case 403:\n        return appConfig.errors.forbidden;    // \"You don't have permission to do this\"\n      case 404:\n        return appConfig.errors.notFound;     // \"The requested item was not found\"\n      case 500:\n        return appConfig.errors.server;       // \"Something went wrong on our end\"\n      default:\n        return appConfig.errors.unknown;      // \"An unexpected error occurred\"\n    }\n  }\n\n  // Generic request methods\n  async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.get(url, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<any> = await this.client.post(url, data, config);\n    // Handle direct response from backend (not wrapped in ApiResponse)\n    if (response.data && !response.data.hasOwnProperty('data')) {\n      return { data: response.data, success: true };\n    }\n    return response.data;\n  }\n\n  async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.put(url, data, config);\n    return response.data;\n  }\n\n  async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.patch(url, data, config);\n    return response.data;\n  }\n\n  async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {\n    const response: AxiosResponse<ApiResponse<T>> = await this.client.delete(url, config);\n    return response.data;\n  }\n\n  // Authentication methods\n  async login(data: LoginRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.login, data);\n  }\n\n  async register(data: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.register, data);\n  }\n\n  async refreshAccessToken(data: RefreshTokenRequest): Promise<ApiResponse<AuthResponse>> {\n    return this.post<AuthResponse>(endpoints.auth.refresh, data);\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    const response = await this.post<void>(endpoints.auth.logout);\n    this.tokenManager.clearTokens();\n    return response;\n  }\n\n  async getCurrentUser(): Promise<ApiResponse<User>> {\n    return this.get<User>(endpoints.auth.me);\n  }\n\n  async forgotPassword(email: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.forgotPassword, { email });\n  }\n\n  async resetPassword(token: string, password: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.resetPassword, { token, password });\n  }\n\n  async verifyEmail(token: string): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.auth.verifyEmail, { token });\n  }\n\n  // User methods\n  async updateProfile(data: Partial<User>): Promise<ApiResponse<User>> {\n    return this.put<User>(endpoints.users.updateProfile, data);\n  }\n\n  async getUserPreferences(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.preferences);\n  }\n\n  async updateUserPreferences(data: any): Promise<ApiResponse<any>> {\n    return this.put(endpoints.users.preferences, data);\n  }\n\n  async getUserStatistics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.users.statistics);\n  }\n\n  async deleteAccount(): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.users.deleteAccount);\n  }\n\n  // Product methods\n  async getProducts(params?: any): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.list, { params });\n  }\n\n  async searchProducts(query: SearchQuery): Promise<ApiResponse<SearchResult>> {\n    return this.post<SearchResult>(endpoints.products.search, query);\n  }\n\n  async getProduct(id: string): Promise<ApiResponse<Product>> {\n    return this.get<Product>(endpoints.products.byId(id));\n  }\n\n  async getCategories(): Promise<ApiResponse<Category[]>> {\n    return this.get<Category[]>(endpoints.products.categories);\n  }\n\n  async getFeaturedProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.featured);\n  }\n\n  async getTrendingProducts(): Promise<ApiResponse<Product[]>> {\n    return this.get<Product[]>(endpoints.products.trending);\n  }\n\n  async getProductsByCategory(categoryId: string, params?: any): Promise<PaginatedResponse<Product>> {\n    return this.get<Product[]>(endpoints.products.byCategory(categoryId), { params });\n  }\n\n  // Swipe methods\n  async createSwipeSession(data: any): Promise<ApiResponse<SwipeSession>> {\n    return this.post<SwipeSession>(endpoints.swipes.createSession, data);\n  }\n\n  async getCurrentSwipeSession(): Promise<ApiResponse<SwipeSession>> {\n    return this.get<SwipeSession>(endpoints.swipes.currentSession);\n  }\n\n  async recordSwipe(sessionId: string, data: SwipeRequest): Promise<ApiResponse<SwipeInteraction>> {\n    return this.post<SwipeInteraction>(endpoints.swipes.interactions(sessionId), data);\n  }\n\n  async getSwipeAnalytics(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.swipes.analytics);\n  }\n\n  // Recommendation methods\n  async generateRecommendations(data: RecommendationRequest): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.generate, data);\n  }\n\n  async getRecommendations(params?: any): Promise<PaginatedResponse<Recommendation>> {\n    return this.get<Recommendation[]>(endpoints.recommendations.list, { params });\n  }\n\n  async getRecommendation(id: string): Promise<ApiResponse<Recommendation>> {\n    return this.get<Recommendation>(endpoints.recommendations.byId(id));\n  }\n\n  async provideFeedback(id: string, feedback: any): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.recommendations.feedback(id), feedback);\n  }\n\n  async refreshRecommendations(): Promise<ApiResponse<RecommendationResponse>> {\n    return this.post<RecommendationResponse>(endpoints.recommendations.refresh);\n  }\n\n  // Gift Link methods\n  async createGiftLink(data: CreateGiftLinkRequest): Promise<ApiResponse<GiftLink>> {\n    return this.post<GiftLink>(endpoints.giftLinks.create, data);\n  }\n\n  async getGiftLinks(): Promise<ApiResponse<GiftLink[]>> {\n    return this.get<GiftLink[]>(endpoints.giftLinks.list);\n  }\n\n  async getGiftLink(id: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byId(id));\n  }\n\n  async getGiftLinkByToken(token: string): Promise<ApiResponse<GiftLink>> {\n    return this.get<GiftLink>(endpoints.giftLinks.byToken(token));\n  }\n\n  async deleteGiftLink(id: string): Promise<ApiResponse<void>> {\n    return this.delete<void>(endpoints.giftLinks.delete(id));\n  }\n\n  async getGiftLinkAnalytics(id: string): Promise<ApiResponse<GiftLinkInteraction[]>> {\n    return this.get<GiftLinkInteraction[]>(endpoints.giftLinks.analytics(id));\n  }\n\n  // Analytics methods\n  async trackEvent(event: AnalyticsEvent): Promise<ApiResponse<void>> {\n    return this.post<void>(endpoints.analytics.track, event);\n  }\n\n  async getAnalyticsDashboard(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.analytics.dashboard);\n  }\n\n  // Health check\n  async healthCheck(): Promise<ApiResponse<any>> {\n    return this.get(endpoints.health);\n  }\n}\n\n// Create and export API client instance\nexport const apiClient = new ApiClient();\n\n// Export token manager for external use\nexport const tokenManager = TokenManager.getInstance();\n\n// Export convenience methods\nexport const api = {\n  // Auth\n  login: (data: LoginRequest) => apiClient.login(data),\n  register: (data: RegisterRequest) => apiClient.register(data),\n  logout: () => apiClient.logout(),\n  getCurrentUser: () => apiClient.getCurrentUser(),\n  \n  // Users\n  getUserStatistics: () => apiClient.getUserStatistics(),\n  \n  // Products\n  getProducts: (params?: any) => apiClient.getProducts(params),\n  searchProducts: (query: SearchQuery) => apiClient.searchProducts(query),\n  getProduct: (id: string) => apiClient.getProduct(id),\n  getCategories: () => apiClient.getCategories(),\n  \n  // Swipes\n  createSwipeSession: (data: any) => apiClient.createSwipeSession(data),\n  recordSwipe: (sessionId: string, data: SwipeRequest) => apiClient.recordSwipe(sessionId, data),\n  \n  // Recommendations\n  generateRecommendations: (data: RecommendationRequest) => apiClient.generateRecommendations(data),\n  getRecommendations: (params?: any) => apiClient.getRecommendations(params),\n  \n  // Gift Links\n  createGiftLink: (data: CreateGiftLinkRequest) => apiClient.createGiftLink(data),\n  getGiftLinks: () => apiClient.getGiftLinks(),\n  getGiftLinkByToken: (token: string) => apiClient.getGiftLinkByToken(token),\n  \n  // Analytics\n  trackEvent: (event: AnalyticsEvent) => apiClient.trackEvent(event),\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]}