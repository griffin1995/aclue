{"version":3,"sources":["/home/jack/Documents/aclue-preprod/web/src/components/swipe/__tests__/WorkingSwipeInterface.test.tsx"],"sourcesContent":["/**\n * WorkingSwipeInterface Component Test Suite\n * \n * Comprehensive tests for the swipe interface component that handles\n * product swiping, user interactions, and recommendation workflows.\n * \n * Test Coverage:\n * - Product card rendering and data display\n * - Swipe gesture handling and direction detection\n * - Session management and progress tracking\n * - API integration for swipe recording\n * - Loading states and error handling\n * - User interaction flows and state transitions\n * \n * Testing Strategy:\n * User-centric testing focusing on interaction behaviour, visual feedback,\n * and proper integration with backend services for swipe data collection.\n * \n * Business Context:\n * The swipe interface is the core user interaction for gathering preference\n * signals and must handle gestures reliably while providing smooth UX.\n */\n\n// ==============================================================================\n// IMPORTS AND DEPENDENCIES\n// ==============================================================================\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { WorkingSwipeInterface } from '../WorkingSwipeInterface';\nimport { useAuth } from '@/hooks/useAuth';\nimport * as api from '@/lib/api';\n\n// Mock authentication hook\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: jest.fn(),\n}));\n\n// Mock API functions\njest.mock('@/lib/api', () => ({\n  recordSwipe: jest.fn(),\n  getProducts: jest.fn(),\n}));\n\n// Mock framer-motion for simpler testing\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n  },\n  AnimatePresence: ({ children }: any) => <div>{children}</div>,\n}));\n\n// ==============================================================================\n// TEST SETUP AND UTILITIES\n// ==============================================================================\n\n// Mock product data\nconst mockProducts = [\n  {\n    id: 'product-1',\n    title: 'iPhone 15 Pro',\n    description: 'Latest Apple smartphone with advanced features',\n    price_min: 999,\n    price_max: 1199,\n    currency: 'GBP',\n    brand: 'Apple',\n    image_url: 'https://example.com/iphone15.jpg',\n    affiliate_url: 'https://amazon.co.uk/dp/B123?tag=aclue-21',\n    rating: 4.8,\n    review_count: 1500,\n    categories: { name: 'Electronics', slug: 'electronics' },\n  },\n  {\n    id: 'product-2',\n    title: 'Nike Air Max 90',\n    description: 'Classic running shoes with modern comfort',\n    price_min: 120,\n    price_max: 180,\n    currency: 'GBP',\n    brand: 'Nike',\n    image_url: 'https://example.com/nike-airmax.jpg',\n    affiliate_url: 'https://nike.com/air-max-90',\n    rating: 4.5,\n    review_count: 800,\n    categories: { name: 'Fashion', slug: 'fashion' },\n  },\n  {\n    id: 'product-3',\n    title: 'Sony WH-1000XM5',\n    description: 'Premium noise-cancelling headphones',\n    price_min: 350,\n    price_max: 380,\n    currency: 'GBP',\n    brand: 'Sony',\n    image_url: 'https://example.com/sony-headphones.jpg',\n    affiliate_url: 'https://sony.com/headphones/wh-1000xm5',\n    rating: 4.9,\n    review_count: 2300,\n    categories: { name: 'Electronics', slug: 'electronics' },\n  },\n];\n\n// Mock authenticated user\nconst mockUser = {\n  id: 'user-123',\n  email: 'test@aclue.app',\n  firstName: 'Test',\n  lastName: 'User',\n  subscriptionTier: 'free',\n};\n\n// ==============================================================================\n// SWIPE INTERFACE COMPONENT TESTS\n// ==============================================================================\n\ndescribe('WorkingSwipeInterface Component', () => {\n  // Setup mocks before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock successful authentication\n    (useAuth as jest.Mock).mockReturnValue({\n      user: mockUser,\n      isAuthenticated: true,\n      isLoading: false,\n      error: null,\n    });\n    \n    // Mock successful API calls\n    (api.getProducts as jest.Mock).mockResolvedValue(mockProducts);\n    (api.recordSwipe as jest.Mock).mockResolvedValue({\n      interaction_id: 'swipe-123',\n      recorded_at: new Date().toISOString(),\n    });\n  });\n\n  describe('Component Initialization', () => {\n    /**\n     * Test initial component rendering and setup.\n     * \n     * Validates that the swipe interface properly initializes\n     * with loading states and fetches product data.\n     */\n    it('should render loading state initially', () => {\n      render(<WorkingSwipeInterface />);\n      \n      // Verify loading indicator\n      expect(screen.getByText('Loading products...')).toBeInTheDocument();\n      expect(screen.getByRole('progressbar')).toBeInTheDocument();\n    });\n\n    /**\n     * Test successful product loading and display.\n     * \n     * Validates that products are properly fetched and the first\n     * product card is displayed with correct information.\n     */\n    it('should load and display products successfully', async () => {\n      render(<WorkingSwipeInterface />);\n      \n      // Wait for products to load\n      await waitFor(() => {\n        expect(screen.queryByText('Loading products...')).not.toBeInTheDocument();\n      });\n      \n      // Verify first product is displayed\n      expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      expect(screen.getByText('Latest Apple smartphone with advanced features')).toBeInTheDocument();\n      expect(screen.getByText('£999 - £1,199')).toBeInTheDocument();\n      expect(screen.getByText('Apple')).toBeInTheDocument();\n      expect(screen.getByText('★ 4.8 (1,500 reviews)')).toBeInTheDocument();\n      \n      // Verify progress indicator\n      expect(screen.getByText('1 of 3')).toBeInTheDocument();\n      \n      // Verify API was called\n      expect(api.getProducts).toHaveBeenCalledTimes(1);\n    });\n\n    /**\n     * Test error handling during product loading.\n     * \n     * Validates that API errors are properly handled with\n     * appropriate error messages and recovery options.\n     */\n    it('should handle product loading errors gracefully', async () => {\n      // Mock API error\n      (api.getProducts as jest.Mock).mockRejectedValue(\n        new Error('Failed to fetch products')\n      );\n      \n      render(<WorkingSwipeInterface />);\n      \n      // Wait for error state\n      await waitFor(() => {\n        expect(screen.getByText('Failed to load products')).toBeInTheDocument();\n      });\n      \n      // Verify retry button is available\n      const retryButton = screen.getByRole('button', { name: /retry/i });\n      expect(retryButton).toBeInTheDocument();\n      \n      // Test retry functionality\n      (api.getProducts as jest.Mock).mockResolvedValueOnce(mockProducts);\n      \n      await userEvent.click(retryButton);\n      \n      // Verify retry attempt\n      expect(api.getProducts).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Product Card Display', () => {\n    /**\n     * Test product card information rendering.\n     * \n     * Validates that all product details are correctly displayed\n     * with proper formatting and visual hierarchy.\n     */\n    it('should display complete product information', async () => {\n      render(<WorkingSwipeInterface />);\n      \n      // Wait for products to load\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Verify all product details are displayed\n      expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      expect(screen.getByText('Latest Apple smartphone with advanced features')).toBeInTheDocument();\n      expect(screen.getByText('£999 - £1,199')).toBeInTheDocument();\n      expect(screen.getByText('Apple')).toBeInTheDocument();\n      expect(screen.getByText('Electronics')).toBeInTheDocument();\n      expect(screen.getByText('★ 4.8 (1,500 reviews)')).toBeInTheDocument();\n      \n      // Verify product image\n      const productImage = screen.getByAltText('iPhone 15 Pro');\n      expect(productImage).toBeInTheDocument();\n      expect(productImage).toHaveAttribute('src', 'https://example.com/iphone15.jpg');\n    });\n\n    /**\n     * Test price formatting for different price ranges.\n     * \n     * Validates that product prices are displayed with proper\n     * formatting for single prices vs price ranges.\n     */\n    it('should format prices correctly for different scenarios', async () => {\n      // Mock products with different price structures\n      const priceTestProducts = [\n        {\n          ...mockProducts[0],\n          price_min: 99,\n          price_max: 99, // Same price\n        },\n        {\n          ...mockProducts[1],\n          price_min: null,\n          price_max: 150, // Max price only\n        },\n        {\n          ...mockProducts[2],\n          price_min: 200,\n          price_max: null, // Min price only\n        },\n      ];\n      \n      (api.getProducts as jest.Mock).mockResolvedValue(priceTestProducts);\n      \n      render(<WorkingSwipeInterface />);\n      \n      // Wait for first product (single price)\n      await waitFor(() => {\n        expect(screen.getByText('£99')).toBeInTheDocument();\n      });\n      \n      // Test navigation to other products to verify price formatting\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      await userEvent.click(rightButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('£150')).toBeInTheDocument(); // Max only\n      });\n      \n      await userEvent.click(rightButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('From £200')).toBeInTheDocument(); // Min only\n      });\n    });\n  });\n\n  describe('Swipe Gesture Handling', () => {\n    /**\n     * Test left swipe (dislike) functionality.\n     * \n     * Validates that left swipes are properly handled with\n     * visual feedback and API recording.\n     */\n    it('should handle left swipe (dislike) gestures', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      // Wait for products to load\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Perform left swipe using button\n      const leftButton = screen.getByRole('button', { name: /dislike/i });\n      await user.click(leftButton);\n      \n      // Verify swipe was recorded\n      await waitFor(() => {\n        expect(api.recordSwipe).toHaveBeenCalledWith({\n          product_id: 'product-1',\n          direction: 'left',\n          session_id: expect.any(String),\n          time_spent_seconds: expect.any(Number),\n          preference_strength: expect.any(Number),\n          interaction_context: expect.any(Object),\n        });\n      });\n      \n      // Verify progress to next product\n      expect(screen.getByText('Nike Air Max 90')).toBeInTheDocument();\n      expect(screen.getByText('2 of 3')).toBeInTheDocument();\n    });\n\n    /**\n     * Test right swipe (like) functionality.\n     * \n     * Validates that right swipes are properly handled with\n     * positive preference signals and smooth transitions.\n     */\n    it('should handle right swipe (like) gestures', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      // Wait for products to load\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Perform right swipe using button\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      await user.click(rightButton);\n      \n      // Verify swipe was recorded with higher preference strength\n      await waitFor(() => {\n        expect(api.recordSwipe).toHaveBeenCalledWith({\n          product_id: 'product-1',\n          direction: 'right',\n          session_id: expect.any(String),\n          time_spent_seconds: expect.any(Number),\n          preference_strength: expect.any(Number),\n          interaction_context: expect.any(Object),\n        });\n      });\n      \n      // Verify preference strength is higher for likes\n      const recordCall = (api.recordSwipe as jest.Mock).mock.calls[0][0];\n      expect(recordCall.preference_strength).toBeGreaterThan(0.5);\n      \n      // Verify transition to next product\n      expect(screen.getByText('Nike Air Max 90')).toBeInTheDocument();\n    });\n\n    /**\n     * Test super like (up swipe) functionality.\n     * \n     * Validates that super likes generate strongest preference\n     * signals and provide appropriate visual feedback.\n     */\n    it('should handle super like gestures', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      // Wait for products to load\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Perform super like (double-tap or special button)\n      const superLikeButton = screen.getByRole('button', { name: /super like/i });\n      await user.click(superLikeButton);\n      \n      // Verify super like was recorded\n      await waitFor(() => {\n        expect(api.recordSwipe).toHaveBeenCalledWith({\n          product_id: 'product-1',\n          direction: 'up',\n          session_id: expect.any(String),\n          time_spent_seconds: expect.any(Number),\n          preference_strength: expect.any(Number),\n          interaction_context: expect.any(Object),\n        });\n      });\n      \n      // Verify highest preference strength for super likes\n      const recordCall = (api.recordSwipe as jest.Mock).mock.calls[0][0];\n      expect(recordCall.preference_strength).toBeGreaterThan(0.8);\n      \n      // Verify visual feedback for super like\n      expect(screen.getByText('Super Liked!')).toBeInTheDocument();\n    });\n\n    /**\n     * Test swipe context data recording.\n     * \n     * Validates that rich context information is captured\n     * with each swipe for ML algorithm training.\n     */\n    it('should record rich context data with swipes', async () => {\n      const user = userEvent.setup();\n      \n      // Mock viewport size\n      Object.defineProperty(window, 'innerWidth', { value: 1920 });\n      Object.defineProperty(window, 'innerHeight', { value: 1080 });\n      \n      render(<WorkingSwipeInterface />);\n      \n      // Wait for products to load\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Perform swipe\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      await user.click(rightButton);\n      \n      // Verify context data was recorded\n      await waitFor(() => {\n        const recordCall = (api.recordSwipe as jest.Mock).mock.calls[0][0];\n        expect(recordCall.interaction_context).toEqual({\n          viewport_size: { width: 1920, height: 1080 },\n          session_position: 1,\n          device_type: 'desktop',\n          interaction_method: 'button',\n        });\n      });\n    });\n  });\n\n  describe('Session Management', () => {\n    /**\n     * Test session progress tracking.\n     * \n     * Validates that session progress is accurately tracked\n     * and displayed throughout the swiping experience.\n     */\n    it('should track session progress accurately', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      // Wait for initial load\n      await waitFor(() => {\n        expect(screen.getByText('1 of 3')).toBeInTheDocument();\n      });\n      \n      // First swipe\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      await user.click(rightButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('2 of 3')).toBeInTheDocument();\n      });\n      \n      // Second swipe\n      await user.click(rightButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('3 of 3')).toBeInTheDocument();\n      });\n      \n      // Final swipe should complete session\n      await user.click(rightButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Session Complete!')).toBeInTheDocument();\n        expect(screen.getByText('Great job! You\\'ve completed your swipe session.')).toBeInTheDocument();\n      });\n    });\n\n    /**\n     * Test session completion handling.\n     * \n     * Validates that session completion is properly handled\n     * with appropriate messaging and next steps.\n     */\n    it('should handle session completion with summary', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      // Complete all swipes\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Swipe through all products\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      const leftButton = screen.getByRole('button', { name: /dislike/i });\n      \n      await user.click(rightButton); // Like iPhone\n      await user.click(leftButton);  // Dislike Nike\n      await user.click(rightButton); // Like Sony\n      \n      // Verify session completion\n      await waitFor(() => {\n        expect(screen.getByText('Session Complete!')).toBeInTheDocument();\n        expect(screen.getByText('Products Viewed: 3')).toBeInTheDocument();\n        expect(screen.getByText('Products Liked: 2')).toBeInTheDocument();\n        expect(screen.getByText('Products Disliked: 1')).toBeInTheDocument();\n      });\n      \n      // Verify restart option\n      const restartButton = screen.getByRole('button', { name: /start new session/i });\n      expect(restartButton).toBeInTheDocument();\n    });\n\n    /**\n     * Test session restart functionality.\n     * \n     * Validates that users can restart swiping sessions\n     * with fresh product sets and reset progress.\n     */\n    it('should allow session restart', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      // Complete session quickly\n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      const rightButton = screen.getByRole('button', { name: /like/i });\n      await user.click(rightButton);\n      await user.click(rightButton);\n      await user.click(rightButton);\n      \n      // Wait for completion\n      await waitFor(() => {\n        expect(screen.getByText('Session Complete!')).toBeInTheDocument();\n      });\n      \n      // Mock new products for restart\n      const newProducts = [\n        { ...mockProducts[0], id: 'product-4', title: 'New Product 1' },\n        { ...mockProducts[1], id: 'product-5', title: 'New Product 2' },\n        { ...mockProducts[2], id: 'product-6', title: 'New Product 3' },\n      ];\n      (api.getProducts as jest.Mock).mockResolvedValueOnce(newProducts);\n      \n      // Click restart button\n      const restartButton = screen.getByRole('button', { name: /start new session/i });\n      await user.click(restartButton);\n      \n      // Verify new session started\n      await waitFor(() => {\n        expect(screen.getByText('New Product 1')).toBeInTheDocument();\n        expect(screen.getByText('1 of 3')).toBeInTheDocument();\n      });\n      \n      // Verify products were refetched\n      expect(api.getProducts).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    /**\n     * Test swipe recording error handling.\n     * \n     * Validates that swipe recording errors don't break\n     * the user experience and provide appropriate feedback.\n     */\n    it('should handle swipe recording errors gracefully', async () => {\n      const user = userEvent.setup();\n      \n      // Mock swipe recording error\n      (api.recordSwipe as jest.Mock).mockRejectedValue(\n        new Error('Network error')\n      );\n      \n      render(<WorkingSwipeInterface />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Perform swipe that will fail\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      await user.click(rightButton);\n      \n      // Verify error is handled (should still progress)\n      await waitFor(() => {\n        expect(screen.getByText('Nike Air Max 90')).toBeInTheDocument();\n      });\n      \n      // Verify error was logged but didn't break flow\n      expect(api.recordSwipe).toHaveBeenCalled();\n    });\n\n    /**\n     * Test empty product list handling.\n     * \n     * Validates that empty product responses are handled\n     * with appropriate messaging and recovery options.\n     */\n    it('should handle empty product list gracefully', async () => {\n      // Mock empty products response\n      (api.getProducts as jest.Mock).mockResolvedValue([]);\n      \n      render(<WorkingSwipeInterface />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('No products available')).toBeInTheDocument();\n        expect(screen.getByText('Check back later for new products')).toBeInTheDocument();\n      });\n      \n      // Verify refresh option\n      const refreshButton = screen.getByRole('button', { name: /refresh/i });\n      expect(refreshButton).toBeInTheDocument();\n    });\n\n    /**\n     * Test unauthenticated user handling.\n     * \n     * Validates that unauthenticated users receive appropriate\n     * messaging and are guided to authentication.\n     */\n    it('should handle unauthenticated users', () => {\n      // Mock unauthenticated state\n      (useAuth as jest.Mock).mockReturnValue({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n      \n      render(<WorkingSwipeInterface />);\n      \n      // Verify authentication prompt\n      expect(screen.getByText('Please sign in to start swiping')).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance and Accessibility', () => {\n    /**\n     * Test keyboard navigation support.\n     * \n     * Validates that the swipe interface is accessible\n     * via keyboard navigation for all users.\n     */\n    it('should support keyboard navigation', async () => {\n      const user = userEvent.setup();\n      render(<WorkingSwipeInterface />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Test keyboard swipe controls\n      const rightButton = screen.getByRole('button', { name: /like/i });\n      rightButton.focus();\n      \n      await user.keyboard('{Enter}');\n      \n      // Verify swipe was triggered\n      await waitFor(() => {\n        expect(api.recordSwipe).toHaveBeenCalled();\n        expect(screen.getByText('Nike Air Max 90')).toBeInTheDocument();\n      });\n    });\n\n    /**\n     * Test screen reader compatibility.\n     * \n     * Validates that all interactive elements have proper\n     * ARIA labels and semantic markup for screen readers.\n     */\n    it('should have proper accessibility attributes', async () => {\n      render(<WorkingSwipeInterface />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('iPhone 15 Pro')).toBeInTheDocument();\n      });\n      \n      // Verify ARIA labels\n      expect(screen.getByRole('button', { name: /dislike/i })).toHaveAttribute('aria-label', 'Dislike this product');\n      expect(screen.getByRole('button', { name: /like/i })).toHaveAttribute('aria-label', 'Like this product');\n      expect(screen.getByRole('button', { name: /super like/i })).toHaveAttribute('aria-label', 'Super like this product');\n      \n      // Verify progress indicator is accessible\n      expect(screen.getByRole('progressbar')).toHaveAttribute('aria-valuenow', '1');\n      expect(screen.getByRole('progressbar')).toHaveAttribute('aria-valuemax', '3');\n    });\n  });\n});"],"names":["jest","mock","useAuth","fn","recordSwipe","getProducts","motion","div","children","props","AnimatePresence","mockProducts","id","title","description","price_min","price_max","currency","brand","image_url","affiliate_url","rating","review_count","categories","name","slug","mockUser","email","firstName","lastName","subscriptionTier","describe","beforeEach","clearAllMocks","mockReturnValue","user","isAuthenticated","isLoading","error","api","mockResolvedValue","interaction_id","recorded_at","Date","toISOString","it","render","WorkingSwipeInterface","expect","screen","getByText","toBeInTheDocument","getByRole","waitFor","queryByText","not","toHaveBeenCalledTimes","mockRejectedValue","Error","retryButton","mockResolvedValueOnce","userEvent","click","productImage","getByAltText","toHaveAttribute","priceTestProducts","rightButton","setup","leftButton","toHaveBeenCalledWith","product_id","direction","session_id","any","String","time_spent_seconds","Number","preference_strength","interaction_context","Object","recordCall","calls","toBeGreaterThan","superLikeButton","defineProperty","window","value","toEqual","viewport_size","width","height","session_position","device_type","interaction_method","restartButton","newProducts","toHaveBeenCalled","refreshButton","focus","keyboard"],"mappings":"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"}