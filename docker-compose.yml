# =============================================================================
# GiftSync Development Docker Compose Configuration
# =============================================================================
# 
# Complete development environment setup for the GiftSync AI-powered gift
# recommendation platform. Provides all necessary services including database,
# caching, object storage, ML training, and monitoring infrastructure.
# 
# Key Features:
#   - Full-stack development environment
#   - Service dependency management with health checks
#   - Data persistence across container restarts
#   - Development and production service profiles
#   - Monitoring and observability stack
#   - Machine learning training pipeline
# 
# Service Architecture:
#   - PostgreSQL: Primary database with persistent storage
#   - Redis: Caching and session management
#   - MinIO: S3-compatible object storage for files and ML models
#   - FastAPI Backend: Python API server with auto-reload
#   - ML Training: Dedicated container for recommendation models
#   - Nginx: Reverse proxy and load balancer (production)
#   - Prometheus: Metrics collection (monitoring profile)
#   - Grafana: Metrics visualization (monitoring profile)
# 
# Usage:
#   Development:     docker-compose up
#   With ML:         docker-compose --profile ml up
#   Production:      docker-compose --profile production up
#   Monitoring:      docker-compose --profile monitoring up
#   Everything:      docker-compose --profile ml --profile monitoring up
# 
# Profiles:
#   - default: Core development services (postgres, redis, minio, backend)
#   - ml: Adds machine learning training service
#   - production: Adds nginx reverse proxy
#   - monitoring: Adds prometheus and grafana
# 
# =============================================================================

version: '3.8'

# =============================================================================
# SERVICES CONFIGURATION
# =============================================================================

services:
  # ===========================================================================
  # DATABASE SERVICE
  # ===========================================================================
  # PostgreSQL 15 database for user data, product catalog, and analytics
  
  postgres:
    image: postgres:15                       # Latest stable PostgreSQL version
    container_name: giftsync_postgres
    environment:
      POSTGRES_USER: giftsync               # Database username
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-giftsync_dev_password}  # Database password (change in production)
      POSTGRES_DB: giftsync_dev             # Default database name
    ports:
      - "5433:5432"                         # Map to 5433 to avoid conflicts with local postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent data storage
      - ./database/init:/docker-entrypoint-initdb.d  # Initialization scripts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U giftsync"]  # Health check command
      interval: 30s                         # Check every 30 seconds
      timeout: 10s                          # Timeout after 10 seconds
      retries: 3                            # Retry 3 times before marking unhealthy

  # ===========================================================================
  # CACHING SERVICE
  # ===========================================================================
  # Redis for session storage, API caching, and real-time data
  
  redis:
    image: redis:7-alpine                    # Alpine Linux version for smaller size
    container_name: giftsync_redis
    ports:
      - "6379:6379"                         # Standard Redis port
    volumes:
      - redis_data:/data                    # Persistent cache storage
    command: redis-server --appendonly yes  # Enable data persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]    # Simple ping health check
      interval: 30s                         # Check every 30 seconds
      timeout: 10s                          # Timeout after 10 seconds
      retries: 3                            # Retry 3 times before marking unhealthy

  minio:
    image: minio/minio:latest
    container_name: giftsync_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=giftsync
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-giftsync_dev_password}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: giftsync_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-giftsync}:${POSTGRES_PASSWORD:-giftsync_dev_password}@postgres:5432/${POSTGRES_DB:-giftsync_dev}
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=giftsync
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-giftsync_dev_password}
      - SECRET_KEY=your-secret-key-change-in-production
      - ENVIRONMENT=development
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-}
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main_api:app --host 0.0.0.0 --port 8000 --reload

  ml_training:
    build:
      context: ./ml
      dockerfile: Dockerfile.dev
    container_name: giftsync_ml_training
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-giftsync}:${POSTGRES_PASSWORD:-giftsync_dev_password}@postgres:5432/${POSTGRES_DB:-giftsync_dev}
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=giftsync
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-giftsync_dev_password}
    volumes:
      - ./ml:/app
      - ml_models:/app/models
      - ml_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - ml

  nginx:
    image: nginx:alpine
    container_name: giftsync_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    profiles:
      - production

  prometheus:
    image: prom/prometheus:latest
    container_name: giftsync_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: giftsync_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    profiles:
      - monitoring

# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================
# Named volumes for data persistence across container restarts

volumes:
  postgres_data:                            # PostgreSQL database files
  redis_data:                               # Redis cache and persistent data
  minio_data:                               # MinIO object storage files
  backend_cache:                            # Backend application cache
  ml_models:                                # Trained ML models and artifacts
  ml_data:                                  # ML training datasets and features
  prometheus_data:                          # Prometheus metrics and time series data
  grafana_data:                             # Grafana dashboards and configuration

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
# Custom network for service-to-service communication

networks:
  default:
    name: giftsync_network                  # Named network for easier management