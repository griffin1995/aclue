TITLE: Example Response for Listing API Keys
DESCRIPTION: This JSON snippet illustrates the typical successful response structure when listing API keys. It includes an array of API key objects, each containing an ID, name, and creation timestamp.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: json
CODE:
```
{
  "data": [
    {
      "id": "91f3200a-df72-4654-b0cd-f202395f5354",
      "name": "Production",
      "created_at": "2023-04-08T00:11:13.110779+00:00"
    }
  ]
}
```

----------------------------------------

TITLE: Send Email using Resend API (Node.js)
DESCRIPTION: Demonstrates how to send an email using the Resend Node.js SDK. This example initializes the Resend client with an API key and sends a basic HTML email to a specified recipient.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  html: '<p>it works!</p>',
});
```

----------------------------------------

TITLE: Resend API Authentication Header
DESCRIPTION: Example of the Authorization header required for authenticating requests to the Resend API. Authentication is performed using a Bearer token, where 're_xxxxxxxxx' represents your unique API Key.
SOURCE: https://resend.com/docs/api-reference/introduction

LANGUAGE: HTTP
CODE:
```
Authorization: Bearer re_xxxxxxxxx
```

----------------------------------------

TITLE: Resend API Key Endpoints
DESCRIPTION: API documentation for managing API keys in Resend, including creation, listing, and deletion of API keys.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
API Key Endpoints:

POST /api-keys/create-api-key
  - Description: Creates a new API key.

GET /api-keys/list-api-keys
  - Description: Lists all API keys.

DEL /api-keys/delete-api-key
  - Description: Deletes an API key.
```

----------------------------------------

TITLE: List API Keys API Endpoint
DESCRIPTION: Defines the HTTP GET endpoint for retrieving a list of API keys associated with the authenticated user. This endpoint allows users to programmatically access their API key inventory.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: APIDOC
CODE:
```
GET /api-keys

Description: Retrieve a list of API keys for the authenticated user.

Response (200 OK):
  Content-Type: application/json
  Body:
    {
      "data": [
        {
          "id": "string (UUID)",
          "name": "string",
          "created_at": "string (ISO 8601 datetime)"
        }
      ]
    }

Related API Key Endpoints:
  - POST /api-keys: Create a new API key.
  - DEL /api-keys/{id}: Delete an existing API key by ID.
```

----------------------------------------

TITLE: Resend API Key Management
DESCRIPTION: This section provides the API documentation for managing API keys within the Resend platform. It includes details for creating, listing, and deleting API keys, specifying the HTTP methods, endpoints, request parameters, and expected response structures for each operation.
SOURCE: https://resend.com/docs/api-reference/api-keys/create-api-key

LANGUAGE: APIDOC
CODE:
```
POST /api-keys
  Description: Add a new API key to authenticate communications with Resend.
  Body Parameters:
    - name: string (required)
      Description: The API key name.
    - permission: full_access | sending_access (optional)
      Description: Defines the access level for the API key.
        - full_access: Can create, delete, get, and update any resource.
        - sending_access: Can only send emails.
    - domain_id: string (optional)
      Description: Restricts the API key to send emails only from a specific domain. Only applicable when 'permission' is set to 'sending_access'.
  Response (Success 200 OK):
    {
      "id": "string",
      "token": "string"
    }

GET /api-keys
  Description: Retrieve a list of all API keys associated with the account.

DEL /api-keys/{id}
  Description: Delete an existing API key by its ID.
```

----------------------------------------

TITLE: Resend API Keys Management Endpoints
DESCRIPTION: API reference for managing authentication API keys for the Resend service. This includes functionalities to create new API keys, list existing keys, and securely delete API keys.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
POST /api-keys
  - Create API key: Generates a new API key for authentication.

GET /api-keys
  - List API keys: Retrieves a list of all API keys associated with the account.

DEL /api-keys/{id}
  - Delete API key: Revokes and removes an API key by its ID.
```

----------------------------------------

TITLE: Example Response for Resend API Key Creation
DESCRIPTION: This JSON object represents the typical successful response received after creating a new API key via the Resend API. It includes the unique identifier (`id`) for the newly created key and the key's token (`token`) itself, which is used for authentication.
SOURCE: https://resend.com/docs/api-reference/api-keys/create-api-key

LANGUAGE: JSON
CODE:
```
{
  "id": "dacf4072-4119-4d88-932f-6202748ac7c8",
  "token": "re_c1tpEyD8_NKFusih9vKVQknRAQfmFcWCv"
}
```

----------------------------------------

TITLE: Resend API: Update Contact Response Example
DESCRIPTION: Provides an example of the JSON response received after successfully updating a contact using the Resend API. The response includes the object type and the unique ID of the updated contact.
SOURCE: https://resend.com/docs/api-reference/contacts/update-contact

LANGUAGE: JSON
CODE:
```
{
  "object": "contact",
  "id": "479e3145-dd38-476b-932c-529ceb705947"
}
```

----------------------------------------

TITLE: Manage Resend API Keys: Create, Permissions, View, Edit, Delete, and Logs
DESCRIPTION: This comprehensive API documentation details the lifecycle and management of API Keys within the Resend platform. It covers the steps to create new keys, define their access permissions (full or sending), view existing keys and their usage, modify key details, securely delete inactive keys, and access logs for monitoring API key activity.
SOURCE: https://resend.com/docs/dashboard/api-keys/introduction

LANGUAGE: APIDOC
CODE:
```
Resend API Key Management:

1. What is an API Key:
   - Definition: Secret tokens used to authenticate requests to the Resend API.
   - Security: Unique to your account and must be kept confidential.

2. Add API Key:
   - Action: Create a new API Key via the API Key Dashboard (https://resend.com/api-keys).
   - Steps:
     a. Click 'Create API Key'.
     b. Provide a name for the API Key.
     c. Select permission: 'Full access' or 'Sending access'.
     d. If 'Sending access' is chosen, optionally restrict access to a specific domain.
   - Note: For security, the API Key value is only viewable once upon creation.

3. Set API Key Permissions:
   - Full access:
     - Grants: Ability to create, delete, get, and update any resource.
   - Sending access:
     - Grants: Only permission to send emails.
   - Benefit: Allows isolation of application actions to different API Keys, enabling per-key logging, abuse detection, and damage control.

4. View All API Keys:
   - Location: API Dashboard (https://resend.com/api-keys).
   - Details: Shows all created API Keys, their details, and 'last time used' information.
   - Indicators: Color indicators quickly show active vs. inactive keys.

5. Edit API Key Details:
   - Action: Modify existing API Key properties.
   - Editable fields: Name, Permission, Domain.
   - Process: Click 'More options' -> 'Edit API Key'.
   - Limitation: The API Key value itself cannot be edited after creation.

6. Delete Inactive API Keys:
   - Recommendation: Delete keys not used in the last 30 days for security.
   - Process: Click 'More options' -> 'Remove API Key'.

7. View API Key Logs:
   - Overview: When viewing an active API Key, the total number of requests made to that key is displayed.
   - Detailed Logs: Select the underlined number of requests to view comprehensive logs for that specific API Key.
```

----------------------------------------

TITLE: Resend API Error Codes and Troubleshooting
DESCRIPTION: This documentation outlines the various error codes returned by the Resend API, providing details on their HTTP status, the error message, and actionable steps to resolve the issue. It covers common errors related to idempotency keys, validation, API key authentication, and resource not found.
SOURCE: https://resend.com/docs/api-reference/errors

LANGUAGE: APIDOC
CODE:
```
Resend API Error Codes:

invalid_idempotency_key
  - Status: 400
  - Message: The key must be between 1-256 chars.
  - Suggested action: Retry with a valid idempotency key.

validation_error (General)
  - Status: 400
  - Message: We found an error with one or more fields in the request.
  - Suggested action: The message will contain more details about what field and error were found.

missing_api_key
  - Status: 401
  - Message: Missing API key in the authorization header.
  - Suggested action: Include the following header in the request: Authorization: Bearer YOUR_API_KEY.

restricted_api_key
  - Status: 401
  - Message: This API key is restricted to only send emails.
  - Suggested action: Make sure the API key has Full access to perform actions other than sending emails.

invalid_api_key
  - Status: 403
  - Message: API key is invalid.
  - Suggested action: Make sure the API key is correct or generate a new API key in the dashboard (https://resend.com/api-keys).

validation_error (Testing Email Restriction)
  - Status: 403
  - Message: You can only send testing emails to your own email address (youremail@domain.com).
  - Suggested action: In Resend’s Domain page (https://resend.com/domains), add and verify a domain for which you have DNS access. This allows you to send emails to addresses beyond your own.

not_found
  - Status: 404
  - Message: The requested endpoint does not exist.
  - Suggested action: Change your request URL to match a valid API endpoint.
```

----------------------------------------

TITLE: List API Keys using Resend Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to initialize the Resend SDK and call the `apiKeys.list()` method to retrieve all API keys. It requires the Resend SDK to be installed and an API key for authentication.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.apiKeys.list();
```

----------------------------------------

TITLE: Resend API Keys Endpoints
DESCRIPTION: Comprehensive API documentation for managing API keys within the Resend platform. This includes operations for creating new API keys, listing existing keys, and deleting API keys.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /api-keys/create-api-key
  - Description: Creates a new API key for authentication.
  - Parameters: (Not detailed in source, typically 'name', 'permission_level')
  - Returns: (Not detailed in source, includes the new API key)

GET /api-keys/list-api-keys
  - Description: Lists all API keys associated with the account.
  - Parameters: (Not detailed in source, typically pagination parameters)
  - Returns: (Not detailed in source, an array of API key objects)

DEL /api-keys/delete-api-key
  - Description: Deletes an API key.
  - Parameters: (Not detailed in source, typically 'api_key_id')
  - Returns: (Not detailed in source)
```

----------------------------------------

TITLE: Resend Contact API Endpoints
DESCRIPTION: API documentation for managing contacts in Resend, covering creation, retrieval, updating, deletion, and listing of contacts.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Contact API Endpoints:

POST /contacts/create-contact
  - Description: Creates a new contact.

GET /contacts/get-contact
  - Description: Retrieves details for a specific contact.

PATCH /contacts/update-contact
  - Description: Updates an existing contact.

DEL /contacts/delete-contact
  - Description: Deletes a contact.

GET /contacts/list-contacts
  - Description: Lists all contacts.
```

----------------------------------------

TITLE: Resend API Endpoints Overview
DESCRIPTION: This section outlines the various API endpoints available within the Resend platform, categorized by functionality. It provides a high-level overview of operations for managing emails, domains, API keys, broadcasts, audiences, and contacts.
SOURCE: https://resend.com/docs/api-reference/broadcasts/send-broadcast

LANGUAGE: APIDOC
CODE:
```
Resend API Endpoints:

Email API:
  - POST /emails: Send Email
  - POST /emails/batch: Send Batch Emails
  - GET /emails/:id: Retrieve Email
  - PATCH /emails/:id: Update Email
  - POST /emails/:id/cancel: Cancel Email

Domains API:
  - POST /domains: Create Domain
  - GET /domains/:id: Retrieve Domain
  - POST /domains/:id/verify: Verify Domain
  - PATCH /domains/:id: Update Domain
  - GET /domains: List Domains
  - DELETE /domains/:id: Delete Domain

API Keys API:
  - POST /api-keys: Create API key
  - GET /api-keys: List API keys
  - DELETE /api-keys/:id: Delete API key

Broadcasts API:
  - POST /broadcasts: Create Broadcast
  - GET /broadcasts/:id: Retrieve Broadcast
  - PATCH /broadcasts/:id: Update Broadcast
  - POST /broadcasts/:id/send: Send Broadcast
  - DELETE /broadcasts/:id: Delete Broadcast
  - GET /broadcasts: List Broadcasts

Audiences API:
  - POST /audiences: Create Audience
  - GET /audiences/:id: Retrieve Audience
  - DELETE /audiences/:id: Delete Audience
  - GET /audiences: List Audiences

Contacts API:
  - POST /contacts: Create Contact
  - GET /contacts/:id: Retrieve Contact
  - PATCH /contacts/:id: Update Contact
  - DELETE /contacts/:id: Delete Contact
  - GET /contacts: List Contacts
```

----------------------------------------

TITLE: Resend Contact API Endpoints
DESCRIPTION: Comprehensive API documentation for managing contacts within the Resend platform. This includes methods for creating, retrieving, updating, deleting, and listing contacts.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: APIDOC
CODE:
```
POST /contacts: Create Contact
  - Description: Creates a new contact.
GET /contacts/{id}: Retrieve Contact
  - Description: Retrieves details of a specific contact by its ID.
PATCH /contacts/{id}: Update Contact
  - Description: Updates details of an existing contact.
DEL /contacts/{id}: Delete Contact
  - Description: Deletes a contact by its ID.
GET /contacts: List Contacts
  - Description: Retrieves a list of all contacts associated with the account.
```

----------------------------------------

TITLE: Send HTML Email with Express and Resend
DESCRIPTION: This Express.js server example demonstrates how to initialize the Resend SDK with an API key and send an HTML email. It sets up a GET endpoint ('/') that, when accessed, sends a 'hello world' email from a specified sender to a recipient, handling success and error responses.
SOURCE: https://resend.com/docs/send-with-express

LANGUAGE: TypeScript
CODE:
```
import express, { Request, Response } from "express";
import { Resend } from "resend";

const app = express();
const resend = new Resend("re_xxxxxxxxx");

app.get("/", async (req: Request, res: Response) => {
  const { data, error } = await resend.emails.send({
    from: "Acme <onboarding@resend.dev>",
    to: ["delivered@resend.dev"],
    subject: "hello world",
    html: "<strong>it works!</strong>",
  });

  if (error) {
    return res.status(400).json({ error });
  }

  res.status(200).json({ data });
});

app.listen(3000, () => {
  console.log("Listening on http://localhost:3000");
});
```

----------------------------------------

TITLE: Resend Broadcasts API - Get Broadcast Details
DESCRIPTION: Documents the API endpoint for retrieving a specific broadcast's details. It specifies the required path parameter and provides a comprehensive example of the expected JSON response structure.
SOURCE: https://resend.com/docs/api-reference/broadcasts/get-broadcast

LANGUAGE: APIDOC
CODE:
```
GET /broadcasts/{broadcast_id}

Path Parameters:
  broadcast_id (string, required):
    The unique identifier for the broadcast to retrieve.
    See all available status types in the Broadcasts overview.

Example Response (JSON):
{
  "object": "broadcast",
  "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
  "name": "Announcements",
  "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  "from": "Acme <onboarding@resend.dev>",
  "subject": "hello world",
  "reply_to": null,
  "preview_text": "Check out our latest announcements",
  "status": "draft",
  "created_at": "2024-12-01T19:32:22.980Z",
  "scheduled_at": null,
  "sent_at": null
}
```

----------------------------------------

TITLE: Resend Broadcast API Endpoints
DESCRIPTION: API documentation for managing broadcasts in Resend, covering creation, retrieval, updating, sending, deletion, and listing of broadcasts.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Broadcast API Endpoints:

POST /broadcasts/create-broadcast
  - Description: Creates a new broadcast.

GET /broadcasts/get-broadcast
  - Description: Retrieves details for a specific broadcast.

PATCH /broadcasts/update-broadcast
  - Description: Updates an existing broadcast.

POST /broadcasts/send-broadcast
  - Description: Sends a broadcast.

DEL /broadcasts/delete-broadcast
  - Description: Deletes a broadcast.

GET /broadcasts/list-broadcasts
  - Description: Lists all broadcasts.
```

----------------------------------------

TITLE: Create Resend API Key with Node.js
DESCRIPTION: This snippet demonstrates how to create a new API key using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the `apiKeys.create` method, specifying the desired name for the new key.
SOURCE: https://resend.com/docs/api-reference/api-keys/create-api-key

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.apiKeys.create({ name: 'Production' });
```

----------------------------------------

TITLE: Resend API Base URL
DESCRIPTION: The foundational URL for all interactions with the Resend API. All requests must use HTTPS for security.
SOURCE: https://resend.com/docs/api-reference/introduction

LANGUAGE: HTTP
CODE:
```
https://api.resend.com
```

----------------------------------------

TITLE: Example .env file content for Resend API key
DESCRIPTION: This snippet shows the typical content of a `.env` file used to store the Resend API key. The `dotenvy` crate can then load this variable into the application's environment.
SOURCE: https://resend.com/docs/send-with-rust

LANGUAGE: Plaintext
CODE:
```
# .env
RESEND_API_KEY=re_xxxxxxxxx
```

----------------------------------------

TITLE: Resend API: Create Domain Request and Response
DESCRIPTION: Documents the API request parameters for creating a new domain, including 'name', 'region', and 'custom_return_path'. It also provides a detailed example of the successful JSON response, outlining the domain's ID, name, creation timestamp, status, and associated DNS records (SPF, DKIM).
SOURCE: https://resend.com/docs/api-reference/domains/create-domain

LANGUAGE: APIDOC
CODE:
```
API Endpoint: POST /domains (implied by context)

Request Body Parameters:
  name: string
    - required
    - Description: The name of the domain you want to create.
  region: string
    - default: "us-east-1"
    - Description: The region where emails will be sent from. Possible values: 'us-east-1' | 'eu-west-1' | 'sa-east-1' | 'ap-northeast-1'
  custom_return_path: string
    - default: "send"
    - Description: For advanced use cases, choose a subdomain for the Return-Path address. The custom return path is used for SPF authentication, DMARC alignment, and handling bounced emails. Defaults to 'send' (i.e., 'send.yourdomain.tld').

Example Success Response:
{
  "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
  "name": "example.com",
  "created_at": "2023-03-28T17:12:02.059593+00:00",
  "status": "not_started",
  "records": [
    {
      "record": "SPF",
      "name": "send",
      "type": "MX",
      "ttl": "Auto",
      "status": "not_started",
      "value": "feedback-smtp.us-east-1.amazonses.com",
      "priority": 10
    },
    {
      "record": "SPF",
      "name": "send",
      "value": "\"v=spf1 include:amazonses.com ~all\"",
      "type": "TXT",
      "ttl": "Auto",
      "status": "not_started"
    },
    {
      "record": "DKIM",
      "name": "nhapbbryle57yxg3fbjytyodgbt2kyyg._domainkey",
      "value": "nhapbbryle57yxg3fbjytyodgbt2kyyg.dkim.amazonses.com.",
      "type": "CNAME",
      "status": "not_started",
      "ttl": "Auto"
    },
    {
      "record": "DKIM",
      "name": "xbakwbe5fcscrhzshpap6kbxesf6pfgn._domainkey",
      "value": "xbakwbe5fcscrhzshpap6kbxesf6pfgn.dkim.amazonses.com.",
      "type": "CNAME",
      "status": "not_started",
      "ttl": "Auto"
    },
    {
      "record": "DKIM",
      "name": "txrcreso3dqbvcve45tqyosxwaegvhgn._domainkey",
      "value": "txrcreso3dqbvcve45tqyosxwaegvhgn.dkim.amazonses.com.",
      "type": "CNAME",
      "status": "not_started",
      "ttl": "Auto"
    }
  ],
  "region": "us-east-1"
}
```

----------------------------------------

TITLE: Resend Broadcast API Endpoints
DESCRIPTION: Comprehensive API documentation for managing broadcasts within the Resend platform. This includes methods for creating, retrieving, updating, sending, deleting, and listing broadcasts.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts: Create Broadcast
  - Description: Creates a new broadcast.
GET /broadcasts/{id}: Retrieve Broadcast
  - Description: Retrieves details of a specific broadcast by its ID.
PATCH /broadcasts/{id}: Update Broadcast
  - Description: Updates details of an existing broadcast.
POST /broadcasts/{id}/send: Send Broadcast
  - Description: Initiates sending a broadcast.
DEL /broadcasts/{id}: Delete Broadcast
  - Description: Deletes a broadcast by its ID.
GET /broadcasts: List Broadcasts
  - Description: Retrieves a list of all broadcasts associated with the account.
```

----------------------------------------

TITLE: Add .env to .gitignore for Version Control Exclusion
DESCRIPTION: This example shows how to add the `.env` file to your `.gitignore` file. This prevents sensitive API keys and other environment-specific configurations from being accidentally committed to version control systems like Git, enhancing security.
SOURCE: https://resend.com/docs/knowledge-base/how-to-handle-api-keys

LANGUAGE: gitignore
CODE:
```
.env
```

----------------------------------------

TITLE: Resend Contacts API Reference
DESCRIPTION: Comprehensive API documentation for managing contacts within Resend audiences. This includes operations to create, retrieve, update, delete, and list contacts, detailing their respective HTTP methods and endpoints.
SOURCE: https://resend.com/docs/api-reference/contacts/list-contacts

LANGUAGE: APIDOC
CODE:
```
Resend Contacts API Endpoints:

GET /audiences/:audience_id/contacts
  - Description: Show all contacts from a specific audience.
  - Parameters:
    - :audience_id (path): The unique identifier of the audience from which to list contacts.
  - Returns: A JSON object containing a list of contact objects.
  - Example Response:
    {
      "object": "list",
      "data": [
        {
          "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
          "email": "steve.wozniak@gmail.com",
          "first_name": "Steve",
          "last_name": "Wozniak",
          "created_at": "2023-10-06T23:47:56.678Z",
          "unsubscribed": false
        }
      ]
    }

POST /contacts
  - Description: Create a new contact within an audience.
  - Parameters: (Refer to Resend API documentation for full body schema)
  - Returns: Details of the newly created contact.

GET /contacts/:contact_id
  - Description: Retrieve a specific contact by its ID.
  - Parameters:
    - :contact_id (path): The unique identifier of the contact to retrieve.
  - Returns: Details of the requested contact.

PATCH /contacts/:contact_id
  - Description: Update an existing contact's details.
  - Parameters:
    - :contact_id (path): The unique identifier of the contact to update.
    - Body: (Refer to Resend API documentation for full body schema)
  - Returns: Updated details of the contact.

DEL /contacts/:contact_id
  - Description: Delete a contact by its ID.
  - Parameters:
    - :contact_id (path): The unique identifier of the contact to delete.
  - Returns: Confirmation of deletion.
```

----------------------------------------

TITLE: Resend API Key Management
DESCRIPTION: Comprehensive documentation for managing API keys within the Resend platform, including operations for creation, listing, and deletion. Each operation specifies the HTTP method, endpoint, and relevant parameters.
SOURCE: https://resend.com/docs/api-reference/api-keys/delete-api-key

LANGUAGE: APIDOC
CODE:
```
API Key Management:

1. Delete API Key:
   - Method: DELETE
   - Endpoint: /api-keys/:api_key_id
   - Description: Remove an existing API key.
   - Path Parameters:
     - api_key_id (string, required): The unique identifier of the API key to be deleted.
   - Example Response: HTTP 200 OK

2. Create API Key:
   - Method: POST
   - Endpoint: /api-keys
   - Description: Create a new API key.

3. List API Keys:
   - Method: GET
   - Endpoint: /api-keys
   - Description: Retrieve a list of all existing API keys.

Resend API Overview:

- Email:
  - POST Send Email
  - POST Send Batch Emails
  - GET Retrieve Email
  - PATCH Update Email
  - POST Cancel Email

- Domains:
  - POST Create Domain
  - GET Retrieve Domain
  - POST Verify Domain
  - PATCH Update Domain
  - GET List Domains
  - DEL Delete Domain

- Broadcasts:
  - POST Create Broadcast
  - GET Retrieve Broadcast
  - PATCH Update Broadcast
  - POST Send Broadcast
  - DEL Delete Broadcast
  - GET List Broadcasts

- Audiences:
  - POST Create Audience
  - GET Retrieve Audience
  - DEL Delete Audience
  - GET List Audiences

- Contacts:
  - POST Create Contact
  - GET Retrieve Contact
  - PATCH Update Contact
  - DEL Delete Contact
  - GET List Contacts
```

----------------------------------------

TITLE: Node.js: Get Contact by ID or Email using Resend API
DESCRIPTION: Demonstrates how to retrieve contact information from the Resend API using the Node.js SDK. It shows examples for fetching a contact by their unique ID and by their email address within a specified audience. An API key is required for authentication.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

// Get by contact id
resend.contacts.get({
  id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});

// Get by contact email
resend.contacts.get({
  email: 'steve.wozniak@gmail.com',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Send HTML Email using Resend Java SDK
DESCRIPTION: Demonstrates how to initialize the Resend Java SDK with an API key, construct an email with HTML content, and send it. The example includes basic error handling for the email sending process.
SOURCE: https://resend.com/docs/send-with-java

LANGUAGE: Java
CODE:
```
import com.resend.*;

public class Main {
    public static void main(String[] args) {
        Resend resend = new Resend("re_xxxxxxxxx");

        CreateEmailOptions params = CreateEmailOptions.builder()
                .from("Acme <onboarding@resend.dev>")
                .to("delivered@resend.dev")
                .subject("it works!")
                .html("<strong>hello world</strong>")
                .build();

         try {
            CreateEmailResponse data = resend.emails().send(params);
            System.out.println(data.getId());
        } catch (ResendException e) {
            e.printStackTrace();
        }
    }
}
```

----------------------------------------

TITLE: Example JSON Response for List Domains API
DESCRIPTION: This JSON object represents a typical successful response from the 'List Domains' API endpoint. It contains an array of domain objects, each with properties like ID, name, status, creation timestamp, and region.
SOURCE: https://resend.com/docs/api-reference/domains/list-domains

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
      "name": "example.com",
      "status": "not_started",
      "created_at": "2023-04-26T20:21:26.347412+00:00",
      "region": "us-east-1"
    }
  ]
}
```

----------------------------------------

TITLE: Resend Audience API Endpoints
DESCRIPTION: Comprehensive API documentation for managing audiences within the Resend platform. This includes methods for creating, retrieving, deleting, and listing audiences.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: APIDOC
CODE:
```
POST /audiences: Create Audience
  - Description: Creates a new audience.
GET /audiences/{id}: Retrieve Audience
  - Description: Retrieves details of a specific audience by its ID.
DEL /audiences/{id}: Delete Audience
  - Description: Deletes an audience by its ID.
GET /audiences: List Audiences
  - Description: Retrieves a list of all audiences associated with the account.
```

----------------------------------------

TITLE: Resend API Keys Endpoints
DESCRIPTION: API documentation for managing API keys used to authenticate with the Resend platform, including methods for creating new keys, listing existing ones, and deleting keys.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
POST /api-keys
  - Create API key: Generates a new API key for authentication.
GET /api-keys
  - List API keys: Retrieves a list of all API keys associated with the account.
DEL /api-keys/:id
  - Delete API key: Revokes and removes an existing API key.
```

----------------------------------------

TITLE: Resend Broadcast Creation API Response
DESCRIPTION: Example JSON response received after successfully creating a broadcast using the Resend API. The response includes a unique identifier (`id`) for the newly created broadcast.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
{
  "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
}
```

----------------------------------------

TITLE: Delete Contact API Response Example
DESCRIPTION: This JSON snippet illustrates the expected successful response from the Resend API after a contact has been successfully deleted. It confirms the object type, the ID of the deleted contact, and the deletion status.
SOURCE: https://resend.com/docs/api-reference/contacts/delete-contact

LANGUAGE: JSON
CODE:
```
{
  "object": "contact",
  "contact": "520784e2-887d-4c25-b53c-4ad46ad38100",
  "deleted": true
}
```

----------------------------------------

TITLE: Resend Domain API Endpoints
DESCRIPTION: API documentation for managing domains within Resend, covering creation, retrieval, verification, updating, listing, and deletion of domains.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Domain API Endpoints:

POST /domains/create-domain
  - Description: Creates a new domain.

GET /domains/get-domain
  - Description: Retrieves details for a specific domain.

POST /domains/verify-domain
  - Description: Verifies a domain.

PATCH /domains/update-domain
  - Description: Updates an existing domain.

GET /domains/list-domains
  - Description: Lists all domains.

DEL /domains/delete-domain
  - Description: Deletes a domain.
```

----------------------------------------

TITLE: Resend Audience API Endpoints
DESCRIPTION: API documentation for managing audiences in Resend, including creation, retrieval, deletion, and listing of audiences.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Audience API Endpoints:

POST /audiences/create-audience
  - Description: Creates a new audience.

GET /audiences/get-audience
  - Description: Retrieves details for a specific audience.

DEL /audiences/delete-audience
  - Description: Deletes an audience.

GET /audiences/list-audiences
  - Description: Lists all audiences.
```

----------------------------------------

TITLE: Example API Response for Create Audience
DESCRIPTION: This JSON snippet illustrates the typical response received from the Resend API after successfully creating a new audience. It includes the object type, a unique identifier for the audience, and the name assigned to it.
SOURCE: https://resend.com/docs/api-reference/audiences/create-audience

LANGUAGE: JSON
CODE:
```
{
  "object": "audience",
  "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  "name": "Registered Users"
}
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API documentation for managing emails via Resend, including sending single and batch emails, retrieving, updating, and canceling email operations. It details the POST /emails/batch endpoint with all supported body parameters for constructing batch email requests.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Email API Endpoints:

POST /emails/send-email
  - Description: Sends a single email.

POST /emails/batch
  - Description: Triggers up to 100 batch emails at once.
  - Body Parameters:
    - from: string (required)
      - Sender email address. Format: "Your Name <sender@domain.com>".
    - to: string | string[] (required)
      - Recipient email address(es). Max 50 recipients.
    - subject: string (required)
      - Email subject.
    - bcc: string | string[] (optional)
      - Bcc recipient email address(es).
    - cc: string | string[] (optional)
      - Cc recipient email address(es).
    - reply_to: string | string[] (optional)
      - Reply-to email address(es).
    - html: string (optional)
      - The HTML version of the message.
    - text: string (optional)
      - The plain text version of the message.
    - react: React.ReactNode (optional)
      - The React component used to write the message. (Node.js SDK only).
    - headers: object (optional)
      - Custom headers to add to the email.

GET /emails/retrieve-email
  - Description: Retrieves details for a specific email.

PATCH /emails/update-email
  - Description: Updates an existing email.

POST /emails/cancel-email
  - Description: Cancels a pending email.
```

----------------------------------------

TITLE: Node.js Example: List Audiences with Resend SDK
DESCRIPTION: This Node.js code snippet demonstrates how to use the Resend SDK to programmatically list all audiences. It initializes the Resend client with an API key and then calls the `audiences.list()` method.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.audiences.list();
```

----------------------------------------

TITLE: Resend Broadcasts API Endpoints
DESCRIPTION: API reference for managing email broadcasts. This includes operations for creating, retrieving, updating, sending, deleting, and listing broadcast campaigns.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts
  - Create Broadcast: Defines a new email broadcast campaign.

GET /broadcasts/{id}
  - Retrieve Broadcast: Fetches details of a specific broadcast by its ID.

PATCH /broadcasts/{id}
  - Update Broadcast: Modifies the properties or status of an existing broadcast.

POST /broadcasts/{id}/send
  - Send Broadcast: Initiates the sending of a broadcast campaign.

DEL /broadcasts/{id}
  - Delete Broadcast: Removes a broadcast campaign.

GET /broadcasts
  - List Broadcasts: Retrieves a list of all broadcast campaigns.
```

----------------------------------------

TITLE: Resend Domain API Endpoints
DESCRIPTION: Comprehensive API documentation for managing domains within the Resend platform. This includes methods for creating, retrieving, verifying, updating, listing, and deleting domains associated with your account.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: APIDOC
CODE:
```
POST /domains: Create Domain
  - Description: Creates a new domain for sending emails.
GET /domains/{id}: Retrieve Domain
  - Description: Retrieves details of a specific domain by its ID.
POST /domains/{id}/verify: Verify Domain
  - Description: Initiates the verification process for a domain.
PATCH /domains/{id}: Update Domain
  - Description: Updates details of an existing domain.
GET /domains: List Domains
  - Description: Retrieves a list of all domains associated with the account.
DEL /domains/{id}: Delete Domain
  - Description: Deletes a domain by its ID.
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API documentation for managing emails within the Resend platform. This includes methods for sending single or batch emails, retrieving email status, updating email details, and canceling sent emails.
SOURCE: https://resend.com/docs/api-reference/api-keys/list-api-keys

LANGUAGE: APIDOC
CODE:
```
POST /emails: Send Email
  - Description: Sends a single email.
POST /emails/batch: Send Batch Emails
  - Description: Sends multiple emails in a single request.
GET /emails/{id}: Retrieve Email
  - Description: Retrieves the status and details of a specific email by its ID.
PATCH /emails/{id}: Update Email
  - Description: Updates details of an existing email.
POST /emails/{id}/cancel: Cancel Email
  - Description: Cancels a pending or scheduled email by its ID.
```

----------------------------------------

TITLE: Resend Contacts API Endpoints
DESCRIPTION: API reference for managing contacts within audiences. This includes operations for creating, retrieving, updating, deleting, and listing individual contacts associated with an audience.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
POST /contacts
  - Create Contact: Adds a new contact to an audience.

GET /contacts/{id}
  - Retrieve Contact: Fetches details of a specific contact by its ID.

PATCH /contacts/{id}
  - Update Contact: Modifies the properties of an existing contact.

DEL /contacts/{id}
  - Delete Contact: Removes a contact from an audience.

GET /contacts
  - List Contacts: Retrieves a list of all contacts within an audience.
```

----------------------------------------

TITLE: Example Response for Retrieve Broadcast API
DESCRIPTION: Illustrates the typical JSON structure returned by the Resend API when successfully retrieving a broadcast. The response includes details such as the broadcast's ID, name, associated audience, sender information, subject, preview text, and current status.
SOURCE: https://resend.com/docs/api-reference/broadcasts/get-broadcast

LANGUAGE: JSON
CODE:
```
{
  "object": "broadcast",
  "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
  "name": "Announcements",
  "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  "from": "Acme <onboarding@resend.dev>",
  "subject": "hello world",
  "reply_to": null,
  "preview_text": "Check out our latest announcements",
  "status": "draft",
  "created_at": "2024-12-01T19:32:22.980Z",
  "scheduled_at": null,
  "sent_at": null
}
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API reference for managing emails through the Resend platform. This includes operations for sending single or batch emails, retrieving details of sent emails, updating email statuses, and canceling pending email deliveries.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
POST /emails
  - Send Email: Initiates the sending of a single email.

POST /emails/batch
  - Send Batch Emails: Sends multiple emails in a single request.

GET /emails/{id}
  - Retrieve Email: Fetches the details and status of a specific email by its ID.

PATCH /emails/{id}
  - Update Email: Modifies properties or status of an existing email.

POST /emails/{id}/cancel
  - Cancel Email: Cancels a pending email delivery by its ID.
```

----------------------------------------

TITLE: Node.js: Cancel Resend Email using SDK
DESCRIPTION: Demonstrates how to cancel a scheduled email using the Resend Node.js SDK. The example initializes the Resend client with an API key and then calls the `emails.cancel` method, passing the specific email ID to be cancelled.
SOURCE: https://resend.com/docs/api-reference/emails/cancel-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.emails.cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');
```

----------------------------------------

TITLE: Send Broadcast API Endpoint Reference
DESCRIPTION: Detailed API documentation for sending a broadcast via the Resend API. This endpoint allows scheduling a broadcast that was previously created through the API. It specifies the HTTP method, path, required path parameters, and optional body parameters for scheduling.
SOURCE: https://resend.com/docs/api-reference/broadcasts/send-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts/:broadcast_id/send

Description: Start sending broadcasts to your audience through the Resend API. Broadcasts can only be sent if they were created via the API.

Path Parameters:
  - broadcast_id (string, required): The unique identifier of the broadcast to send.

Body Parameters:
  - scheduled_at (string, optional): Schedule the broadcast to be sent later. The date can be specified in natural language (e.g., 'in 1 min') or ISO 8601 format (e.g., '2024-08-05T11:52:01.858Z').

Response:
  - Success (200 OK):
    {
      "id": "string"  // The ID of the scheduled broadcast send operation.
    }
```

----------------------------------------

TITLE: Resend API Reference: API Key Endpoints
DESCRIPTION: Comprehensive documentation for Resend's API Key management, including operations for creating, listing, and deleting API keys. These endpoints allow for secure access management to the Resend platform.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
POST /api-keys
  - Description: Create a new API key.
GET /api-keys
  - Description: List all API keys associated with the account.
DEL /api-keys/{id}
  - Description: Delete an API key by its ID.
```

----------------------------------------

TITLE: Create Resend Email Sending Endpoint (Next.js/TypeScript)
DESCRIPTION: This snippet demonstrates how to create a Next.js API endpoint (`app/api/send/route.ts`) that sends an email using the Resend API. It initializes the Resend client with an API key from environment variables and defines an asynchronous GET handler to send a basic HTML email to a test address. The endpoint returns a JSON response indicating success or error.
SOURCE: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright

LANGUAGE: typescript
CODE:
```
import { Resend } from 'resend';
const resend = new Resend(process.env.RESEND_API_KEY);

export async function GET() {
  try {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello world',
      html: '<h1>Hello world</h1>',
    });

    if (error) {
      return Response.json({ error }, { status: 500 });
    }

    return Response.json({ data });
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}
```

----------------------------------------

TITLE: Create Contact in Node.js with Resend SDK
DESCRIPTION: This Node.js example demonstrates how to create a new contact using the Resend SDK. It initializes the Resend client with an API key and then calls the `contacts.create` method, passing the contact's email, name, unsubscribed status, and the target audience ID.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.contacts.create({
  email: 'steve.wozniak@gmail.com',
  firstName: 'Steve',
  lastName: 'Wozniak',
  unsubscribed: false,
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Resend Domains API: Create Domain with Custom Return Path
DESCRIPTION: This section details how to create a new domain using the Resend API, specifically demonstrating the `custom_return_path` parameter. This parameter allows users to specify a custom subdomain for the Return-Path address, enhancing email credibility. The example shows how to use the `resend.domains.create` method in Node.js.
SOURCE: https://resend.com/docs/dashboard/domains/introduction

LANGUAGE: APIDOC
CODE:
```
API Endpoint: POST /domains
Description: Creates a new domain for sending emails.

Parameters:
  name: string (required)
    The domain name to add (e.g., 'example.com').
  customReturnPath: string (optional)
    A custom subdomain to use for the Return-Path address (e.g., 'outbound').
    Rules:
      - Must be 63 characters or less.
      - Must start with a letter, end with a letter or number.
      - Must contain only letters, numbers, and hyphens.
    Avoid values that could undermine credibility (e.g., 'testing').

Returns:
  A JSON object representing the created domain, including its ID and status.

Usage Example (Conceptual):
  resend.domains.create({
    name: 'yourdomain.com',
    customReturnPath: 'outbound'
  });
```

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.create({ name: 'example.com', customReturnPath: 'outbound' });
```

----------------------------------------

TITLE: Send Email with HTML Content using Resend Go SDK
DESCRIPTION: This Go code example illustrates how to send an email using the Resend Go SDK. It demonstrates initializing the Resend client with an API key, constructing an email request with 'From', 'To', 'Html' content, and 'Subject', and then sending the email. It also includes handling potential errors and printing the sent email's ID.
SOURCE: https://resend.com/docs/send-with-go

LANGUAGE: Go
CODE:
```
package main

import "github.com/resend/resend-go/v2"

func main() {
    apiKey := "re_xxxxxxxxx"

    client := resend.NewClient(apiKey)

    params := &resend.SendEmailRequest{
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"delivered@resend.dev"},
        Html:    "<strong>hello world</strong>",
        Subject: "Hello from Golang",
        Cc:      []string{"cc@example.com"},
        Bcc:     []string{"bcc@example.com"},
        ReplyTo: "replyto@example.com"
    }

    sent, err := client.Emails.Send(params)
    if err != nil {
        fmt.Println(err.Error())
        return
    }
    fmt.Println(sent.Id)
}
```

----------------------------------------

TITLE: Resend API Endpoints Overview
DESCRIPTION: A comprehensive overview of the various API endpoints available in the Resend platform, categorized by functionality. This includes operations for managing emails, domains, API keys, broadcasts, audiences, and contacts, providing a full suite of tools for programmatic interaction with Resend services.
SOURCE: https://resend.com/docs/api-reference/broadcasts/get-broadcast

LANGUAGE: APIDOC
CODE:
```
API Reference:
  - Introduction
  - Errors
  - Rate Limit

Email Endpoints:
  - POST /emails: Send Email
  - POST /emails/batch: Send Batch Emails
  - GET /emails/:email_id: Retrieve Email
  - PATCH /emails/:email_id: Update Email
  - POST /emails/:email_id/cancel: Cancel Email

Domain Endpoints:
  - POST /domains: Create Domain
  - GET /domains/:domain_id: Retrieve Domain
  - POST /domains/:domain_id/verify: Verify Domain
  - PATCH /domains/:domain_id: Update Domain
  - GET /domains: List Domains
  - DEL /domains/:domain_id: Delete Domain

API Key Endpoints:
  - POST /api-keys: Create API key
  - GET /api-keys: List API keys
  - DEL /api-keys/:api_key_id: Delete API key

Broadcast Endpoints:
  - POST /broadcasts: Create Broadcast
  - GET /broadcasts/:broadcast_id: Retrieve Broadcast
    - Description: Retrieve a single broadcast.
    - Path Parameters:
      - broadcast_id: The unique identifier of the broadcast to retrieve.
  - PATCH /broadcasts/:broadcast_id: Update Broadcast
  - POST /broadcasts/:broadcast_id/send: Send Broadcast
  - DEL /broadcasts/:broadcast_id: Delete Broadcast
  - GET /broadcasts: List Broadcasts

Audience Endpoints:
  - POST /audiences: Create Audience
  - GET /audiences/:audience_id: Retrieve Audience
  - DEL /audiences/:audience_id: Delete Audience
  - GET /audiences: List Audiences

Contact Endpoints:
  - POST /contacts: Create Contact
  - GET /contacts/:contact_id: Retrieve Contact
  - PATCH /contacts/:contact_id: Update Contact
  - DEL /contacts/:contact_id: Delete Contact
  - GET /contacts: List Contacts
```

----------------------------------------

TITLE: Resend API Current Feature Limitations
DESCRIPTION: Outlines the current limitations of the Resend API, specifically noting that `attachments`, `tags`, and `scheduled_at` fields are not yet supported for email sending.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Limitations:
  - The `attachments` field is not supported.
  - The `tags` field is not supported.
  - The `scheduled_at` field is not supported.
```

----------------------------------------

TITLE: Send Email with HTML using Resend Ruby SDK
DESCRIPTION: This Ruby code example demonstrates how to send an email using the Resend SDK. It shows how to set the API key, define email parameters including sender, recipient, subject, and HTML content, and then send the email.
SOURCE: https://resend.com/docs/send-with-ruby

LANGUAGE: Ruby
CODE:
```
require "resend"

Resend.api_key = "re_xxxxxxxxx"

params = {
  "from": "Acme <onboarding@resend.dev>",
  "to": ["delivered@resend.dev"],
  "subject": "hello world",
  "html": "<strong>it works!</strong>"
}

sent = Resend::Emails.send(params)
puts sent
```

----------------------------------------

TITLE: Send HTML Email with Resend in Remix
DESCRIPTION: This code example demonstrates how to send an HTML email using the Resend Node.js SDK within a Remix resource route. It initializes the Resend client with an API key, constructs an email with 'from', 'to', 'subject', and 'html' parameters, and handles the API response, returning JSON data or an error.
SOURCE: https://resend.com/docs/send-with-remix

LANGUAGE: JavaScript
CODE:
```
import { json } from '@remix-run/node';
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

export const loader = async () => {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Hello world',
    html: '<strong>It works!</strong>',
  });

  if (error) {
    return json({ error }, 400);
  }

  return json(data, 200);
};
```

----------------------------------------

TITLE: Resend API Endpoint Overview
DESCRIPTION: This section provides an overview of the various API endpoints available in the Resend platform, categorized by resource type. It lists the primary operations (Create, Retrieve, Update, Delete, List, Send, Verify, Cancel) for Email, Domains, API Keys, Broadcasts, Audiences, and Contacts.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: APIDOC
CODE:
```
Resend API Endpoints:

Email:
  - POST /emails: Send Email
  - POST /emails/batch: Send Batch Emails
  - GET /emails/:id: Retrieve Email
  - PATCH /emails/:id: Update Email
  - POST /emails/:id/cancel: Cancel Email

Domains:
  - POST /domains: Create Domain
  - GET /domains/:id: Retrieve Domain
  - POST /domains/:id/verify: Verify Domain
  - PATCH /domains/:id: Update Domain
  - GET /domains: List Domains
  - DELETE /domains/:id: Delete Domain

API Keys:
  - POST /api-keys: Create API key
  - GET /api-keys: List API keys
  - DELETE /api-keys/:id: Delete API key

Broadcasts:
  - POST /broadcasts: Create Broadcast
  - GET /broadcasts/:id: Retrieve Broadcast
  - PATCH /broadcasts/:id: Update Broadcast
  - POST /broadcasts/:id/send: Send Broadcast
  - DELETE /broadcasts/:id: Delete Broadcast
  - GET /broadcasts: List Broadcasts

Audiences:
  - POST /audiences: Create Audience
  - GET /audiences/:id: Retrieve Audience
  - DELETE /audiences/:id: Delete Audience
  - GET /audiences: List Audiences

Contacts:
  - POST /audiences/:audience_id/contacts: Create Contact
  - GET /audiences/:audience_id/contacts/:id: Retrieve Contact
  - PATCH /audiences/:audience_id/contacts/:id: Update Contact
  - DELETE /audiences/:audience_id/contacts/:id: Delete Contact
  - GET /audiences/:audience_id/contacts: List Contacts
```

----------------------------------------

TITLE: Resend Domain Verification API Response Example
DESCRIPTION: This JSON object illustrates the typical successful response received from the Resend API after a domain verification request. It confirms the object type as 'domain' and provides the unique identifier of the verified domain.
SOURCE: https://resend.com/docs/api-reference/domains/verify-domain

LANGUAGE: JSON
CODE:
```
{
  "object": "domain",
  "id": "d91cd9bd-1176-453e-8fc1-35364d380206"
}
```

----------------------------------------

TITLE: Resend Broadcasts API Endpoints
DESCRIPTION: Comprehensive API documentation for managing broadcast campaigns through the Resend platform. This includes methods for creating, retrieving, updating, sending, deleting, and listing broadcasts.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts/create-broadcast
  - Description: Creates a new broadcast campaign.
  - Parameters: (Not detailed in source, typically 'audienceId', 'from', 'subject', 'html'/'text')
  - Returns: (Not detailed in source, includes the 'id' of the new broadcast)

GET /broadcasts/get-broadcast
  - Description: Retrieves details of a specific broadcast.
  - Parameters: (Not detailed in source, typically 'broadcast_id')
  - Returns: (Not detailed in source, includes broadcast details)

PATCH /broadcasts/update-broadcast
  - Description: Updates properties of an existing broadcast.
  - Parameters: (Not detailed in source, typically 'broadcast_id' and fields to update)
  - Returns: (Not detailed in source)

POST /broadcasts/send-broadcast
  - Description: Initiates sending of a broadcast campaign to its audience.
  - Parameters: (Not detailed in source, typically 'broadcast_id')
  - Returns: (Not detailed in source)

DEL /broadcasts/delete-broadcast
  - Description: Deletes a broadcast campaign.
  - Parameters: (Not detailed in source, typically 'broadcast_id')
  - Returns: (Not detailed in source)

GET /broadcasts/list-broadcasts
  - Description: Lists all broadcast campaigns associated with the account.
  - Parameters: (Not detailed in source, typically pagination parameters)
  - Returns: (Not detailed in source, an array of broadcast objects)
```

----------------------------------------

TITLE: Resend API Keys API Endpoints
DESCRIPTION: API for managing API keys used to authenticate requests to the Resend platform. This includes functionalities for creating new API keys, listing existing ones, and securely deleting them.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: APIDOC
CODE:
```
POST /api-keys
  - Create API key
GET /api-keys
  - List API keys
DELETE /api-keys/:api_key_id
  - Delete API key
```

----------------------------------------

TITLE: Resend API: Delete Audience Success Response
DESCRIPTION: Example of the JSON response returned by the Resend API upon successful deletion of an audience. It confirms the object type, the ID of the deleted audience, and the deletion status.
SOURCE: https://resend.com/docs/api-reference/audiences/delete-audience

LANGUAGE: JSON
CODE:
```
{
  "object": "audience",
  "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  "deleted": true
}
```

----------------------------------------

TITLE: Install Resend Go SDK
DESCRIPTION: This snippet provides the `go get` command required to install the Resend Go SDK. This SDK is essential for interacting with the Resend API to send emails from Go applications.
SOURCE: https://resend.com/docs/send-with-go

LANGUAGE: bash
CODE:
```
go get github.com/resend/resend-go/v2
```

----------------------------------------

TITLE: Send HTML Email using Resend Node.js SDK
DESCRIPTION: This Node.js example demonstrates how to send an email with HTML content using the Resend SDK. It initializes the Resend client with an API key, specifies sender and recipient, subject, and the HTML body, then logs the result or any errors.
SOURCE: https://resend.com/docs/send-with-nodejs

LANGUAGE: TypeScript
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

(async function () {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Hello World',
    html: '<strong>It works!</strong>',
  });

  if (error) {
    return console.error({ error });
  }

  console.log({ data });
})();
```

----------------------------------------

TITLE: Resend API Endpoints Reference
DESCRIPTION: Comprehensive reference for various Resend API endpoints across different service categories, including Email, Domains, API Keys, Broadcasts, Audiences, and Contacts. Each entry specifies the HTTP method and the endpoint path.
SOURCE: https://resend.com/docs/api-reference/domains/list-domains

LANGUAGE: APIDOC
CODE:
```
##### Email API
- POST /emails: Send Email
- POST /emails/batch: Send Batch Emails
- GET /emails/{id}: Retrieve Email
- PATCH /emails/{id}: Update Email
- POST /emails/{id}/cancel: Cancel Email

##### Domains API
- POST /domains: Create Domain
- GET /domains/{id}: Retrieve Domain
- POST /domains/{id}/verify: Verify Domain
- PATCH /domains/{id}: Update Domain
- GET /domains: List Domains
- DEL /domains/{id}: Delete Domain

##### API Keys API
- POST /api-keys: Create API key
- GET /api-keys: List API keys
- DEL /api-keys/{id}: Delete API key

##### Broadcasts API
- POST /broadcasts: Create Broadcast
- GET /broadcasts/{id}: Retrieve Broadcast
- PATCH /broadcasts/{id}: Update Broadcast
- POST /broadcasts/{id}/send: Send Broadcast
- DEL /broadcasts/{id}: Delete Broadcast
- GET /broadcasts: List Broadcasts

##### Audiences API
- POST /audiences: Create Audience
- GET /audiences/{id}: Retrieve Audience
- DEL /audiences/{id}: Delete Audience
- GET /audiences: List Audiences

##### Contacts API
- POST /contacts: Create Contact
- GET /contacts/{id}: Retrieve Contact
- PATCH /contacts/{id}: Update Contact
- DEL /contacts/{id}: Delete Contact
- GET /contacts: List Contacts
```

----------------------------------------

TITLE: Resend Contacts API Endpoints
DESCRIPTION: Comprehensive API documentation for managing contacts within the Resend platform. This includes operations for creating, retrieving, updating, deleting, and listing contacts.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /contacts/create-contact
  - Description: Creates a new contact within an audience.
  - Parameters: (Not detailed in source, typically 'audienceId', 'email', 'firstName', 'lastName')
  - Returns: (Not detailed in source, includes the 'id' of the new contact)

GET /contacts/get-contact
  - Description: Retrieves details of a specific contact.
  - Parameters: (Not detailed in source, typically 'contact_id')
  - Returns: (Not detailed in source, includes contact details)

PATCH /contacts/update-contact
  - Description: Updates properties of an existing contact.
  - Parameters: (Not detailed in source, typically 'contact_id' and fields to update)
  - Returns: (Not detailed in source)

DEL /contacts/delete-contact
  - Description: Deletes a contact.
  - Parameters: (Not detailed in source, typically 'contact_id')
  - Returns: (Not detailed in source)

GET /contacts/list-contacts
  - Description: Lists all contacts within an audience.
  - Parameters: (Not detailed in source, typically 'audienceId', pagination parameters)
  - Returns: (Not detailed in source, an array of contact objects)
```

----------------------------------------

TITLE: Delete Resend API Key with Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to programmatically delete an existing API key using the Resend SDK. It initializes the Resend client with an API key and then calls the `apiKeys.remove` method with the target API key's ID.
SOURCE: https://resend.com/docs/api-reference/api-keys/delete-api-key

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.apiKeys.remove('b6d24b8e-af0b-4c3c-be0c-359bbd97381e');
```

----------------------------------------

TITLE: Resend API Reference for Email, Domains, API Keys, Broadcasts, Audiences, and Contacts
DESCRIPTION: This comprehensive API documentation outlines the various endpoints and HTTP methods available for interacting with Resend's services. It covers operations for managing emails, domains, API keys, broadcasts, audiences, and contacts, detailing the path parameters where applicable.
SOURCE: https://resend.com/docs/api-reference/broadcasts/update-broadcast

LANGUAGE: APIDOC
CODE:
```
Email API:
  POST /emails
    - Send Email
  POST /emails/batch
    - Send Batch Emails
  GET /emails/:id
    - Retrieve Email
  PATCH /emails/:id
    - Update Email
  POST /emails/:id/cancel
    - Cancel Email

Domains API:
  POST /domains
    - Create Domain
  GET /domains/:id
    - Retrieve Domain
  POST /domains/:id/verify
    - Verify Domain
  PATCH /domains/:id
    - Update Domain
  GET /domains
    - List Domains
  DEL /domains/:id
    - Delete Domain

API Keys API:
  POST /api-keys
    - Create API key
  GET /api-keys
    - List API keys
  DEL /api-keys/:id
    - Delete API key

Broadcasts API:
  POST /broadcasts
    - Create Broadcast
  GET /broadcasts/:id
    - Retrieve Broadcast
  PATCH /broadcasts/:id
    - Update Broadcast
    - Path Parameters:
      - id: string (required) - The ID of the broadcast to update.
  POST /broadcasts/:id/send
    - Send Broadcast
  DEL /broadcasts/:id
    - Delete Broadcast
  GET /broadcasts
    - List Broadcasts

Audiences API:
  POST /audiences
    - Create Audience
  GET /audiences/:id
    - Retrieve Audience
  DEL /audiences/:id
    - Delete Audience
  GET /audiences
    - List Audiences

Contacts API:
  POST /contacts
    - Create Contact
  GET /contacts/:id
    - Retrieve Contact
  PATCH /contacts/:id
    - Update Contact
  DEL /contacts/:id
    - Delete Contact
  GET /contacts
    - List Contacts
```

----------------------------------------

TITLE: Resend Get Contact API Response Schema
DESCRIPTION: Describes the JSON structure returned by the Resend API when successfully retrieving contact information. The response includes the contact's object type, unique ID, email, first and last names, creation timestamp, and unsubscription status.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
{
  "object": "contact",
  "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
  "email": "steve.wozniak@gmail.com",
  "first_name": "Steve",
  "last_name": "Wozniak",
  "created_at": "2023-10-06T23:47:56.678Z",
  "unsubscribed": false
}
```

----------------------------------------

TITLE: Resend Domains API Endpoints
DESCRIPTION: API reference for managing email domains within the Resend service. This covers operations for creating new domains, retrieving domain details, verifying domain ownership, updating domain configurations, listing all registered domains, and deleting domains.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Create Domain: Registers a new email sending domain.

GET /domains/{id}
  - Retrieve Domain: Fetches details of a specific domain by its ID.

POST /domains/{id}/verify
  - Verify Domain: Initiates or checks the verification status of a domain.

PATCH /domains/{id}
  - Update Domain: Modifies the configuration or settings of an existing domain.

GET /domains
  - List Domains: Retrieves a list of all domains associated with the account.

DEL /domains/{id}
  - Delete Domain: Removes a domain from the Resend service.
```

----------------------------------------

TITLE: Update Contact in Node.js with Resend SDK
DESCRIPTION: This Node.js code snippet demonstrates how to update an existing contact using the Resend SDK. It provides two examples: one for updating a contact by its unique ID and another for updating by email address, both within a specified audience. The example shows how to change the 'unsubscribed' status.
SOURCE: https://resend.com/docs/api-reference/contacts/update-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

// Update by contact id
resend.contacts.update({
  id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  unsubscribed: true,
});

// Update by contact email
resend.contacts.update({
  email: 'acme@example.com',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  unsubscribed: true,
});
```

----------------------------------------

TITLE: Delete Resend Broadcast using Node.js SDK
DESCRIPTION: Example Node.js code demonstrating how to delete a broadcast using the Resend SDK. This snippet shows the initialization of the Resend client with an API key and the invocation of the `broadcasts.remove` method, passing the specific broadcast ID to be deleted.
SOURCE: https://resend.com/docs/api-reference/broadcasts/delete-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.remove('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');
```

----------------------------------------

TITLE: Resend Audiences API Endpoints
DESCRIPTION: API reference for managing email audiences. This includes operations for creating, retrieving, deleting, and listing audience segments for targeted email campaigns.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
POST /audiences
  - Create Audience: Defines a new audience segment.

GET /audiences/{id}
  - Retrieve Audience: Fetches details of a specific audience by its ID.

DEL /audiences/{id}
  - Delete Audience: Removes an audience segment.

GET /audiences
  - List Audiences: Retrieves a list of all audience segments.
```

----------------------------------------

TITLE: Resend Domains API Reference
DESCRIPTION: Comprehensive API documentation for managing domains within the Resend platform, covering the update operation. This includes the HTTP method, endpoint structure, path parameters, and expected response format.
SOURCE: https://resend.com/docs/api-reference/domains/update-domain

LANGUAGE: APIDOC
CODE:
```
### Update Domain

Updates an existing domain's settings, such as tracking and TLS enforcement.

**Method:** `PATCH`
**Endpoint:** `/domains/:domain_id`

**Path Parameters:**
- `domain_id`: `string` (required)
  The unique identifier of the domain to update.

**Request Body Parameters (Example from Node.js snippet):**
- `openTracking`: `boolean` (optional)
  Set to `true` to enable open tracking for emails sent from this domain, `false` otherwise.
- `clickTracking`: `boolean` (optional)
  Set to `true` to enable click tracking for emails sent from this domain, `false` otherwise.
- `tls`: `string` (optional)
  Specify TLS enforcement. Example values: `'enforced'`.

**Response (Success 200 OK):**
```json
{
  "object": "domain",
  "id": "b8617ad3-b712-41d9-81a0-f7c3d879314e"
}
```
**Description:** Returns the updated domain object with its ID.
```

----------------------------------------

TITLE: Resend API Rate Limiting Policy
DESCRIPTION: Details the default rate limit enforced by the Resend API, which is set at 2 requests per second. Exceeding this limit will result in a `429` HTTP response error code.
SOURCE: https://resend.com/docs/api-reference/introduction

LANGUAGE: APIDOC
CODE:
```
The default maximum rate limit is **2 requests per second**. This number can be increased for trusted senders by request. After that, you’ll hit the rate limit and receive a `429` response error code.
```

----------------------------------------

TITLE: Resend API Standard Response Codes
DESCRIPTION: A comprehensive list of standard HTTP status codes used by the Resend API to indicate the success or failure of requests. Codes are categorized into `2xx` for success, `4xx` for client-side errors, and `5xx` for server-side issues.
SOURCE: https://resend.com/docs/api-reference/introduction

LANGUAGE: APIDOC
CODE:
```
Status | Description
--- | ---
`200` | Successful request.
`400` | Check that the parameters were correct.
`401` | The API key used was missing.
`403` | The API key used was invalid.
`404` | The resource was not found.
`429` | The rate limit was exceeded.
`5xx` | Indicates an error with Resend servers.
```

----------------------------------------

TITLE: Create Resend Broadcast using Node.js SDK
DESCRIPTION: Example Node.js code demonstrating how to use the Resend SDK to create a new email broadcast. It initializes the Resend client with an API key and then calls the `broadcasts.create` method, providing the audience ID, sender, subject, and HTML content.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.create({
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  from: 'Acme <onboarding@resend.dev>',
  subject: 'hello world',
  html: 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
});
```

----------------------------------------

TITLE: Resend Email API: Body Parameters for Sending Emails
DESCRIPTION: This section outlines the comprehensive set of body parameters available when sending emails via the Resend API. It covers essential details like sender and recipient addresses, email subject, various content types (HTML, plain text, React component), scheduling options, and advanced features such as attachments and custom tags.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
Email Send Body Parameters:
  from: string (required)
    - Sender email address. To include a friendly name, use the format "Your Name <sender@domain.com>".
  to: string | string[] (required)
    - Recipient email address(es). For multiple addresses, send as an array of strings. Max 50 recipients.
  subject: string (required)
    - Email subject.
  bcc: string | string[]
    - Bcc recipient email address(es). For multiple addresses, send as an array of strings.
  cc: string | string[]
    - Cc recipient email address(es). For multiple addresses, send as an array of strings.
  scheduled_at: string
    - Schedule email to be sent later. The date should be in natural language (e.g.: `in 1 min`) or ISO 8601 format (e.g: `2024-08-05T11:52:01.858Z`).
  reply_to: string | string[]
    - Reply-to email address(es). For multiple addresses, send as an array of strings.
  html: string
    - The HTML version of the message.
  text: string
    - The plain text version of the message.
  react: React.ReactNode
    - The React component used to write the message. *Only available in the Node.js SDK.* 
  headers: object
    - Custom headers to add to the email.
  attachments: array
    - Filename and content of attachments (max 40MB per email, after Base64 encoding).
    - Properties for each attachment object:
      - content: buffer | string
        - Content of an attached file, passed as a buffer or Base64 string.
      - filename: string
        - Name of attached file.
      - path: string
        - Path where the attachment file is hosted.
      - content_type: string
        - Content type for the attachment, if not set will be derived from the filename property.
  tags: array
    - Custom data passed in key/value pairs.
    - Properties for each tag object:
      - name: string (required)
        - The name of the email tag. ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). Max 256 characters.
      - value: string (required)
        - The value of the email tag. ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-). Max 256 characters.
```

----------------------------------------

TITLE: Resend API: Get Domain Endpoint and Response Schema
DESCRIPTION: This documentation details the API endpoint for retrieving domain information and the structure of the expected JSON response. It specifies the required path parameter `domain_id` and outlines the various fields returned in the domain object, including its ID, name, status, creation timestamp, region, and a list of associated DNS records (SPF, DKIM).
SOURCE: https://resend.com/docs/api-reference/domains/get-domain

LANGUAGE: APIDOC
CODE:
```
GET /domains/{domain_id}

Path Parameters:
  domain_id: string (required)
    The unique identifier for the domain.

Response Body (JSON Object):
  object: string
    Type of the object, always 'domain'.
  id: string
    The unique ID of the domain.
  name: string
    The domain name (e.g., 'example.com').
  status: string
    The current status of the domain (e.g., 'not_started', 'verified').
  created_at: string (ISO 8601 datetime)
    Timestamp when the domain was created.
  region: string
    The AWS region where the domain is hosted (e.g., 'us-east-1').
  records: array of objects
    A list of DNS records associated with the domain.
    Each record object contains:
      record: string
        Type of DNS record (e.g., 'SPF', 'DKIM').
      name: string
        The name/host of the record.
      type: string
        The DNS record type (e.g., 'MX', 'TXT').
      ttl: string
        Time-to-live for the record (e.g., 'Auto').
      status: string
        Status of the record (e.g., 'not_started', 'verified').
      value: string
        The value of the DNS record.
      priority: number (optional)
        Priority for MX records.
```

----------------------------------------

TITLE: Node.js Resend SDK: Update Contact by ID or Email
DESCRIPTION: Demonstrates how to update an existing contact using the Resend Node.js SDK. It provides examples for updating a contact either by their unique ID or by their email address within a specified audience.
SOURCE: https://resend.com/docs/api-reference/contacts/update-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

// Update by contact id
resend.contacts.update({
  id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  unsubscribed: true,
});

// Update by contact email
resend.contacts.update({
  email: 'acme@example.com',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  unsubscribed: true,
});
```

----------------------------------------

TITLE: Resend Audiences API Reference
DESCRIPTION: Comprehensive documentation for managing audiences via the Resend API, including creating, retrieving, deleting, and listing audiences. This section details the HTTP methods, endpoints, parameters, and expected responses for audience-related operations.
SOURCE: https://resend.com/docs/api-reference/audiences/create-audience

LANGUAGE: APIDOC
CODE:
```
POST /audiences
  - Description: Create a list of contacts (audience).
  - Body Parameters:
    - name: string (required)
      - Description: The name of the audience you want to create.
  - Response:
    - object: "audience"
    - id: string (UUID)
    - name: string
  - Example Response:
    {
      "object": "audience",
      "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "name": "Registered Users"
    }

GET /audiences/{id}
  - Description: Retrieve a specific audience by ID.

DEL /audiences/{id}
  - Description: Delete an audience by ID.

GET /audiences
  - Description: List all audiences.
```

----------------------------------------

TITLE: Get Email Details using Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to fetch the details of a specific email using its ID with the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the `emails.get` method.
SOURCE: https://resend.com/docs/api-reference/emails/retrieve-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.emails.get('37e4414c-5e25-4dbc-a071-43552a4bd53b');
```

----------------------------------------

TITLE: Resend API: Create Contact Body Parameters
DESCRIPTION: Defines the required and optional parameters for the 'Create Contact' API endpoint. These parameters are used to specify the contact's email, audience, and other personal details.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: APIDOC
CODE:
```
Body Parameters for Create Contact:
  email: string (required)
    The email address of the contact.
  audience_id: string (required)
    The Audience ID to which the contact will be added.
  first_name: string (optional)
    The first name of the contact.
  last_name: string (optional)
    The last name of the contact.
  unsubscribed: boolean (optional)
    The subscription status of the contact (true for unsubscribed, false for subscribed).
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API documentation for managing emails through the Resend platform. This includes methods for sending single or batch emails, retrieving email status, updating email details, and canceling sent emails.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /emails/send-email
  - Description: Sends a single email.
  - Parameters: (Not detailed in source, typically includes 'from', 'to', 'subject', 'html'/'text' body)
  - Returns: (Not detailed in source, typically includes 'id' of the sent email)

POST /emails/send-batch-emails
  - Description: Sends multiple emails in a single request.
  - Parameters: (Not detailed in source, typically an array of email objects)
  - Returns: (Not detailed in source, typically an array of 'id's for sent emails)

GET /emails/retrieve-email
  - Description: Retrieves the status and details of a specific email.
  - Parameters: (Not detailed in source, typically 'email_id')
  - Returns: (Not detailed in source, includes email status, recipient, subject, etc.)

PATCH /emails/update-email
  - Description: Updates details of an existing email (e.g., status, metadata).
  - Parameters: (Not detailed in source, typically 'email_id' and fields to update)
  - Returns: (Not detailed in source)

POST /emails/cancel-email
  - Description: Cancels a pending or scheduled email.
  - Parameters: (Not detailed in source, typically 'email_id')
  - Returns: (Not detailed in source)
```

----------------------------------------

TITLE: Run Next.js Development Server Locally
DESCRIPTION: This command starts the Next.js development server, allowing you to test API routes and other application features locally. It enables hot-reloading and provides a local endpoint (`http://localhost:3000/api/send`) for testing the email sending functionality.
SOURCE: https://resend.com/docs/send-with-vercel-functions

LANGUAGE: bash
CODE:
```
npx next dev
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API documentation for managing emails via the Resend platform, including methods for sending single or batch emails, retrieving, updating, and canceling email dispatches.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
POST /emails
  - Send Email: Dispatches a single email.
POST /emails/batch
  - Send Batch Emails: Sends multiple emails in a single request.
GET /emails/:id
  - Retrieve Email: Fetches details of a specific email by its ID.
PATCH /emails/:id
  - Update Email: Modifies properties of an existing email.
POST /emails/:id/cancel
  - Cancel Email: Stops the dispatch of a pending email.
```

----------------------------------------

TITLE: Example JSON Response for Domain Deletion
DESCRIPTION: This snippet shows the typical JSON response received after successfully deleting a domain via the Resend API. It confirms the object type, the ID of the deleted domain, and a 'deleted' status flag.
SOURCE: https://resend.com/docs/api-reference/domains/delete-domain

LANGUAGE: JSON
CODE:
```
{
  "object": "domain",
  "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
  "deleted": true
}
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API documentation for managing emails, domains, API keys, broadcasts, audiences, and contacts within the Resend platform. This includes methods for sending, retrieving, updating, and canceling emails, as well as managing other related resources.
SOURCE: https://resend.com/docs/api-reference/emails/update-email

LANGUAGE: APIDOC
CODE:
```
Email Endpoints:
  - POST /emails: Send Email
  - POST /emails/batch: Send Batch Emails
  - GET /emails/:id: Retrieve Email
  - PATCH /emails/:id: Update Email
    - Description: Update a scheduled email.
    - Path Parameters:
      - id: string (required) - The Email ID.
    - Body Parameters:
      - scheduled_at: string (optional) - Schedule email to be sent later. The date should be in ISO 8601 format (e.g: 2024-08-05T11:52:01.858Z).
    - Response Example:
      {
        "object": "email",
        "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
      }
  - POST /emails/:id/cancel: Cancel Email

Domain Endpoints:
  - POST /domains: Create Domain
  - GET /domains/:id: Retrieve Domain
  - POST /domains/:id/verify: Verify Domain
  - PATCH /domains/:id: Update Domain
  - GET /domains: List Domains
  - DEL /domains/:id: Delete Domain

API Key Endpoints:
  - POST /api-keys: Create API key
  - GET /api-keys: List API keys
  - DEL /api-keys/:id: Delete API key

Broadcast Endpoints:
  - POST /broadcasts: Create Broadcast
  - GET /broadcasts/:id: Retrieve Broadcast
  - PATCH /broadcasts/:id: Update Broadcast
  - POST /broadcasts/:id/send: Send Broadcast
  - DEL /broadcasts/:id: Delete Broadcast
  - GET /broadcasts: List Broadcasts

Audience Endpoints:
  - POST /audiences: Create Audience
  - GET /audiences/:id: Retrieve Audience
  - DEL /audiences/:id: Delete Audience
  - GET /audiences: List Audiences

Contact Endpoints:
  - POST /contacts: Create Contact
  - GET /contacts/:id: Retrieve Contact
  - PATCH /contacts/:id: Update Contact
  - DEL /contacts/:id: Delete Contact
  - GET /contacts: List Contacts
```

----------------------------------------

TITLE: Resend API Key Management Endpoints
DESCRIPTION: Endpoints for securely managing API keys used for authentication with the Resend service. This includes operations to create new API keys, list existing keys, and delete compromised or unused keys.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
POST /api-keys - Create API key
GET /api-keys - List API keys
DEL /api-keys/{id} - Delete API key
```

----------------------------------------

TITLE: Send Email using Hono and Resend Node.js SDK with React Template
DESCRIPTION: This code snippet demonstrates how to set up a Hono application to send emails using the Resend SDK. It initializes Resend with an API key, defines a GET endpoint, and sends an email using the previously created React email template, handling both success and error responses.
SOURCE: https://resend.com/docs/send-with-hono

LANGUAGE: TypeScript
CODE:
```
import { Hono } from 'hono';
import { Resend } from 'resend';
import { EmailTemplate } from './emails/email-template';

const app = new Hono();
const resend = new Resend('re_xxxxxxxxx');

app.get('/', async (c) => {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    react: <EmailTemplate firstName="John" />,
  });

  if (error) {
    return c.json(error, 400);
  }

  return c.json(data);
});

export default app;
```

----------------------------------------

TITLE: Resend Email API: Request Headers
DESCRIPTION: This section describes the custom headers that can be included in Resend API requests. The `Idempotency-Key` header is crucial for preventing duplicate email sends by ensuring that repeated requests with the same key are processed only once.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
Request Headers:
  Idempotency-Key: string
    - Add an idempotency key to prevent duplicated emails.
    - Should be **unique per API request**.
    - Idempotency keys expire after **24 hours**.
    - Have a maximum length of **256 characters**.
```

----------------------------------------

TITLE: Resend Domains API Reference
DESCRIPTION: Comprehensive documentation for the Resend Domains API, detailing the `POST /domains` endpoint for creating new domains. It includes the request method, path, and the structure of a successful response, which contains the domain ID, name, creation timestamp, status, and DNS records required for verification.
SOURCE: https://resend.com/docs/api-reference/domains/create-domain

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Description: Creates a new domain for sending emails through Resend.
  - Parameters:
    - name (string, required): The domain name to create (e.g., 'example.com').
  - Example Request (Node.js):
    import { Resend } from 'resend';
    const resend = new Resend('re_xxxxxxxxx');
    resend.domains.create({ name: 'example.com' });
  - Successful Response (200 OK):
    {
      "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
      "name": "example.com",
      "created_at": "2023-03-28T17:12:02.059593+00:00",
      "status": "not_started",
      "records": [
        {
          "record": "SPF",
          "name": "send",
          "type": "MX",
          "ttl": "Auto",
          "status": "not_started",
          "value": "feedback-smtp.us-east-1.amazonses.com",
          "priority": 10
        },
        {
          "record": "SPF",
          "name": "send",
          "value": "\"v=spf1 include:amazonses.com ~all\"",
          "type": "TXT",
          "ttl": "Auto",
          "status": "not_started"
        },
        {
          "record": "DKIM",
          "name": "nhapbbryle57yxg3fbjytyodgbt2kyyg._domainkey",
          "value": "nhapbbryle57yxg3fbjytyodgbt2kyyg.dkim.amazonses.com.",
          "type": "CNAME",
          "status": "not_started",
          "ttl": "Auto"
        },
        {
          "record": "DKIM",
          "name": "xbakwbe5fcscrhzshpap6kbxesf6pfgn._domainkey",
          "value": "xbakwbe5fcscrhzshpap6kbxesf6pfgn.dkim.amazonses.com.",
          "type": "CNAME",
          "status": "not_started",
          "ttl": "Auto"
        },
        {
          "record": "DKIM",
          "name": "txrcreso3dqbvcve45tqyosxwaegvhgn._domainkey",
          "value": "txrcreso3dqbvcve45tqyosxwaegvhgn.dkim.amazonses.com.",
          "type": "CNAME",
          "status": "not_started",
          "ttl": "Auto"
        }
      ],
      "region": "us-east-1"
    }
  - Related Endpoints (not detailed in this snippet):
    - GET /domains/{id}: Retrieve a specific domain.
    - POST /domains/{id}/verify: Verify a domain.
    - PATCH /domains/{id}: Update a domain.
    - GET /domains: List all domains.
    - DEL /domains/{id}: Delete a domain.
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive documentation for managing emails via the Resend API, including operations for sending single or batch emails, retrieving details of sent emails, updating email statuses, and canceling email deliveries.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
POST /emails - Send Email
POST /emails/batch - Send Batch Emails
GET /emails/{id} - Retrieve Email
PATCH /emails/{id} - Update Email
POST /emails/{id}/cancel - Cancel Email
```

----------------------------------------

TITLE: Resend Contacts API Endpoints
DESCRIPTION: API documentation for managing contacts within specific audiences in Resend, including methods for creating, retrieving, updating, deleting, and listing contacts.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
POST /audiences/:audience_id/contacts
  - Create Contact: Adds a new contact to a specified audience.
GET /audiences/:audience_id/contacts/:id
  - Retrieve Contact: Fetches details of a single contact from an audience by its ID.
GET /audiences/:audience_id/contacts
  - List Contacts: Retrieves a list of all contacts within a specified audience.
PATCH /audiences/:audience_id/contacts/:id
  - Update Contact: Modifies properties of an existing contact within an audience.
DEL /audiences/:audience_id/contacts/:id
  - Delete Contact: Removes a contact from an audience.
```

----------------------------------------

TITLE: Send Email via Next.js API Route with Resend
DESCRIPTION: This Next.js API route (compatible with Pages Router and App Router) demonstrates how to send an email using the Resend SDK. It initializes Resend with an API key, sends an email with a subject and a React component as the body, and includes error handling for the API response.
SOURCE: https://resend.com/docs/send-with-nextjs

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next';
import { EmailTemplate } from '../../components/EmailTemplate';
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Hello world',
    react: EmailTemplate({ firstName: 'John' }),
  });

  if (error) {
    return res.status(400).json(error);
  }

  res.status(200).json(data);
};
```

----------------------------------------

TITLE: Send HTML Email with Sinatra and Resend
DESCRIPTION: This Sinatra application demonstrates how to send an HTML email using the Resend Ruby SDK. It sets up a basic Sinatra server, configures the Resend API key from environment variables, and defines a GET route to send an email with specified 'from', 'to', 'subject', and 'html' parameters.
SOURCE: https://resend.com/docs/send-with-sinatra

LANGUAGE: Ruby
CODE:
```
require "sinatra"
require "resend"

set :port, 5000
set :bind, "0.0.0.0"

Resend.api_key = ENV["RESEND_API_KEY"]

get "/" do

  content_type :json

  params = {
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<strong>it works!</strong>',
  }

  Resend::Emails.send(params).to_hash.to_json
end
```

----------------------------------------

TITLE: Example JSON Response for Contact Retrieval
DESCRIPTION: Illustrates the typical JSON structure returned by the Resend API when successfully retrieving a contact. The response includes the contact's object type, unique ID, email address, first name, last name, creation timestamp, and subscription status.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: JSON
CODE:
```
{
  "object": "contact",
  "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
  "email": "steve.wozniak@gmail.com",
  "first_name": "Steve",
  "last_name": "Wozniak",
  "created_at": "2023-10-06T23:47:56.678Z",
  "unsubscribed": false
}
```

----------------------------------------

TITLE: Resend API Error Codes and Messages
DESCRIPTION: This section details various error responses from the Resend API, including their HTTP status codes, descriptive messages, and suggested actions to resolve the issue. Errors cover a range of scenarios from invalid requests and authentication issues to rate limits and server-side problems.
SOURCE: https://resend.com/docs/api-reference/errors

LANGUAGE: APIDOC
CODE:
```
Resend API Error Codes:

Error: method_not_allowed
  Status: 405
  Message: Method is not allowed for the requested path.
  Suggested action: Change your API endpoint to use a valid method.

Error: invalid_idempotent_request
  Status: 409
  Message: Same idempotency key used with a different request payload.
  Suggested action: Change your idempotency key or payload.

Error: concurrent_idempotent_requests
  Status: 409
  Message: Same idempotency key used while original request is still in progress.
  Suggested action: Try the request again later.

Error: invalid_attachment
  Status: 422
  Message: Attachment must have either a `content` or `path`.
  Suggested action: Attachments must either have a `content` (strings, Buffer, or Stream contents) or `path` to a remote resource (better for larger attachments).

Error: invalid_from_address
  Status: 422
  Message: Invalid `from` field.
  Suggested action: Make sure the `from` field is a valid. The email address needs to follow the `email@example.com` or `Name <email@example.com>` format.

Error: invalid_access
  Status: 422
  Message: Access must be “full_access” | “sending_access”.
  Suggested action: Make sure the API key has necessary permissions.

Error: invalid_parameter
  Status: 422
  Message: The `parameter` must be a valid UUID.
  Suggested action: Check the value and make sure it’s valid.

Error: invalid_region
  Status: 422
  Message: Region must be “us-east-1” | “eu-west-1” | “sa-east-1”.
  Suggested action: Make sure the correct region is selected.

Error: missing_required_field
  Status: 422
  Message: The request body is missing one or more required fields.
  Suggested action: Check the error message to see the list of missing fields.

Error: daily_quota_exceeded
  Status: 429
  Message: You have reached your daily email sending quota.
  Suggested action: Upgrade your plan to remove the daily quota limit or wait until 24 hours have passed to continue sending.

Error: rate_limit_exceeded
  Status: 429
  Message: Too many requests. Please limit the number of requests per second. Or contact support to increase rate limit.
  Suggested action: You should read the response headers and reduce the rate at which you request the API. This can be done by introducing a queue mechanism or reducing the number of concurrent requests per second. If you have specific requirements, contact support to request a rate increase.

Error: security_error
  Status: 451
  Message: We may have found a security issue with the request.
  Suggested action: The message will contain more details. Contact support for more information.

Error: application_error
  Status: 500
  Message: An unexpected error occurred.
  Suggested action: Try the request again later. If the error does not resolve, check our status page for service updates.
```

----------------------------------------

TITLE: Resend Domains API Reference
DESCRIPTION: Comprehensive API documentation for managing domains within the Resend platform, covering operations such as creating, retrieving, verifying, updating, listing, and deleting domains. Each entry details the HTTP method, endpoint path, and relevant parameters.
SOURCE: https://resend.com/docs/api-reference/domains/verify-domain

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Description: Create a new domain.

GET /domains/:domain_id
  - Description: Retrieve details of a specific domain.

POST /domains/:domain_id/verify
  - Description: Verify an existing domain to confirm ownership and enable sending.
  - Parameters:
    - domain_id: string (required) - The unique identifier of the domain to be verified.
  - Response:
    - object: "domain"
    - id: string (The ID of the verified domain)

PATCH /domains/:domain_id
  - Description: Update properties of an existing domain.

GET /domains
  - Description: List all domains associated with the account.

DEL /domains/:domain_id
  - Description: Delete a domain from the account.
```

----------------------------------------

TITLE: Example JSON Response for Resend Email Retrieval
DESCRIPTION: Illustrates the typical JSON structure returned by the Resend API when successfully retrieving an email. The response includes metadata such as the email's ID, recipients, sender, creation timestamp, subject, and content (HTML/text), along with delivery status.
SOURCE: https://resend.com/docs/api-reference/emails/retrieve-email

LANGUAGE: JSON
CODE:
```
{
  "object": "email",
  "id": "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
  "to": ["delivered@resend.dev"],
  "from": "Acme <onboarding@resend.dev>",
  "created_at": "2023-04-03T22:13:42.674981+00:00",
  "subject": "Hello World",
  "html": "Congrats on sending your <strong>first email</strong>!",
  "text": null,
  "bcc": [null],
  "cc": [null],
  "reply_to": [null],
  "last_event": "delivered"
}
```

----------------------------------------

TITLE: Resend Domains API Endpoints
DESCRIPTION: API documentation for managing domains within the Resend platform, covering operations such as creating, retrieving, verifying, updating, listing, and deleting domains associated with your account.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Create Domain: Registers a new domain for sending emails.
GET /domains/:id
  - Retrieve Domain: Fetches details of a specific domain by its ID.
POST /domains/:id/verify
  - Verify Domain: Initiates the verification process for a domain.
PATCH /domains/:id
  - Update Domain: Modifies properties of an existing domain.
GET /domains
  - List Domains: Retrieves a list of all domains associated with the account.
DEL /domains/:id
  - Delete Domain: Removes a domain from the account.
```

----------------------------------------

TITLE: Resend Audiences API Endpoints
DESCRIPTION: Comprehensive API documentation for managing audiences within the Resend platform. This includes operations for creating, retrieving, deleting, and listing audiences.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /audiences/create-audience
  - Description: Creates a new audience.
  - Parameters: (Not detailed in source, typically 'name')
  - Returns: (Not detailed in source, includes the 'id' of the new audience)

GET /audiences/get-audience
  - Description: Retrieves details of a specific audience.
  - Parameters: (Not detailed in source, typically 'audience_id')
  - Returns: (Not detailed in source, includes audience details)

DEL /audiences/delete-audience
  - Description: Deletes an audience.
  - Parameters: (Not detailed in source, typically 'audience_id')
  - Returns: (Not detailed in source)

GET /audiences/list-audiences
  - Description: Lists all audiences associated with the account.
  - Parameters: (Not detailed in source, typically pagination parameters)
  - Returns: (Not detailed in source, an array of audience objects)
```

----------------------------------------

TITLE: Resend Email Send API with Attachments
DESCRIPTION: Documentation for the `resend.emails.send` method, specifically detailing how to include attachments. It supports both remote file paths and local Base64 encoded content.
SOURCE: https://resend.com/docs/dashboard/emails/attachments

LANGUAGE: APIDOC
CODE:
```
resend.emails.send(options: object)
  - Sends an email with specified content and attachments.
  - Parameters:
    - from: string (required) - The sender's email address.
    - to: string[] (required) - An array of recipient email addresses.
    - subject: string (required) - The subject line of the email.
    - html: string (optional) - The HTML content of the email.
    - text: string (optional) - The plain text content of the email.
    - attachments: Attachment[] (optional) - An array of attachment objects.
      - Attachment object properties:
        - path: string (optional) - URL to a remote file. Mutually exclusive with 'content'.
        - content: string (optional) - Base64 encoded content of a local file. Mutually exclusive with 'path'.
        - filename: string (required for attachment) - The name of the file as it appears in the email.
  - Returns: Promise<EmailResponse> - A promise that resolves with the email send confirmation.
  - Limitations:
    - Max email size (including attachments): 40MB (after Base64 encoding).
    - Not all file types are supported.
    - Cannot be used with scheduled emails.
    - Cannot be used with batching endpoint (`/emails/send-batch-emails`).
```

----------------------------------------

TITLE: Resend API: Cancel Email Endpoint Specification
DESCRIPTION: Documents the API endpoint for canceling a scheduled email. It specifies the HTTP method, the resource path with a required ID parameter, and the structure of a successful JSON response.
SOURCE: https://resend.com/docs/api-reference/emails/cancel-email

LANGUAGE: APIDOC
CODE:
```
POST /emails/:id/cancel
  - Description: Cancels a scheduled email.
  - Path Parameters:
    - id: string (required) - The unique identifier of the email to cancel.
  - Success Response (200 OK):
    {
      "object": "email",
      "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
    }
```

----------------------------------------

TITLE: Resend Email Send API Response
DESCRIPTION: Illustrates the typical JSON response received after a successful email send operation via the Resend API. The response includes a unique identifier for the sent email.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: JSON
CODE:
```
{
  "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
}
```

----------------------------------------

TITLE: Resend Broadcast API Endpoints
DESCRIPTION: API for managing email broadcasts, allowing users to create, retrieve, update, send, delete, and list broadcast campaigns. These endpoints facilitate large-scale email distribution and management.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts - Create Broadcast
GET /broadcasts/{id} - Retrieve Broadcast
PATCH /broadcasts/{id} - Update Broadcast
POST /broadcasts/{id}/send - Send Broadcast
DEL /broadcasts/{id} - Delete Broadcast
GET /broadcasts - List Broadcasts
```

----------------------------------------

TITLE: Resend Broadcasts API Endpoints
DESCRIPTION: API documentation for managing email broadcasts within the Resend platform, providing functionalities to create, retrieve, update, send, delete, and list broadcast campaigns.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts
  - Create Broadcast: Defines a new email broadcast campaign.
GET /broadcasts/:id
  - Retrieve Broadcast: Fetches details of a specific broadcast by its ID.
PATCH /broadcasts/:id
  - Update Broadcast: Modifies properties of an existing broadcast.
POST /broadcasts/:id/send
  - Send Broadcast: Initiates the sending of a broadcast campaign.
DEL /broadcasts/:id
  - Delete Broadcast: Removes a broadcast campaign.
GET /broadcasts
  - List Broadcasts: Retrieves a list of all broadcast campaigns.
```

----------------------------------------

TITLE: Resend Audiences API Endpoints
DESCRIPTION: API documentation for managing audiences in Resend, enabling operations such as creating, retrieving, deleting, and listing contact audiences.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
POST /audiences
  - Create Audience: Creates a new audience to group contacts.
GET /audiences/:id
  - Retrieve Audience: Fetches details of a specific audience by its ID.
DEL /audiences/:id
  - Delete Audience: Removes an audience.
GET /audiences
  - List Audiences: Retrieves a list of all audiences.
```

----------------------------------------

TITLE: Access Resend API Key in Node.js/TypeScript Application
DESCRIPTION: This code snippet illustrates how to initialize the Resend client in a Node.js or TypeScript application by securely accessing the API key from `process.env`. This method promotes secure access to environment variables, avoiding hard-coded credentials in the application logic.
SOURCE: https://resend.com/docs/knowledge-base/how-to-handle-api-keys

LANGUAGE: typescript
CODE:
```
const resend = new Resend(process.env.RESEND_API_KEY);
```

----------------------------------------

TITLE: Resend Domains API Endpoints
DESCRIPTION: Comprehensive API documentation for managing domains within the Resend platform. This includes operations for creating, retrieving, verifying, updating, listing, and deleting domains associated with your Resend account.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
POST /domains/create-domain
  - Description: Creates a new domain for sending emails.
  - Parameters: (Not detailed in source, typically 'domain_name')
  - Returns: (Not detailed in source, includes domain details and verification records)

GET /domains/get-domain
  - Description: Retrieves details of a specific domain.
  - Parameters: (Not detailed in source, typically 'domain_id')
  - Returns: (Not detailed in source, includes domain name, status, DNS records)

POST /domains/verify-domain
  - Description: Initiates or re-checks the verification status of a domain.
  - Parameters: (Not detailed in source, typically 'domain_id')
  - Returns: (Not detailed in source, includes verification status)

PATCH /domains/update-domain
  - Description: Updates properties of an existing domain.
  - Parameters: (Not detailed in source, typically 'domain_id' and fields to update)
  - Returns: (Not detailed in source)

GET /domains/list-domains
  - Description: Lists all domains associated with the account.
  - Parameters: (Not detailed in source, typically pagination parameters)
  - Returns: (Not detailed in source, an array of domain objects)

DEL /domains/delete-domain
  - Description: Deletes a domain from the account.
  - Parameters: (Not detailed in source, typically 'domain_id')
  - Returns: (Not detailed in source)
```

----------------------------------------

TITLE: Send Email using Resend Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to send a basic HTML email using the Resend SDK. It initializes the Resend client with an API key and then calls the `emails.send` method, specifying the sender, recipient, subject, and HTML content.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  html: '<p>it works!</p>',
});
```

----------------------------------------

TITLE: Resend API Endpoints Overview
DESCRIPTION: A comprehensive overview of the core API endpoints provided by Resend for managing various aspects of email communication, domains, API keys, broadcasts, audiences, and contacts. This includes methods for sending, retrieving, updating, creating, listing, and deleting resources across different categories.
SOURCE: https://resend.com/docs/api-reference/emails/retrieve-email

LANGUAGE: APIDOC
CODE:
```
Email API Endpoints:
  - POST /emails: Send Email
  - POST /emails/batch: Send Batch Emails
  - GET /emails/:id: Retrieve Email
    - Description: Retrieves a single email by its unique identifier.
    - Parameters:
      - id (path, string, required): The unique ID of the email to retrieve.
    - Returns: Email object with details like ID, recipients, sender, subject, content, and status.
  - PATCH /emails/:id: Update Email
  - POST /emails/:id/cancel: Cancel Email

Domains API Endpoints:
  - POST /domains: Create Domain
  - GET /domains/:id: Retrieve Domain
  - POST /domains/:id/verify: Verify Domain
  - PATCH /domains/:id: Update Domain
  - GET /domains: List Domains
  - DEL /domains/:id: Delete Domain

API Keys API Endpoints:
  - POST /api-keys: Create API key
  - GET /api-keys: List API keys
  - DEL /api-keys/:id: Delete API key

Broadcasts API Endpoints:
  - POST /broadcasts: Create Broadcast
  - GET /broadcasts/:id: Retrieve Broadcast
  - PATCH /broadcasts/:id: Update Broadcast
  - POST /broadcasts/:id/send: Send Broadcast
  - DEL /broadcasts/:id: Delete Broadcast
  - GET /broadcasts: List Broadcasts

Audiences API Endpoints:
  - POST /audiences: Create Audience
  - GET /audiences/:id: Retrieve Audience
  - DEL /audiences/:id: Delete Audience
  - GET /audiences: List Audiences

Contacts API Endpoints:
  - POST /contacts: Create Contact
  - GET /contacts/:id: Retrieve Contact
  - PATCH /contacts/:id: Update Contact
  - DEL /contacts/:id: Delete Contact
  - GET /contacts: List Contacts
```

----------------------------------------

TITLE: Send Email with Custom Headers using Resend (Node.js)
DESCRIPTION: This Node.js example demonstrates how to send an email using the Resend SDK and include a custom header, specifically 'X-Entity-Ref-ID', to prevent email threading in Gmail. It initializes the Resend client with an API key and sends an email with 'from', 'to', 'subject', 'text', and a 'headers' object.
SOURCE: https://resend.com/docs/dashboard/emails/custom-headers

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  text: 'it works!',
  headers: {
    'X-Entity-Ref-ID': 'xxx_xxxx',
  },
});
```

----------------------------------------

TITLE: Resend API: Internal Server Error (500)
DESCRIPTION: Details for the `internal_server_error` encountered when an unexpected issue occurs on the Resend API server. This error indicates a problem on the server side, and users are advised to retry the request or check the service status page.
SOURCE: https://resend.com/docs/api-reference/errors

LANGUAGE: APIDOC
CODE:
```
internal_server_error:
  Status: 500
  Message: An unexpected error occurred.
  Suggested action: Try the request again later. If the error does not resolve, check our status page (https://resend-status.com) for service updates.
```

----------------------------------------

TITLE: Resend API Reference: Contact Endpoints
DESCRIPTION: Comprehensive documentation for Resend's Contact API, covering operations for creating, retrieving, updating, deleting, and listing contacts. These endpoints manage individual recipients within audiences.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
POST /contacts
  - Description: Create a new contact.
GET /contacts/{id}
  - Description: Retrieve details of a specific contact by its ID.
PATCH /contacts/{id}
  - Description: Update properties of an existing contact.
DEL /contacts/{id}
  - Description: Delete a contact by its ID.
GET /contacts
  - Description: List all contacts associated with the account.
```

----------------------------------------

TITLE: Resend API Reference: Email Endpoints
DESCRIPTION: Comprehensive documentation for Resend's Email API, covering operations for sending, retrieving, updating, and canceling emails. These endpoints allow for managing email delivery programmatically.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
POST /emails
  - Description: Send a single email.
POST /emails/batch
  - Description: Send multiple emails in a single request.
GET /emails/{id}
  - Description: Retrieve details of a specific email by its ID.
PATCH /emails/{id}
  - Description: Update properties of an existing email.
POST /emails/{id}/cancel
  - Description: Cancel a pending email by its ID.
```

----------------------------------------

TITLE: Resend API Idempotency-Key Header Specification
DESCRIPTION: Details the `Idempotency-Key` header used in Resend API requests to prevent duplicate email sends. It specifies the key's uniqueness, expiration, and maximum length.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: APIDOC
CODE:
```
Idempotency-Key: string
  - Purpose: Prevents duplicated emails.
  - Constraints:
    - Must be unique per API request.
    - Expires after 24 hours.
    - Has a maximum length of 256 characters.
```

----------------------------------------

TITLE: Resend API: Update Contact Body Parameters
DESCRIPTION: Defines the parameters required in the request body for updating a contact via the Resend API. These parameters specify the contact's first name, last name, and subscription status.
SOURCE: https://resend.com/docs/api-reference/contacts/update-contact

LANGUAGE: APIDOC
CODE:
```
first_name: string
  - The first name of the contact.
last_name: string
  - The last name of the contact.
unsubscribed: boolean
  - The subscription status.
```

----------------------------------------

TITLE: Store Resend API Key in .env File
DESCRIPTION: This snippet demonstrates how to store your Resend API key in a `.env` file. This practice is crucial for keeping sensitive information out of your codebase and managing it securely as an environment variable, preventing hard-coding.
SOURCE: https://resend.com/docs/knowledge-base/how-to-handle-api-keys

LANGUAGE: dotenv
CODE:
```
RESEND_API_KEY = 're_xxxxxxxxx';
```

----------------------------------------

TITLE: Resend Domain API Endpoints
DESCRIPTION: Comprehensive documentation for managing domains via the Resend API. This includes operations for creating, retrieving, verifying, updating, listing, and deleting domains, along with their respective HTTP methods and endpoint paths.
SOURCE: https://resend.com/docs/api-reference/domains/get-domain

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Create Domain
GET /domains/:domain_id
  - Retrieve Domain
POST /domains/:domain_id/verify
  - Verify Domain
PATCH /domains/:domain_id
  - Update Domain
GET /domains
  - List Domains
DEL /domains/:domain_id
  - Delete Domain
```

----------------------------------------

TITLE: Send Email via Resend API in Deno Deploy
DESCRIPTION: This TypeScript code defines a Deno Deploy handler function that sends an email using the Resend API. It performs a POST request to the Resend /emails endpoint, including the API key for authorization and email details in the JSON body. The function then returns the API response, indicating success or failure.
SOURCE: https://resend.com/docs/send-with-deno-deploy

LANGUAGE: typescript
CODE:
```
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const RESEND_API_KEY = 're_xxxxxxxxx';

const handler = async (_request: Request): Promise<Response> => {
    const res = await fetch('https://api.resend.com/emails', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${RESEND_API_KEY}`
        },
        body: JSON.stringify({
            from: 'Acme <onboarding@resend.dev>',
            to: ['delivered@resend.dev'],
            subject: 'hello world',
            html: '<strong>it works!</strong>',
        })
    });

    if (res.ok) {
        const data = await res.json();

        return new Response(data, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
};

serve(handler);
```

----------------------------------------

TITLE: Resend Contacts API: Create Contact
DESCRIPTION: Documentation for the Resend Contacts API endpoint used to create and add new contacts to an audience. This method allows programmatic management of audience members, including their personal details and subscription status, and is supported by Resend's SDKs.
SOURCE: https://resend.com/docs/dashboard/audiences/contacts

LANGUAGE: APIDOC
CODE:
```
Endpoint: POST /contacts
Method: resend.contacts.create(options)

Parameters:
  email: string (required)
    The email address of the contact.
  firstName: string (optional)
    The first name of the contact.
  lastName: string (optional)
    The last name of the contact.
  unsubscribed: boolean (optional, default: false)
    Indicates if the contact is unsubscribed from the audience.
  audienceId: string (required)
    The unique identifier of the audience to which the contact will be added.

Returns:
  A Contact object upon successful creation.

Example Usage (Node.js):
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  resend.contacts.create({
    email: 'steve.wozniak@gmail.com',
    firstName: 'Steve',
    lastName: 'Wozniak',
    unsubscribed: false,
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf'
  });
```

----------------------------------------

TITLE: Create Next.js API Route for Sending Email with Resend
DESCRIPTION: This TypeScript code defines a Next.js API route (`app/api/send/route.ts`) that handles POST requests to send emails using the Resend API. It constructs an HTTP POST request to the Resend email endpoint, including the API key, content type, and email details in the request body. The response from Resend is then returned as a JSON response.
SOURCE: https://resend.com/docs/send-with-vercel-functions

LANGUAGE: typescript
CODE:
```
const RESEND_API_KEY = 're_xxxxxxxxx';

export async function POST() {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  });

  if (res.ok) {
    const data = await res.json();
    return Response.json(data);
  }
}
```

----------------------------------------

TITLE: Configure Resend API Key in Rails Mailer Initializer
DESCRIPTION: Sets the Resend API key within the Rails mailer initializer file (`config/initializers/mailer.rb`) to authenticate requests to the Resend API. Replace `re_xxxxxxxxx` with your actual API key.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: Ruby
CODE:
```
Resend.api_key = "re_xxxxxxxxx"
```

----------------------------------------

TITLE: Send Batch Emails with Resend Node.js SDK
DESCRIPTION: Demonstrates how to send multiple emails in a single API call using the Resend Node.js SDK's `batch.send` method. It initializes the Resend client and constructs an array of email objects, each with `from`, `to`, `subject`, and `html` fields.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.batch.send([
  {
    from: 'Acme <onboarding@resend.dev>',
    to: ['foo@gmail.com'],
    subject: 'hello world',
    html: '<h1>it works!</h1>',
  },
  {
    from: 'Acme <onboarding@resend.dev>',
    to: ['bar@outlook.com'],
    subject: 'world hello',
    html: '<p>it works!</p>',
  },
]);
```

----------------------------------------

TITLE: Resend Domain API Endpoints
DESCRIPTION: API methods for managing domains associated with your Resend account. This includes creating new domains, retrieving domain details, verifying domain ownership, updating domain configurations, listing all registered domains, and deleting domains.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
POST /domains - Create Domain
GET /domains/{id} - Retrieve Domain
POST /domains/{id}/verify - Verify Domain
PATCH /domains/{id} - Update Domain
GET /domains - List Domains
DEL /domains/{id} - Delete Domain
```

----------------------------------------

TITLE: Delete Contact API Endpoint
DESCRIPTION: Defines the HTTP DELETE endpoint for removing a contact from a specific audience in the Resend API. This operation requires both the audience ID and the contact ID as path parameters.
SOURCE: https://resend.com/docs/api-reference/contacts/delete-contact

LANGUAGE: APIDOC
CODE:
```
DELETE /audiences/:audience_id/contacts/:id
  - Description: Remove an existing contact from an audience.
  - Parameters:
    - :audience_id (string, path): The unique identifier of the audience.
    - :id (string, path): The unique identifier of the contact to delete.
```

----------------------------------------

TITLE: List Audiences API Endpoint
DESCRIPTION: Defines the HTTP method and path for retrieving a list of audiences from the Resend API. This endpoint allows users to fetch all audiences associated with their account.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
GET /audiences
  - Description: Retrieve a list of audiences.
  - Parameters: None
  - Returns: A JSON object containing a list of audience objects, each with an ID, name, and creation timestamp.
```

----------------------------------------

TITLE: Resend API: Sending Emails with Plain Text Content
DESCRIPTION: This snippet documents how to include a plain text version of an email when using the Resend API. Providing a plain text alternative ensures accessibility for all recipients, including those with email clients that do not support HTML, and is a best practice for deliverability.
SOURCE: https://resend.com/docs/dashboard/emails/deliverability-insights

LANGUAGE: APIDOC
CODE:
```
Resend Email Sending API:
  POST /emails/send
    - Description: Sends an email with specified content and options.
    - Parameters:
      - from: string (required) - The sender's email address.
      - to: string | string[] (required) - The recipient's email address(es).
      - subject: string (required) - The subject line of the email.
      - html: string (required) - The HTML content of the email body.
      - text: string (optional) - The plain text content of the email body.
        - Purpose: Ensures accessibility for email clients that do not support HTML and improves deliverability.
        - Usage: Pass the plain text version of your email content to this parameter.
    - Example Usage (Conceptual):
      const resend = new Resend('re_YOUR_API_KEY');
      await resend.emails.send({
        from: 'onboarding@resend.dev',
        to: 'user@example.com',
        subject: 'Welcome to Resend!',
        html: '<strong>Hello world!</strong>',
        text: 'Hello world!'
      });
```

----------------------------------------

TITLE: Resend API Reference: Broadcast Endpoints
DESCRIPTION: Comprehensive documentation for Resend's Broadcast API, covering operations for creating, retrieving, updating, sending, deleting, and listing broadcasts. These endpoints facilitate sending mass communications.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts
  - Description: Create a new broadcast.
GET /broadcasts/{id}
  - Description: Retrieve details of a specific broadcast by its ID.
PATCH /broadcasts/{id}
  - Description: Update properties of an existing broadcast.
POST /broadcasts/{id}/send
  - Description: Send a broadcast by its ID.
DEL /broadcasts/{id}
  - Description: Delete a broadcast by its ID.
GET /broadcasts
  - Description: List all broadcasts associated with the account.
```

----------------------------------------

TITLE: Resend API Idempotency Responses
DESCRIPTION: Describes the possible HTTP responses from the Resend API when using idempotency keys, including successful email sending and various error conditions related to key usage and concurrent requests.
SOURCE: https://resend.com/docs/dashboard/emails/idempotency-keys

LANGUAGE: APIDOC
CODE:
```
Resend API Idempotency Responses:

Successful Response:
  - Returns the email ID of the sent email.

Error Responses:
  - 400: invalid_idempotency_key
    - Description: The idempotency key has to be between 1-256 characters.
    - Resolution: Retry with a valid key or without supplying an idempotency key.

  - 409: invalid_idempotent_request
    - Description: This idempotency key has already been used on a request that had a different payload.
    - Resolution: Retrying this request is useless without changing the idempotency key or payload.

  - 409: concurrent_idempotent_requests
    - Description: Another request with the same idempotency key is currently in progress.
    - Resolution: It is safe to retry this request later if needed, as Resend can’t return its original response.
```

----------------------------------------

TITLE: Resend Email API: Successful Send Response
DESCRIPTION: This JSON snippet represents the typical successful response received after sending an email via the Resend API. The response includes a unique identifier (`id`) for the sent email, which can be used for tracking or reference.
SOURCE: https://resend.com/docs/api-reference/emails/send-email

LANGUAGE: APIDOC
CODE:
```
Successful Email Send Response:
{
  "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
}
```

----------------------------------------

TITLE: Send Email with Resend API in AWS Lambda (Node.js)
DESCRIPTION: This Node.js handler function demonstrates how to send an email using the Resend API from an AWS Lambda environment. It performs a POST request to the Resend emails endpoint, including the API key for authorization and email details (sender, recipient, subject, HTML content) in the request body. The function checks for a successful API response and returns the result.
SOURCE: https://resend.com/docs/send-with-aws-lambda

LANGUAGE: javascript
CODE:
```
const RESEND_API_KEY = 're_xxxxxxxxx';

export const handler = async (event) => {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  });

  if (res.ok) {
    const data = await res.json();

    return {
      statusCode: 200,
      body: data,
    };
  }
};
```

----------------------------------------

TITLE: Resend Ruby SDK Email Sending API
DESCRIPTION: Comprehensive documentation for sending emails using the Resend Ruby SDK's `Resend::Emails.send` method. This method facilitates sending emails with various parameters including sender, recipients, subject, and HTML content, returning the API response as a hash.
SOURCE: https://resend.com/docs/send-with-sinatra

LANGUAGE: APIDOC
CODE:
```
Resend::Emails.send(params)
  - Description: Sends an email using the Resend API.
  - Parameters:
    - params (Hash): A hash containing email parameters.
      - from (String, required): The sender's email address, e.g., 'Acme <onboarding@resend.dev>'.
      - to (Array<String>, required): An array of recipient email addresses.
      - subject (String, required): The subject line of the email.
      - html (String, optional): The HTML content of the email body.
      - text (String, optional): The plain text content of the email body.
      - cc (Array<String>, optional): An array of CC recipient email addresses.
      - bcc (Array<String>, optional): An array of BCC recipient email addresses.
      - reply_to (String, optional): The email address to reply to.
      - attachments (Array<Hash>, optional): An array of attachment objects, each with 'filename' and 'content' (base64 encoded).
  - Returns: A hash representing the API response, typically including an 'id' (String) for the sent email.
  - Example Usage:
    params = {
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }
    response = Resend::Emails.send(params)
    puts response.to_hash.to_json
```

----------------------------------------

TITLE: Resend API Reference: Domain Endpoints
DESCRIPTION: Comprehensive documentation for Resend's Domain API, covering operations for creating, retrieving, verifying, updating, listing, and deleting domains. These endpoints are essential for managing sender identities.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Description: Create a new domain.
GET /domains/{id}
  - Description: Retrieve details of a specific domain by its ID.
POST /domains/{id}/verify
  - Description: Verify a domain to enable sending.
PATCH /domains/{id}
  - Description: Update properties of an existing domain.
GET /domains
  - Description: List all domains associated with the account.
DEL /domains/{id}
  - Description: Delete a domain by its ID.
```

----------------------------------------

TITLE: Create Contact using Resend Node.js SDK
DESCRIPTION: Demonstrates how to programmatically create a new contact in a Resend audience using the official Node.js SDK. This example initializes the Resend client and calls the 'contacts.create' method with the necessary contact details.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.contacts.create({
  email: 'steve.wozniak@gmail.com',
  firstName: 'Steve',
  lastName: 'Wozniak',
  unsubscribed: false,
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Send email using Resend with API key from .env file
DESCRIPTION: This Rust code shows how to load environment variables from a `.env` file using `dotenvy` and initialize the Resend client using `Resend::default()`, which automatically reads the `RESEND_API_KEY` from the environment. It then proceeds to send an HTML email, demonstrating a more secure way to handle API keys.
SOURCE: https://resend.com/docs/send-with-rust

LANGUAGE: Rust
CODE:
```
// main.rs
use dotenvy::dotenv;
use resend_rs::types::CreateEmailBaseOptions;
use resend_rs::{Resend, Result};

#[tokio::main]
async fn main() -> Result<()> {
  let _env = dotenv().unwrap();

  let resend = Resend::default();

  let from = "Acme <onboarding@resend.dev>";
  let to = ["delivered@resend.dev"];
  let subject = "Hello World";

  let email = CreateEmailBaseOptions::new(from, to, subject)
    .with_html("<strong>It works!</strong>");

  let _email = resend.emails.send(email).await?;

  Ok(())
}
```

----------------------------------------

TITLE: Create Next.js API Route for Webhook Endpoint
DESCRIPTION: This TypeScript snippet demonstrates how to set up a basic Next.js API route (`pages/api/webhooks.ts`) to receive POST requests from Resend webhooks. It logs the incoming payload for inspection and responds with an HTTP 200 OK status to acknowledge successful event delivery to Resend.
SOURCE: https://resend.com/docs/dashboard/webhooks

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next';

export default (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === 'POST') {
    const payload = req.body;
    console.log(payload);
    res.status(200);
  }
};
```

----------------------------------------

TITLE: Send an email using Resend Rust SDK with hardcoded API key
DESCRIPTION: This Rust code demonstrates how to initialize the Resend client with a hardcoded API key and send a basic HTML email. It uses `tokio::main` for asynchronous execution, showing the core functionality of sending an email.
SOURCE: https://resend.com/docs/send-with-rust

LANGUAGE: Rust
CODE:
```
use resend_rs::types::CreateEmailBaseOptions;
use resend_rs::{Resend, Result};

#[tokio::main]
async fn main() -> Result<()> {
  let resend = Resend::new("re_xxxxxxxxx");

  let from = "Acme <onboarding@resend.dev>";
  let to = ["delivered@resend.dev"];
  let subject = "Hello World";

  let email = CreateEmailBaseOptions::new(from, to, subject)
    .with_html("<strong>It works!</strong>");

  let _email = resend.emails.send(email).await?;

  Ok(())
}
```

----------------------------------------

TITLE: Resend Batch Email Send API Response
DESCRIPTION: Illustrates the expected JSON response structure after successfully sending a batch of emails via the Resend API. The response contains a `data` array, where each object includes the unique `id` of the sent email.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "id": "ae2014de-c168-4c61-8267-70d2662a1ce1"
    },
    {
      "id": "faccb7a5-8a28-4e9a-ac64-8da1cc3bc1cb"
    }
  ]
}
```

----------------------------------------

TITLE: List Contacts using Resend Node.js SDK
DESCRIPTION: This code snippet demonstrates how to list all contacts associated with a specific audience using the Resend Node.js SDK. It initializes the SDK with an API key and then calls the `contacts.list` method, passing the audience ID.
SOURCE: https://resend.com/docs/api-reference/contacts/list-contacts

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.contacts.list({
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Resend Domains Update API Body Parameters
DESCRIPTION: Defines the configurable body parameters for updating domain settings via the Resend API. These parameters control email tracking (click and open) and TLS encryption behavior for outgoing emails, ensuring secure and trackable communication.
SOURCE: https://resend.com/docs/api-reference/domains/update-domain

LANGUAGE: APIDOC
CODE:
```
Body Parameters:
  click_tracking: boolean
    Track clicks within the body of each HTML email.

  open_tracking: boolean
    Track the open rate of each email.

  tls: string
    default: "opportunistic"
    * opportunistic: Opportunistic TLS means that it always attempts to make a secure connection to the receiving mail server. If it can’t establish a secure connection, it sends the message unencrypted.
    * enforced: Enforced TLS on the other hand, requires that the email communication must use TLS no matter what. If the receiving server does not support TLS, the email will not be sent.
```

----------------------------------------

TITLE: Create Contact API Endpoint
DESCRIPTION: This API endpoint allows you to create a new contact within a specified audience. You must provide the audience ID in the path and the contact details in the request body. The response includes the ID of the newly created contact.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: APIDOC
CODE:
```
Endpoint: POST /audiences/:audience_id/contacts

Description: Create a contact inside an audience.

Path Parameters:
  - audience_id (string, required): The unique identifier of the audience to which the contact will be added.

Request Body (JSON):
  - email (string, required): The email address of the contact.
  - firstName (string, optional): The first name of the contact.
  - lastName (string, optional): The last name of the contact.
  - unsubscribed (boolean, optional): A flag indicating if the contact is unsubscribed. Defaults to false.

Response (JSON):
  - object (string): The type of resource, always 'contact'.
  - id (string): The unique identifier of the newly created contact.
```

----------------------------------------

TITLE: Send Email with List-Unsubscribe Header using Resend Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to send an email using the Resend SDK, incorporating the `List-Unsubscribe` header. This header is crucial for allowing email clients to provide a direct unsubscribe option in their UI, which helps improve deliverability and user satisfaction. The example initializes the Resend client with an API key and sends a basic email with the specified header.
SOURCE: https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  text: 'it works!',
  headers: {
    'List-Unsubscribe': '<https://example.com/unsubscribe>',
  },
});
```

----------------------------------------

TITLE: Resend API Rate Limit Headers
DESCRIPTION: Details the HTTP response headers provided by the Resend API to communicate current rate limit status, including maximum requests, remaining requests, and reset times. It also mentions the default rate limit and the 429 response code for exceeding it.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
Header name | Description
--- | ---
ratelimit-limit | Maximum number of requests allowed within a window.
ratelimit-remaining | How many requests you have left within the current window.
ratelimit-reset | How many seconds until the limits are reset.
retry-after | How many seconds you should wait before making a follow-up request.

Default maximum rate limit: 2 requests per second.
Exceeding limit returns: 429 response error code.
```

----------------------------------------

TITLE: Resend API Reference: Audience Endpoints
DESCRIPTION: Comprehensive documentation for Resend's Audience API, covering operations for creating, retrieving, deleting, and listing audiences. These endpoints are used to manage recipient groups for email campaigns.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: APIDOC
CODE:
```
POST /audiences
  - Description: Create a new audience.
GET /audiences/{id}
  - Description: Retrieve details of a specific audience by its ID.
DEL /audiences/{id}
  - Description: Delete an audience by its ID.
GET /audiences
  - Description: List all audiences associated with the account.
```

----------------------------------------

TITLE: Resend Contact Management Endpoints
DESCRIPTION: API for managing individual contacts within your audiences. This includes operations to create new contacts, retrieve contact details, update existing contact information, delete contacts, and list all contacts within an audience.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
POST /audiences/{audience_id}/contacts - Create Contact
GET /audiences/{audience_id}/contacts/{contact_id} - Retrieve Contact
PATCH /audiences/{audience_id}/contacts/{contact_id} - Update Contact
DEL /audiences/{audience_id}/contacts/{contact_id} - Delete Contact
GET /audiences/{audience_id}/contacts - List Contacts
```

----------------------------------------

TITLE: Resend Audience Management Endpoints
DESCRIPTION: API methods for creating, retrieving, deleting, and listing audiences. These endpoints are crucial for segmenting and targeting email campaigns to specific groups of recipients.
SOURCE: https://resend.com/docs/api-reference/rate-limit

LANGUAGE: APIDOC
CODE:
```
POST /audiences - Create Audience
GET /audiences/{id} - Retrieve Audience
DEL /audiences/{id} - Delete Audience
GET /audiences - List Audiences
```

----------------------------------------

TITLE: API Reference: Delete Resend Domain
DESCRIPTION: Comprehensive API documentation for the endpoint used to remove an existing domain from Resend. It specifies the HTTP method, resource path, required path parameters, and the expected successful response structure.
SOURCE: https://resend.com/docs/api-reference/domains/delete-domain

LANGUAGE: APIDOC
CODE:
```
DELETE /domains/:domain_id

Description: Remove an existing domain.

Path Parameters:
  domain_id (string, required): The unique identifier of the domain to be deleted.

Response (200 OK):
  {
    "object": "domain",
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
    "deleted": true
  }
```

----------------------------------------

TITLE: Resend Broadcasts API Endpoints
DESCRIPTION: API for managing broadcast campaigns, enabling users to create, retrieve, update, send, delete, and list broadcast messages. This facilitates large-scale email distribution and campaign management.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: APIDOC
CODE:
```
POST /broadcasts
  - Create Broadcast
GET /broadcasts/:broadcast_id
  - Retrieve Broadcast
PATCH /broadcasts/:broadcast_id
  - Update Broadcast
POST /broadcasts/:broadcast_id/send
  - Send Broadcast
DELETE /broadcasts/:broadcast_id
  - Delete Broadcast
GET /broadcasts
  - List Broadcasts
```

----------------------------------------

TITLE: Resend Audiences API Endpoints
DESCRIPTION: API for managing audiences, which are collections of contacts for targeted email campaigns. This includes operations for creating, retrieving, deleting, and listing audiences.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: APIDOC
CODE:
```
POST /audiences
  - Create Audience
GET /audiences/:audience_id
  - Retrieve a single audience by its ID.
  - Parameters:
    - audience_id: The unique identifier of the audience to retrieve.
  - Returns: An audience object with details like ID, name, and creation timestamp.
DELETE /audiences/:audience_id
  - Delete Audience
GET /audiences
  - List Audiences
```

----------------------------------------

TITLE: Playwright E2E Test: Mock Resend API Response
DESCRIPTION: This Playwright test (`e2e/app.spec.ts`) illustrates how to mock the Resend API response to prevent actual API calls and avoid impacting the sending quota. It uses `page.route` to intercept requests to the `/api/send` endpoint and fulfills them with a predefined JSON body, allowing the testing of the application's internal logic without external dependencies.
SOURCE: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test("mocks the response and doesn't call the Resend API", async ({ page }) => {
  // Sample response from Resend
  const body = JSON.stringify({
    data: {
      id: '621f3ecf-f4d2-453a-9f82-21332409b4d2',
    },
  });

  // Mock the api call before navigating
  await page.route('*/**/api/send', async (route) => {
    await route.fulfill({
      body,
      contentType: 'application/json',
      status: 200,
    });
  });
});
```

----------------------------------------

TITLE: Resend Batch Email Send API Response
DESCRIPTION: This JSON snippet shows the expected successful response from the Resend API after a batch email send operation. It returns an array of objects, each containing the unique ID for a successfully sent email.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "id": "ae2014de-c168-4c61-8267-70d2662a1ce1"
    },
    {
      "id": "faccb7a5-8a28-4e9a-ac64-8da1cc3bc1cb"
    }
  ]
}
```

----------------------------------------

TITLE: List Domains using Resend Node.js SDK
DESCRIPTION: This code snippet demonstrates how to programmatically retrieve a list of domains associated with the authenticated user's Resend account using the Node.js SDK. It initializes the Resend client with an API key and then calls the `domains.list()` method.
SOURCE: https://resend.com/docs/api-reference/domains/list-domains

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.list();
```

----------------------------------------

TITLE: Sample JSON Response for Create Contact
DESCRIPTION: This JSON object represents a typical successful response after creating a contact via the Resend API. It confirms the object type as 'contact' and provides the unique identifier for the newly created contact.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: JSON
CODE:
```
{
  "object": "contact",
  "id": "479e3145-dd38-476b-932c-529ceb705947"
}
```

----------------------------------------

TITLE: Resend API: Create Contact Success Response
DESCRIPTION: Illustrates the typical JSON response received upon successfully creating a contact via the Resend API. The response includes the object type ('contact') and the unique identifier ('id') for the newly created contact.
SOURCE: https://resend.com/docs/api-reference/contacts/create-contact

LANGUAGE: JSON
CODE:
```
{
  "object": "contact",
  "id": "479e3145-dd38-476b-932c-529ceb705947"
}
```

----------------------------------------

TITLE: Send Email with HTML using Astro Actions and Resend
DESCRIPTION: This Astro Action defines a server-side function to send an email using the Resend API. It initializes the Resend client with the API key, constructs an email with an HTML body, and includes error handling for the sending process.
SOURCE: https://resend.com/docs/send-with-astro

LANGUAGE: TypeScript
CODE:
```
import { ActionError, defineAction } from 'astro:actions';
import { Resend } from 'resend';

const resend = new Resend(import.meta.env.RESEND_API_KEY);

export const server = {
  send: defineAction({
    accept: 'form',
    handler: async () => {
      const { data, error } = await resend.emails.send({
        from: 'Acme <onboarding@resend.dev>',
        to: ['delivered@resend.dev'],
        subject: 'Hello world',
        html: '<strong>It works!</strong>',
      });

      if (error) {
        throw new ActionError({
          code: 'BAD_REQUEST',
          message: error.message,
        });
      }

      return data;
    },
  }),
};
```

----------------------------------------

TITLE: Implement Resend Email Sending in Supabase Edge Function Handler
DESCRIPTION: This TypeScript code defines a Deno-based Supabase Edge Function handler. It demonstrates how to make a POST request to the Resend API to send an email, including setting headers for content type and authorization, and structuring the request body with sender, recipient, subject, and HTML content. The function then returns the API response.
SOURCE: https://resend.com/docs/send-with-supabase-edge-functions

LANGUAGE: TypeScript
CODE:
```
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const RESEND_API_KEY = 're_xxxxxxxxx';

const handler = async (_request: Request): Promise<Response> => {
    const res = await fetch('https://api.resend.com/emails', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${RESEND_API_KEY}`
        },
        body: JSON.stringify({
            from: 'Acme <onboarding@resend.dev>',
            to: ['delivered@resend.dev'],
            subject: 'hello world',
            html: '<strong>it works!</strong>',
        })
    });

    const data = await res.json();

    return new Response(JSON.stringify(data), {
        status: 200,
        headers: {
            'Content-Type': 'application/json',
        },
    });
};

serve(handler);
```

----------------------------------------

TITLE: Send Broadcast with Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to send a broadcast using the Resend SDK. It initializes the Resend client with an API key and then calls the 'broadcasts.send' method, specifying the broadcast ID and an optional 'scheduledAt' time.
SOURCE: https://resend.com/docs/api-reference/broadcasts/send-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.send('559ac32e-9ef5-46fb-82a1-b76b840c0f7b', {
  scheduledAt: 'in 1 min',
});
```

----------------------------------------

TITLE: Resend Domains API Endpoints
DESCRIPTION: API for managing domains associated with your Resend account. This allows for creating, retrieving, verifying, updating, listing, and deleting domains to ensure proper email sending capabilities.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: APIDOC
CODE:
```
POST /domains
  - Create Domain
GET /domains/:domain_id
  - Retrieve Domain
POST /domains/:domain_id/verify
  - Verify Domain
PATCH /domains/:domain_id
  - Update Domain
GET /domains
  - List Domains
DELETE /domains/:domain_id
  - Delete Domain
```

----------------------------------------

TITLE: Resend Broadcasts API: Create Broadcast Body Parameters
DESCRIPTION: Defines the required and optional body parameters for creating an email broadcast via the Resend API. These parameters specify the target audience, sender details, email subject, content (HTML or plain text), and an optional internal name for the broadcast.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: APIDOC
CODE:
```
audience_id: string (required)
  The ID of the audience you want to send to.
from: string (required)
  Sender email address. To include a friendly name, use the format "Your Name <sender@domain.com>".
subject: string (required)
  Email subject.
reply_to: string | string[] (optional)
  Reply-to email address. For multiple addresses, send as an array of strings.
html: string (optional)
  The HTML version of the message.
text: string (optional)
  The plain text version of the message.
react: React.ReactNode (optional)
  The React component used to write the message. *Only available in the Node.js SDK.*
name: string (optional)
  The friendly name of the broadcast. Only used for internal reference.
```

----------------------------------------

TITLE: Resend Contacts API Endpoints
DESCRIPTION: API for managing individual contacts within audiences. This allows for creating, retrieving, updating, deleting, and listing contacts, essential for maintaining recipient lists.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: APIDOC
CODE:
```
POST /contacts
  - Create Contact
GET /contacts/:contact_id
  - Retrieve Contact
PATCH /contacts/:contact_id
  - Update Contact
DELETE /contacts/:contact_id
  - Delete Contact
GET /contacts
  - List Contacts
```

----------------------------------------

TITLE: Resend Broadcast Creation API Response
DESCRIPTION: This JSON snippet represents the typical successful response received after making an API call to create a broadcast using the Resend platform. It includes a unique identifier for the newly created broadcast.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: JSON
CODE:
```
{
  "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
}
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This snippet provides the command to install the Resend Node.js SDK using npm, which is required to interact with the Resend API for sending emails.
SOURCE: https://resend.com/docs/send-with-remix

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Retrieve Resend Broadcast Details with Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to use the Resend SDK to fetch the details of a specific broadcast by its ID. It initializes the Resend client with an API key and then calls the `broadcasts.get` method.
SOURCE: https://resend.com/docs/api-reference/broadcasts/get-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.get('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');
```

----------------------------------------

TITLE: Send HTML Email with Resend in RedwoodJS Function
DESCRIPTION: This TypeScript code demonstrates how to initialize the Resend SDK with an API key and send a basic HTML email from within a RedwoodJS API Gateway function. It includes error handling and returns appropriate HTTP responses based on the email sending outcome.
SOURCE: https://resend.com/docs/send-with-redwoodjs

LANGUAGE: TypeScript
CODE:
```
import { Resend } from 'resend';
import type { APIGatewayEvent, Context } from 'aws-lambda';

const resend = new Resend('re_xxxxxxxxx');

export const handler = async (event: APIGatewayEvent, context: Context) => {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<strong>it works!</strong>',
  });

  if (error) {
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error }),
    };
  }

  return {
    statusCode: 200,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ data }),
  };
};
```

----------------------------------------

TITLE: Configure Resend API Key in Laravel .env
DESCRIPTION: This snippet demonstrates how to add your Resend API key to Laravel's `.env` environment file. This key is crucial for authenticating your application's requests with the Resend API, enabling secure email sending.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
RESEND_API_KEY=re_xxxxxxxxx
```

----------------------------------------

TITLE: Resend API: Update Contact Endpoint
DESCRIPTION: This API documentation details the endpoint for updating an existing contact. The operation uses the PATCH HTTP method and requires specifying the audience ID. Contacts can be identified for update either by their unique contact ID or by their email address. The response includes the object type and the ID of the updated contact.
SOURCE: https://resend.com/docs/api-reference/contacts/update-contact

LANGUAGE: APIDOC
CODE:
```
PATCH /audiences/:audience_id/contacts/:id

Path Parameters:
  audienceId: string (required)
    - Description: The unique identifier for the audience to which the contact belongs.
  id: string (optional)
    - Description: The unique identifier for the contact to be updated. Either 'id' or 'email' must be provided.
  email: string (optional)
    - Description: The email address of the contact to be updated. Either 'id' or 'email' must be provided.

Response:
  object: "contact"
  id: string
    - Description: The unique identifier of the updated contact.
```

----------------------------------------

TITLE: Handle Resend Webhook Events in Next.js
DESCRIPTION: This Next.js API route demonstrates how to create a local endpoint to receive POST requests from Resend webhooks. It logs the incoming payload and responds with an HTTP 200 OK to acknowledge successful delivery of the event.
SOURCE: https://resend.com/docs/dashboard/webhooks/introduction

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next';

export default (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === 'POST') {
    const payload = req.body;
    console.log(payload);
    res.status(200);
  }
};
```

----------------------------------------

TITLE: Resend API: Delete Broadcast Endpoint Reference
DESCRIPTION: Comprehensive API documentation for the DELETE /broadcasts/:broadcast_id endpoint, used to remove an existing broadcast. This entry specifies the HTTP method, the required path parameter, the structure of a successful response, and important constraints regarding which broadcasts can be deleted.
SOURCE: https://resend.com/docs/api-reference/broadcasts/delete-broadcast

LANGUAGE: APIDOC
CODE:
```
DELETE /broadcasts/:broadcast_id

Path Parameters:
  broadcast_id: string (required)
    The unique identifier for the broadcast to be deleted.

Response:
{
  "object": "broadcast",
  "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
  "deleted": true
}

Constraints:
  - Only broadcasts that are in the `draft` status can be deleted.
  - If a broadcast that has already been scheduled to be sent is deleted, its scheduled delivery will be automatically canceled.
```

----------------------------------------

TITLE: Send HTML Email using Resend Python SDK
DESCRIPTION: This Python code demonstrates how to send a simple HTML email using the Resend SDK. It initializes the API key from an environment variable, constructs email parameters including sender, recipient, subject, and HTML content, and then sends the email using `resend.Emails.send()`.
SOURCE: https://resend.com/docs/send-with-python

LANGUAGE: python
CODE:
```
import os
import resend

resend.api_key = os.environ["RESEND_API_KEY"]

params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<strong>it works!</strong>"
}

email = resend.Emails.send(params)
print(email)
```

----------------------------------------

TITLE: Send Batch Emails with Resend Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to send multiple emails in a single API call using the Resend SDK's batch sending functionality. It initializes the Resend client and then calls the `batch.send` method with an array of email objects, each containing sender, recipient, subject, and HTML content.
SOURCE: https://resend.com/docs/api-reference/emails/send-batch-emails

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.batch.send([
  {
    from: 'Acme <onboarding@resend.dev>',
    to: ['foo@gmail.com'],
    subject: 'hello world',
    html: '<h1>it works!</h1>',
  },
  {
    from: 'Acme <onboarding@resend.dev>',
    to: ['bar@outlook.com'],
    subject: 'world hello',
    html: '<p>it works!</p>',
  },
]);
```

----------------------------------------

TITLE: Send HTML Email with FastAPI and Resend
DESCRIPTION: This Python code snippet demonstrates how to create a FastAPI application that sends an HTML email using the Resend SDK. It sets up a POST endpoint that initializes the Resend API key and sends an email with a specified sender, recipient, subject, and HTML content.
SOURCE: https://resend.com/docs/send-with-fastapi

LANGUAGE: Python
CODE:
```
import resend
from typing import Dict
from fastapi import FastAPI

resend.api_key = "re_xxxxxxxxx"

app = FastAPI()

@app.post("/")
def send_mail() -> Dict:
    params: resend.Emails.SendParams = {
        "from": "onboarding@resend.dev",
        "to": ["delivered@resend.dev"],
        "subject": "Hello World",
        "html": "<strong>it works!</strong>",
    }
    email: resend.Email = resend.Emails.send(params)
    return email
```

----------------------------------------

TITLE: Schedule Resend Email with Natural Language
DESCRIPTION: This snippet demonstrates how to schedule an email using the Resend API by providing the `scheduledAt` parameter with a natural language string, such as 'in 1 min', 'tomorrow at 9am', or 'Friday at 3pm ET'. This simplifies scheduling without needing precise date calculations.
SOURCE: https://resend.com/docs/dashboard/emails/schedule-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  html: '<p>it works!</p>',
  scheduledAt: 'in 1 min',
});
```

----------------------------------------

TITLE: Send HTML Email using Resend in Flask
DESCRIPTION: This Python Flask application demonstrates how to send an HTML email using the Resend SDK. It initializes the Resend API key from environment variables, sets up a Flask route, and sends an email with a specified 'from', 'to', 'subject', and 'html' body, returning the Resend API response as JSON.
SOURCE: https://resend.com/docs/send-with-flask

LANGUAGE: Python
CODE:
```
import resend
import os
from flask import Flask, jsonify

resend.api_key = os.environ["RESEND_API_KEY"]

app = Flask(__name__)

@app.route("/")
def index():
    params: resend.Emails.SendParams = {
        "from": "Acme <onboarding@resend.dev>",
        "to": ["delivered@resend.dev"],
        "subject": "hello world",
        "html": "<strong>it works!</strong>",
    }

    r = resend.Emails.send(params)
    return jsonify(r)

if __name__ == "__main__":
    app.run()
```

----------------------------------------

TITLE: Send Email with Axum and Resend Rust SDK
DESCRIPTION: This comprehensive example demonstrates setting up an Axum web server, initializing the Resend client, and sending an email. It showcases state management with `Arc<AppState>` to share the Resend client across handlers and includes basic error handling for the email sending operation, returning the email ID on success or an HTTP 500 error.
SOURCE: https://resend.com/docs/send-with-axum

LANGUAGE: Rust
CODE:
```
use std::sync::Arc;

use axum::{extract::State, http::StatusCode, routing::get, Router};
use resend_rs::types::CreateEmailBaseOptions;
use resend_rs::{Resend, Result};

// Cloning the Resend client is fine and cheap as the internal HTTP client is
// not cloned.
#[derive(Clone)]
struct AppState {
  resend: Resend,
}

#[tokio::main]
async fn main() {
  let shared_state = Arc::new(AppState {
    resend: Resend::new("re_xxxxxxxxx"),
  });

  // build our application with a single route
  let app = Router::new()
    .route("/", get(endpoint))
    // provide the state so the router can access it
    .with_state(shared_state);

  // run our app with hyper, listening globally on port 3000
  let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
  axum::serve(listener, app).await.unwrap();
}

async fn endpoint(State(state): State<Arc<AppState>>) -> Result<String, StatusCode> {
  let from = "Acme <onboarding@resend.dev>";
  let to = ["delivered@resend.dev"];
  let subject = "Hello World";

  let email = CreateEmailBaseOptions::new(from, to, subject)
    .with_html("<strong>It works!</strong>");

  // access the state via the `State` extractor and handle the error
  match state.resend.emails.send(email).await {
    Ok(email) => Ok(email.id.to_string()),
    Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),
  }
}
```

----------------------------------------

TITLE: Generate RedwoodJS API Function for Email Sending
DESCRIPTION: This command uses the RedwoodJS CLI to generate a new API function named 'send'. This function will serve as an endpoint to encapsulate the email sending logic using the Resend SDK.
SOURCE: https://resend.com/docs/send-with-redwoodjs

LANGUAGE: Shell
CODE:
```
yarn rw g function send
```

----------------------------------------

TITLE: Resend Contacts API Path Parameters
DESCRIPTION: Defines the required and optional path parameters for Resend contact API endpoints, specifying how contacts can be identified using either an ID or an email address. The 'audienceId' is always required, and either 'id' or 'email' must be provided for contact identification.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: APIDOC
CODE:
```
audienceId: string, required
  Description: The Audience ID.
id: string
  Description: The Contact ID.
email: string
  Description: The Contact Email.
Constraint: Either `id` or `email` must be provided.
```

----------------------------------------

TITLE: Create Domain using Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to programmatically create a new domain using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the `domains.create` method with the desired domain name.
SOURCE: https://resend.com/docs/api-reference/domains/create-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.create({ name: 'example.com' });
```

----------------------------------------

TITLE: Create Domain with Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to create a new domain using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the 'domains.create' method, passing the desired domain name as a parameter.
SOURCE: https://resend.com/docs/api-reference/domains/create-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.create({ name: 'example.com' });
```

----------------------------------------

TITLE: Create Audience using Resend Node.js SDK
DESCRIPTION: This code snippet demonstrates how to create a new audience using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the `audiences.create` method, passing the desired name for the new audience.
SOURCE: https://resend.com/docs/api-reference/audiences/create-audience

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.audiences.create({ name: 'Registered Users' });
```

----------------------------------------

TITLE: Configure Resend API Key in .env
DESCRIPTION: This snippet shows how to securely store your Resend API key in a .env file. This practice is crucial for protecting sensitive credentials and ensuring they are not exposed in your codebase.
SOURCE: https://resend.com/docs/send-with-astro

LANGUAGE: Shell
CODE:
```
RESEND_API_KEY="re_xxxxxxxxx"
```

----------------------------------------

TITLE: Set Resend API Key Environment Variable
DESCRIPTION: Command to set the `RESEND_API_KEY` environment variable, which is crucial for authenticating with the Resend API when sending emails.
SOURCE: https://resend.com/docs/send-with-django-smtp

LANGUAGE: bash
CODE:
```
export RESEND_API_KEY="re_xxxxxxxxx"
```

----------------------------------------

TITLE: Resend Contacts API: Remove Contact Parameters and Response
DESCRIPTION: Defines the required parameters for deleting a contact, specifying that either 'id' or 'email' must be provided along with the 'audienceId'. It also describes the successful JSON response structure returned after a contact is deleted.
SOURCE: https://resend.com/docs/api-reference/contacts/delete-contact

LANGUAGE: APIDOC
CODE:
```
Path Parameters for Contact Removal:
  audienceId: string, required
    - Description: The Audience ID.
  id: string
    - Description: The Contact ID.
  email: string
    - Description: The Contact email.
    - Constraint: Either 'id' or 'email' must be provided.

Response for Contact Removal:
  {
    "object": "contact",
    "contact": "string",
    "deleted": boolean
  }
```

----------------------------------------

TITLE: List Broadcasts using Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to retrieve a list of broadcasts using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the `broadcasts.list()` method to fetch all available broadcast records.
SOURCE: https://resend.com/docs/api-reference/broadcasts/list-broadcasts

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.list();
```

----------------------------------------

TITLE: Send HTML Email using Resend Elixir SDK
DESCRIPTION: This Elixir code demonstrates how to initialize the Resend client using an API key retrieved from environment variables. It then proceeds to send an email by specifying the sender, recipient, subject, and the HTML content of the email, showcasing a basic email sending operation.
SOURCE: https://resend.com/docs/send-with-elixir

LANGUAGE: Elixir
CODE:
```
client = Resend.client(api_key: System.get_env("RESEND_API_KEY"))

Resend.Emails.send(client, %{
  from: "Acme <onboarding@resend.dev>",
  to: ["delivered@resend.dev"],
  subject: "hello world",
  html: "<strong>it works!</strong>"
})
```

----------------------------------------

TITLE: Playwright E2E Test: Call Resend API Directly
DESCRIPTION: This Playwright test (`e2e/app.spec.ts`) demonstrates an end-to-end test scenario where the application's email sending API endpoint is called directly. The test navigates to the endpoint and asserts that a successful response (indicated by the presence of an 'id' in the response body) is visible on the page. This approach tests the entire API flow, including the external Resend service, but consumes the account's sending quota.
SOURCE: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright

LANGUAGE: typescript
CODE:
```
import { test, expect } from '@playwright/test';

test('does not mock the response and calls the Resend API', async ({
  page,
}) => {
  // Go to the page
  await page.goto('http://localhost:3000/api/send');

  // Assert that the response is visible
  await expect(page.getByText('id')).toBeVisible();
});
```

----------------------------------------

TITLE: Send HTML Email using Resend PHP SDK
DESCRIPTION: This PHP code demonstrates how to initialize the Resend client and send a basic HTML email. It requires the Resend SDK to be installed and an API key for authentication, allowing for quick email dispatch.
SOURCE: https://resend.com/docs/send-with-php

LANGUAGE: PHP
CODE:
```
<?php

require __DIR__ . '/vendor/autoload.php';

$resend = Resend::client('re_xxxxxxxxx');

$resend->emails->send([
  'from' => 'Acme <onboarding@resend.dev>',
  'to' => ['delivered@resend.dev'],
  'subject' => 'hello world',
  'html' => '<strong>it works!</strong>',
]);
```

----------------------------------------

TITLE: Example BIMI DNS TXT Record Value
DESCRIPTION: This example provides a concrete instance of a BIMI DNS TXT record value, demonstrating how the version, logo URL, and certificate URL are formatted. Ensure your logo is served over HTTPS for proper display.
SOURCE: https://resend.com/docs/dashboard/domains/bimi

LANGUAGE: DNS
CODE:
```
v=BIMI1; l=https://vmc.digicert.com/00-00.svg; a=https://vmc.digicert.com/00-00.pem;
```

----------------------------------------

TITLE: Resend Email API Endpoints
DESCRIPTION: Comprehensive API for managing email sending and retrieval operations within the Resend platform. This includes sending single or batch emails, retrieving details of sent emails, updating email statuses, and canceling email deliveries.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: APIDOC
CODE:
```
POST /emails
  - Send Email
POST /emails/batch
  - Send Batch Emails
GET /emails/:email_id
  - Retrieve Email
PATCH /emails/:email_id
  - Update Email
POST /emails/:email_id/cancel
  - Cancel Email
```

----------------------------------------

TITLE: Configure Resend Swoosh Adapter in Phoenix Mailer
DESCRIPTION: This configuration snippet demonstrates how to set up the `Resend.Swoosh.Adapter` in your Phoenix application's Mailer. It shows how to fetch the API key from an environment variable, which is a common practice for development environments.
SOURCE: https://resend.com/docs/send-with-phoenix

LANGUAGE: Elixir
CODE:
```
config :my_app, MyApp.Mailer,
  adapter: Resend.Swoosh.Adapter,
  api_key: System.fetch_env!("RESEND_API_KEY")
```

----------------------------------------

TITLE: Resend Email Sending API: `reply_to` Parameter
DESCRIPTION: Details the `reply_to` parameter within Resend's email sending API, which allows specifying an address for replies to be directed to. This is a workaround for Resend's current lack of direct email receiving capabilities.
SOURCE: https://resend.com/docs/knowledge-base/how-can-i-receive-emails-with-resend

LANGUAGE: APIDOC
CODE:
```
Resend Email Sending API:
  send-email (POST /emails)
    - Description: Sends an email through the Resend service. While Resend does not receive emails, this API allows specifying where replies should be sent.
    - Parameters:
      - reply_to (string | string[], optional): An email address or an array of email addresses to which replies should be directed. If provided, any replies to the sent email will be routed to this address instead of the 'from' address.
        - Constraints: Must be a valid email address format.
        - Example Usage 1 (Existing Inbox): Set 'reply_to' to a personal or organizational email address (e.g., 'your_support_email@example.com').
        - Example Usage 2 (Slack Channel): Set 'reply_to' to a Slack channel email address (e.g., 'your_workspace+channel_id@slack.com') to receive replies as messages in Slack.
    - Returns: A success confirmation object upon successful email dispatch.
    - Related Information: Resend does not offer direct email receiving functionality at this time.
```

----------------------------------------

TITLE: Retrieve Email Details by ID (API Documentation)
DESCRIPTION: This section provides the API specification for retrieving a single email's details. It outlines the required path parameters and the comprehensive structure of the JSON response object, including various email attributes like sender, recipients, subject, and content.
SOURCE: https://resend.com/docs/api-reference/emails/retrieve-email

LANGUAGE: APIDOC
CODE:
```
GET /emails/{id}
  Path Parameters:
    id: string (required)
      - The unique identifier for the email.
      - See all available `last_event` types in the Email Events overview.

  Response Body (JSON Object):
    object: string
      - Type of the object, always 'email'.
    id: string
      - The unique ID of the email.
    to: array of strings
      - List of recipient email addresses.
    from: string
      - Sender's email address, including name if provided (e.g., 'Acme <onboarding@resend.dev>').
    created_at: string (ISO 8601 datetime)
      - Timestamp when the email was created.
    subject: string
      - The subject line of the email.
    html: string | null
      - HTML content of the email.
    text: string | null
      - Plain text content of the email.
    bcc: array of strings | null
      - List of BCC recipient email addresses.
    cc: array of strings | null
      - List of CC recipient email addresses.
    reply_to: array of strings | null
      - List of reply-to email addresses.
    last_event: string
      - The last event status of the email (e.g., 'delivered').
```

----------------------------------------

TITLE: Resend API: Common Body Parameters for Email/Broadcast Operations
DESCRIPTION: Defines the common body parameters used across various Resend API operations, including sending emails and managing broadcasts. These parameters cover recipient identification, sender details, subject, message content (HTML, plain text, or React component), and internal naming for broadcasts.
SOURCE: https://resend.com/docs/api-reference/broadcasts/update-broadcast

LANGUAGE: APIDOC
CODE:
```
audience_id: string
  - The ID of the audience you want to send to.
from: string
  - Sender email address. To include a friendly name, use the format "Your Name <sender@domain.com>".
subject: string
  - Email subject.
reply_to: string | string[]
  - Reply-to email address. For multiple addresses, send as an array of strings.
html: string
  - The HTML version of the message.
text: string
  - The plain text version of the message.
react: React.ReactNode
  - The React component used to write the message. *Only available in the Node.js SDK.*
name: string
  - The friendly name of the broadcast. Only used for internal reference.
```

----------------------------------------

TITLE: Resend API: Broadcast Update Response
DESCRIPTION: This JSON snippet represents the typical successful response received after updating a broadcast via the Resend API. It confirms the ID of the broadcast that was successfully updated.
SOURCE: https://resend.com/docs/api-reference/broadcasts/update-broadcast

LANGUAGE: json
CODE:
```
{
  "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
}
```

----------------------------------------

TITLE: Sample JSON Response for List Audiences
DESCRIPTION: This JSON object represents a typical successful response when listing audiences via the Resend API. It includes an 'object' type and a 'data' array containing audience details such as ID, name, and creation timestamp.
SOURCE: https://resend.com/docs/api-reference/audiences/list-audiences

LANGUAGE: JSON
CODE:
```
{
  "object": "list",
  "data": [
    {
      "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "name": "Registered Users",
      "created_at": "2023-10-06T22:59:55.977Z"
    }
  ]
}
```

----------------------------------------

TITLE: Update Resend Domain Settings in Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to update domain settings using the Resend SDK. It shows how to configure click tracking, open tracking, and TLS enforcement for a specific domain ID, and includes the expected JSON response from the API.
SOURCE: https://resend.com/docs/api-reference/domains/update-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.update({
  id: 'b8617ad3-b712-41d9-81a0-f7c3d879314e',
  openTracking: false,
  clickTracking: true,
  tls: 'enforced',
});
```

LANGUAGE: APIDOC
CODE:
```
Response:
{
  "object": "domain",
  "id": "b8617ad3-b712-41d9-81a0-f7c3d879314e"
}
```

----------------------------------------

TITLE: Send Email using Resend SDK with Bun and React
DESCRIPTION: This TypeScript code sets up a Bun server to send an email using the Resend SDK. It initializes Resend with an API key, imports the React email template, and sends a personalized email to a specified recipient when the server is accessed.
SOURCE: https://resend.com/docs/send-with-bun

LANGUAGE: TypeScript
CODE:
```
import { Resend } from 'resend';
import { EmailTemplate } from './email-template';

const resend = new Resend(process.env.RESEND_API_KEY);

const server = Bun.serve({
  port: 3000,
  async fetch() {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello World',
      react: EmailTemplate({ firstName: 'Vitor' }),
    });

    if (error) {
      return new Response(JSON.stringify({ error }));
    }

    return new Response(JSON.stringify({ data }));
  },
});

console.log(`Listening on http://localhost:${server.port} ...`);
```

----------------------------------------

TITLE: Retrieve a Single Broadcast (Node.js)
DESCRIPTION: Demonstrates how to retrieve a specific broadcast using the Resend Node.js SDK. This snippet initializes the Resend client with an API key and then calls the `broadcasts.get` method with the target broadcast's ID.
SOURCE: https://resend.com/docs/api-reference/broadcasts/get-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.get('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');
```

----------------------------------------

TITLE: DNS Record Lookup using nslookup Command
DESCRIPTION: Provides command-line examples for checking various DNS record types (DKIM, SPF, MX) using the `nslookup` utility, useful for verifying DNS configurations directly from the terminal. This helps confirm if records are publicly visible and correctly configured.
SOURCE: https://resend.com/docs/knowledge-base/what-if-my-domain-is-not-verifying

LANGUAGE: APIDOC
CODE:
```
nslookup Command-Line Tool:
  nslookup -type=TXT resend._domainkey.yourdomain.com
    - Description: Checks the DKIM TXT record for a given domain.
    - Parameters:
      - -type=TXT: Specifies the record type to query (TXT).
      - resend._domainkey.yourdomain.com: The specific hostname for the DKIM record.
    - Returns: The TXT record value for the DKIM.

  nslookup -type=TXT send.yourdomain.com
    - Description: Checks the SPF TXT record for a given domain.
    - Parameters:
      - -type=TXT: Specifies the record type to query (TXT).
      - send.yourdomain.com: The specific hostname for the SPF record.
    - Returns: The TXT record value for the SPF.

  nslookup -type=MX send.yourdomain.com
    - Description: Checks the MX record for a given domain.
    - Parameters:
      - -type=MX: Specifies the record type to query (MX).
      - send.yourdomain.com: The specific hostname for the MX record.
    - Returns: The MX record value for the domain.
```

----------------------------------------

TITLE: Configure Resend Swoosh Adapter for Production
DESCRIPTION: This snippet illustrates how to configure the `Resend.Swoosh.Adapter` specifically in `prod.exs` for a Phoenix application. This approach separates the adapter configuration from the API key, which should be managed securely in `runtime.exs` for production environments.
SOURCE: https://resend.com/docs/send-with-phoenix

LANGUAGE: Elixir
CODE:
```
config :my_app, MyApp.Mailer, adapter: Resend.Swoosh.Adapter
```

----------------------------------------

TITLE: Resend List Broadcasts API Response Structure
DESCRIPTION: This JSON snippet illustrates the expected response format when listing broadcasts via the Resend API. The response is an object containing a 'list' object and a 'data' array, where each element in 'data' represents a broadcast with properties like 'id', 'audience_id', 'status', 'created_at', 'scheduled_at', and 'sent_at'.
SOURCE: https://resend.com/docs/api-reference/broadcasts/list-broadcasts

LANGUAGE: APIDOC
CODE:
```
{
  "object": "list",
  "data": [
    {
      "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
      "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "status": "draft",
      "created_at": "2024-11-01T15:13:31.723Z",
      "scheduled_at": null,
      "sent_at": null
    },
    {
      "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
      "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "status": "sent",
      "created_at": "2024-12-01T19:32:22.980Z",
      "scheduled_at": "2024-12-02T19:32:22.980Z",
      "sent_at": "2024-12-02T19:32:22.980Z"
    }
  ]
}
```

----------------------------------------

TITLE: Send Email with Local Attachment using Resend (Node.js)
DESCRIPTION: This Node.js example illustrates sending an email with an attachment from a local file. The file's content is read, Base64 encoded, and passed to the `content` parameter. The `filename` parameter specifies the name of the attached file.
SOURCE: https://resend.com/docs/dashboard/emails/attachments

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';
import fs from 'fs';

const resend = new Resend('re_xxxxxxxxx');

const filepath = `${__dirname}/static/invoice.pdf`;
const attachment = fs.readFileSync(filepath).toString('base64');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'Receipt for your payment',
  text: '<p>Thanks for the payment</p>',
  attachments: [
    {
      content: attachment,
      filename: 'invoice.pdf',
    },
  ],
});
```

----------------------------------------

TITLE: Cancel a Scheduled Resend Email
DESCRIPTION: This snippet shows how to cancel a previously scheduled email using the Resend API's `emails.cancel` method. Once an email is canceled, it cannot be rescheduled. This action requires the unique ID of the email to be canceled.
SOURCE: https://resend.com/docs/dashboard/emails/schedule-email

LANGUAGE: Node.js
CODE:
```
resend.emails.cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');
```

----------------------------------------

TITLE: Install Resend Node.js SDK in RedwoodJS
DESCRIPTION: This command adds the Resend Node.js SDK as a dependency to your RedwoodJS API workspace, making it available for sending emails within your backend functions.
SOURCE: https://resend.com/docs/send-with-redwoodjs

LANGUAGE: Shell
CODE:
```
yarn workspace api add resend
```

----------------------------------------

TITLE: Create Resend Broadcast in Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to create a new broadcast using the Resend SDK. It initializes the Resend client with an API key and then calls the `broadcasts.create` method, specifying the audience ID, sender, subject, and HTML content.
SOURCE: https://resend.com/docs/api-reference/broadcasts/create-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.create({
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  from: 'Acme <onboarding@resend.dev>',
  subject: 'hello world',
  html: 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
});
```

----------------------------------------

TITLE: Send Email with Remote Attachment using Resend (Node.js)
DESCRIPTION: This Node.js example demonstrates how to send an email with an attachment by providing a remote URL to the file. The `path` parameter specifies the URL, and `filename` defines the name of the attached file in the email.
SOURCE: https://resend.com/docs/dashboard/emails/attachments

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'Receipt for your payment',
  html: '<p>Thanks for the payment</p>',
  attachments: [
    {
      path: 'https://resend.com/static/sample/invoice.pdf',
      filename: 'invoice.pdf',
    },
  ],
});
```

----------------------------------------

TITLE: Retrieve Audience with Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to retrieve a specific audience using the Resend SDK. It initializes the Resend client with an API key and then calls the `audiences.get` method with the audience ID.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.audiences.get('78261eea-8f8b-4381-83c6-79fa7120f1cf');
```

----------------------------------------

TITLE: Retrieve Resend Domain using Node.js SDK
DESCRIPTION: Demonstrates how to programmatically retrieve a specific domain using the Resend Node.js SDK. It initializes the SDK with an API key and then calls the `domains.get` method, passing the domain's unique identifier.
SOURCE: https://resend.com/docs/api-reference/domains/get-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.get('d91cd9bd-1176-453e-8fc1-35364d380206');
```

----------------------------------------

TITLE: Add Contact to Resend Audience via Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to programmatically add a new contact to a specified Resend audience using the Resend SDK. It initializes the Resend client with an API key and then calls the `contacts.create` method with the contact's details and the target audience ID.
SOURCE: https://resend.com/docs/dashboard/audiences/contacts

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.contacts.create({
email: 'steve.wozniak@gmail.com',
firstName: 'Steve',
lastName: 'Wozniak',
unsubscribed: false,
audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Define a React Email Template in TypeScript
DESCRIPTION: This TypeScript React component defines a reusable email template. It accepts a 'firstName' prop to personalize the welcome message, structuring the content for emails sent via the Resend API.
SOURCE: https://resend.com/docs/send-with-bun

LANGUAGE: TypeScript
CODE:
```
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}
```

----------------------------------------

TITLE: Schedule Resend Email with ISO 8601 Date Format
DESCRIPTION: This snippet shows how to schedule an email using the Resend API by providing the `scheduledAt` parameter with an ISO 8601 formatted date string (e.g., '2024-08-05T11:52:01.858Z'). This method offers precise control over the delivery time, often used for programmatic scheduling.
SOURCE: https://resend.com/docs/dashboard/emails/schedule-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

const oneMinuteFromNow = new Date(Date.now() + 1000 * 60).toISOString();

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  html: '<p>it works!</p>',
  scheduledAt: oneMinuteFromNow,
});
```

----------------------------------------

TITLE: Complete Resend Domain Verification and Troubleshooting
DESCRIPTION: Instructions for completing the domain verification process in Resend after DNS configuration and common troubleshooting steps for failed verification, including reviewing records and external guides.
SOURCE: https://resend.com/docs/knowledge-base/hetzner

LANGUAGE: APIDOC
CODE:
```
Method: Complete Domain Verification
  Description: Initiates and monitors the domain verification process within Resend after DNS records have been configured.
  Steps:
    1. Navigate to your domain in Resend.
    2. Click 'Verify DNS Records'.
  Expected Outcome: Verification typically completes within a few hours, though it may take up to 72 hours.

Method: Troubleshooting Domain Verification Failures
  Description: Provides common methods to diagnose and resolve issues when Resend domain verification fails or is pending.
  Common Issues & Solutions:
    - Issue: Resend shows domain verification failed.
      Solution: Review the records added to Hetzner carefully to rule out any copy-paste errors or typos.
    - Issue: Domain is still Pending after 72 hours.
      Solution: Consult the dedicated guide on 'What if my domain is not verifying' for advanced troubleshooting steps.
  Related Resources:
    - Guide: 'What if my domain is not verifying' (link provided in original documentation)
```

----------------------------------------

TITLE: Resend API Idempotency Key Usage for Email Endpoints
DESCRIPTION: Details the use of idempotency keys with Resend's `POST /emails` and `POST /emails/batch` API endpoints to ensure unique processing of email sending requests. Idempotency keys, up to 256 characters (UUID recommended), prevent duplicate sends within a 24-hour window, simplifying retry logic for both single and batch email operations.
SOURCE: https://resend.com/docs/dashboard/emails/idempotency-keys

LANGUAGE: APIDOC
CODE:
```
Idempotency Keys Overview:
  - Purpose: Ensure email requests are processed only once, even if sent multiple times.
  - Supported Endpoints: `POST /emails`, `POST /emails/batch`
  - Key Format: Up to 256 characters, unique per API request. UUID recommended.
  - Key Examples:
    - Single Email: `welcome-user/123456789`
    - Batch Email: `team-quota/123456789`
  - Retention: Idempotency keys are kept for 24 hours.

POST /emails
  - Description: Sends a single email.
  - Parameters (within options object):
    - `idempotencyKey`: string (Optional) - A unique key for this request to prevent duplicate processing.

POST /emails/batch
  - Description: Sends multiple emails in a single batch request.
  - Parameters (within options object):
    - `idempotencyKey`: string (Optional) - A unique key for the entire batch request to prevent duplicate processing.
```

----------------------------------------

TITLE: Retrieve Email by ID using Resend Node.js SDK
DESCRIPTION: Demonstrates how to retrieve a specific email using the Resend Node.js SDK. This snippet initializes the Resend client with an API key and then calls the `emails.get` method with the target email's unique ID to fetch its details.
SOURCE: https://resend.com/docs/api-reference/emails/retrieve-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.emails.get('37e4414c-5e25-4dbc-a071-43552a4bd53b');
```

----------------------------------------

TITLE: Run Supabase Edge Function Locally
DESCRIPTION: These commands are used to start the Supabase functions development server and then serve a specific function ('resend') locally. The `--no-verify-jwt` flag allows testing without JWT authentication.
SOURCE: https://resend.com/docs/send-with-supabase-edge-functions

LANGUAGE: Shell
CODE:
```
supabase functions start
supabase functions serve resend --no-verify-jwt
```

----------------------------------------

TITLE: Reschedule a Resend Email
DESCRIPTION: This snippet demonstrates how to update the scheduled time for an existing email using the Resend API's `emails.update` method. It requires the unique ID of the email to be updated and the new `scheduledAt` value, which can be a natural language string or an ISO 8601 date.
SOURCE: https://resend.com/docs/dashboard/emails/schedule-email

LANGUAGE: Node.js
CODE:
```
resend.emails.update({
  id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
  scheduledAt: 'in 1 min',
});
```

----------------------------------------

TITLE: Verify Resend Domain using Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to programmatically verify a domain using the Resend SDK. It initializes the Resend client with an API key and then calls the `domains.verify` method, passing the domain's unique ID.
SOURCE: https://resend.com/docs/api-reference/domains/verify-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.verify('d91cd9bd-1176-453e-8fc1-35364d380206');
```

----------------------------------------

TITLE: Resend API: Delete Audience Endpoint
DESCRIPTION: Documents the DELETE endpoint for removing an existing audience from Resend. It specifies the required path parameter `audience_id` and outlines the structure of a successful response.
SOURCE: https://resend.com/docs/api-reference/audiences/delete-audience

LANGUAGE: APIDOC
CODE:
```
DELETE /audiences/:audience_id
  - Description: Remove an existing audience.
  - Path Parameters:
    - audience_id: string (required)
      - Description: The Audience ID.
  - Success Response (200 OK):
    - object: "audience"
    - id: string (the ID of the deleted audience)
    - deleted: boolean (true)
```

----------------------------------------

TITLE: Sample JSON Response for Audience Retrieval
DESCRIPTION: This JSON object represents a typical response when successfully retrieving an audience from the Resend API. It includes the object type, unique ID, name of the audience, and its creation timestamp.
SOURCE: https://resend.com/docs/api-reference/audiences/get-audience

LANGUAGE: JSON
CODE:
```
{
  "object": "audience",
  "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  "name": "Registered Users",
  "created_at": "2023-10-06T22:59:55.977Z"
}
```

----------------------------------------

TITLE: Resend MCP Server Command-Line Arguments and Environment Variables
DESCRIPTION: This entry details the available command-line arguments and environment variables for configuring the Resend MCP server. These parameters control essential aspects like API key authentication, sender identity, and reply-to addresses, ensuring proper email sending functionality. If a sender email is not provided, the server will prompt for it during execution.
SOURCE: https://resend.com/docs/knowledge-base/mcp-server

LANGUAGE: APIDOC
CODE:
```
Resend MCP Server Configuration:

Command-Line Arguments (for Cursor integration):
  --key <YOUR_RESEND_API_KEY> (required)
    - Description: Your Resend API key for authentication.
  --sender <YOUR_SENDER_EMAIL> (optional)
    - Description: Your sender email address, which must be from a verified domain.
  --reply-to <YOUR_REPLY_TO_EMAIL> (optional)
    - Description: The email address to be used for replies.

Environment Variables (for Claude Desktop integration):
  RESEND_API_KEY=<YOUR_RESEND_API_KEY> (required)
    - Description: Your Resend API key for authentication.
  SENDER_EMAIL_ADDRESS=<YOUR_SENDER_EMAIL> (optional)
    - Description: Your sender email address, which must be from a verified domain.
  REPLY_TO_EMAIL_ADDRESS=<YOUR_REPLY_TO_EMAIL> (optional)
    - Description: The email address to be used for replies.
```

----------------------------------------

TITLE: Configure Resend Client for Dependency Injection in .NET
DESCRIPTION: This C# code configures the Resend client for dependency injection in a .NET application. It sets up options, registers an HTTP client, configures the API token from an environment variable, and registers the IResend interface with the ResendClient implementation.
SOURCE: https://resend.com/docs/send-with-dotnet

LANGUAGE: C#
CODE:
```
using Resend;

builder.Services.AddOptions();
builder.Services.AddHttpClient<ResendClient>();
builder.Services.Configure<ResendClientOptions>( o =>
{
    o.ApiToken = Environment.GetEnvironmentVariable( "RESEND_APITOKEN" )!;
} );
builder.Services.AddTransient<IResend, ResendClient>();
```

----------------------------------------

TITLE: Configure DNS Records for Resend Domain Verification on Hostinger
DESCRIPTION: Comprehensive guide for setting up MX, SPF (TXT), and DKIM (TXT) records on Hostinger to enable email sending through Resend. Includes details on record types, names, values, priorities, and TTLs, with important notes on domain omission and priority conflicts.
SOURCE: https://resend.com/docs/knowledge-base/hostinger

LANGUAGE: APIDOC
CODE:
```
DNS Record Configuration for Resend on Hostinger:

1. MX Record (SPF):
   - Type: MX
   - Name: send
   - Mail Server (Value): feedback-smtp.us-east-1.amazonses.com
   - Priority: 10 (Adjust if 10 is in use, e.g., 11 or 12)
   - TTL: 3600
   - Note: Omit your domain from the 'Name' field (e.g., use 'send' instead of 'send.example.com').

2. TXT Record (SPF):
   - Type: TXT
   - Name: send
   - TXT value: "v=spf1 include:amazonses.com ~all"
   - TTL: 3600
   - Note: Omit your domain from the 'Name' field (e.g., use 'send' instead of 'send.example.com').

3. TXT Record (DKIM):
   - Type: TXT
   - Name: resend._domainkey
   - TXT value: p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB (Example value, copy actual from Resend)
   - TTL: 3600
   - Note: Omit your domain from the 'Name' field (e.g., use 'resend._domainkey' instead of 'resend._domainkey.example.com').
```

----------------------------------------

TITLE: Retrieve Domain Details using Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to fetch the details of a specific domain using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the `domains.get` method, passing the domain ID as a parameter. This operation retrieves comprehensive information about the domain, including its status, creation date, and associated DNS records.
SOURCE: https://resend.com/docs/api-reference/domains/get-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.get('d91cd9bd-1176-453e-8fc1-35364d380206');
```

----------------------------------------

TITLE: Update Resend Domain with Node.js
DESCRIPTION: This Node.js code snippet demonstrates how to update an existing domain's tracking and TLS settings using the Resend SDK. It requires the domain's ID and allows specifying `openTracking`, `clickTracking`, and `tls` preferences.
SOURCE: https://resend.com/docs/api-reference/domains/update-domain

LANGUAGE: nodejs
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.update({
  id: 'b8617ad3-b712-41d9-81a0-f7c3d879314e',
  openTracking: false,
  clickTracking: true,
  tls: 'enforced',
});
```

----------------------------------------

TITLE: Update Scheduled Email with Resend API (Node.js)
DESCRIPTION: This Node.js code snippet demonstrates how to update a previously scheduled email using the Resend SDK. It sets a new 'scheduledAt' time for a specific email ID.
SOURCE: https://resend.com/docs/api-reference/emails/update-email

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

const oneMinuteFromNow = new Date(Date.now() + 1000 * 60).toISOString();

resend.emails.update({
  id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
  scheduledAt: oneMinuteFromNow,
});
```

----------------------------------------

TITLE: Send HTML Email with Resend in Nuxt.js Server Route
DESCRIPTION: This Nuxt.js server route demonstrates how to send an HTML email using the Resend Node.js SDK. It initializes the Resend client with an API key from environment variables and sends a basic 'Hello world' email with bold HTML content, returning the data or an error.
SOURCE: https://resend.com/docs/send-with-nuxt

LANGUAGE: TypeScript
CODE:
```
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

export default defineEventHandler(async () => {
  try {
    const data = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello world',
      html: '<strong>It works!</strong>'
    });

    return data;
  } catch (error) {
    return { error };
  }
});
```

----------------------------------------

TITLE: Resend SMTP Service Credentials
DESCRIPTION: This section provides the essential credentials required to configure any SMTP client, including Liferay, to connect to the Resend email sending service. It specifies the host, port, username, and how to use your API key as the password for authentication.
SOURCE: https://resend.com/docs/send-with-liferay-smtp

LANGUAGE: APIDOC
CODE:
```
Host: smtp.resend.com
Port: 465
Username: resend
Password: YOUR_API_KEY
```

----------------------------------------

TITLE: Configure Resend MCP Server for Cursor
DESCRIPTION: This JSON configuration snippet is used to integrate the Resend MCP server into Cursor's settings. It defines a new MCP server named 'resend' of type 'command', specifying the Node.js command to execute the server's build output. It includes a placeholder for your Resend API key and outlines optional command-line arguments for sender and reply-to email addresses.
SOURCE: https://resend.com/docs/knowledge-base/mcp-server

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "resend": {
      "type": "command",
      "command": "node ABSOLUTE_PATH_TO_MCP_SEND_EMAIL_PROJECT/build/index.js --key=YOUR_RESEND_API_KEY"
    }
  }
}
```

----------------------------------------

TITLE: Deploy Next.js Application to Vercel
DESCRIPTION: This command initiates the deployment of your Next.js application to Vercel. It packages your project and deploys it to the Vercel platform, making your API routes and other functionalities accessible in a production environment.
SOURCE: https://resend.com/docs/send-with-vercel-functions

LANGUAGE: bash
CODE:
```
vercel
```

----------------------------------------

TITLE: Sample JSON Response for Resend Domain Retrieval
DESCRIPTION: Illustrates the structure and content of a successful JSON response when retrieving a domain from the Resend API. It includes domain details such as ID, name, status, creation timestamp, region, and associated DNS records (SPF, DKIM, MX) with their respective properties.
SOURCE: https://resend.com/docs/api-reference/domains/get-domain

LANGUAGE: JSON
CODE:
```
{
  "object": "domain",
  "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
  "name": "example.com",
  "status": "not_started",
  "created_at": "2023-04-26T20:21:26.347412+00:00",
  "region": "us-east-1",
  "records": [
    {
      "record": "SPF",
      "name": "send",
      "type": "MX",
      "ttl": "Auto",
      "status": "not_started",
      "value": "feedback-smtp.us-east-1.amazonses.com",
      "priority": 10
    },
    {
      "record": "SPF",
      "name": "send",
      "value": "\"v=spf1 include:amazonses.com ~all\"",
      "type": "TXT",
      "ttl": "Auto",
      "status": "not_started"
    },
    {
      "record": "DKIM",
      "name": "resend._domainkey",
      "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
      "type": "TXT",
      "status": "not_started",
      "ttl": "Auto"
    }
  ]
}
```

----------------------------------------

TITLE: Delete Resend Domain using Node.js SDK
DESCRIPTION: This code snippet demonstrates how to programmatically delete a domain using the Resend Node.js SDK. It initializes the Resend client with an API key and then calls the 'remove' method on the 'domains' object with the target domain's ID.
SOURCE: https://resend.com/docs/api-reference/domains/delete-domain

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.domains.remove('d91cd9bd-1176-453e-8fc1-35364d380206');
```

----------------------------------------

TITLE: Add dotenvy crate for environment variables
DESCRIPTION: This command adds the `dotenvy` crate to the Rust project, enabling the loading of environment variables from a `.env` file. This is a common practice for managing sensitive information like API keys securely.
SOURCE: https://resend.com/docs/send-with-rust

LANGUAGE: Bash
CODE:
```
cargo add dotenvy
```

----------------------------------------

TITLE: Delete Contact using Resend Node.js SDK
DESCRIPTION: This Node.js code snippet demonstrates how to delete a contact from an audience using the Resend SDK. It shows two methods: deleting by contact ID and deleting by contact email, both requiring the audience ID.
SOURCE: https://resend.com/docs/api-reference/contacts/delete-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

// Delete by contact id
resend.contacts.remove({
  id: '520784e2-887d-4c25-b53c-4ad46ad38100',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});

// Delete by contact email
resend.contacts.remove({
  email: 'acme@example.com',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Configure MX Record for Resend on IONOS
DESCRIPTION: Instructions for adding an MX (Mail Exchange) record in IONOS, specifying the mail server for Resend. It details the fields to populate, such as Name, Points to, and Priority, and provides an example mapping for correct configuration.
SOURCE: https://resend.com/docs/knowledge-base/ionos

LANGUAGE: APIDOC
CODE:
```
MX Record Configuration:
  Type: MX Record
  Name: send (or send.subdomain if applicable)
  Points to: feedback-smtp.us-east-1.amazonses.com (Value from Resend)
  Priority: 10 (or slightly higher, e.g., 11, 12, if 10 is in use)
  TTL: 1 hour (default)

Steps:
1. On the 'Add a DNS Record' page, select 'MX'.
2. Type 'send' for the 'Name' of the record.
3. Copy the MX Value from Resend into the 'Points to' field.
4. Use the default 'Priority' of '10'.
5. Use the default TTL of '1 hour'.
6. Select 'Save'.
```

----------------------------------------

TITLE: Configure and send email with Nodemailer and Resend SMTP
DESCRIPTION: This TypeScript code snippet illustrates how to set up Nodemailer to send emails through Resend's SMTP server. It defines a transporter with the necessary host, port, and authentication credentials (using a Resend API key), then sends a basic HTML email.
SOURCE: https://resend.com/docs/send-with-nodemailer-smtp

LANGUAGE: typescript
CODE:
```
import nodemailer from 'nodemailer';

async function main() {
  const transporter = nodemailer.createTransport({
    host: 'smtp.resend.com',
    secure: true,
    port: 465,
    auth: {
      user: 'resend',
      pass: 're_xxxxxxxxx',
    },
  });

  const info = await transporter.sendMail({
    from: 'onboarding@resend.dev',
    to: 'delivered@resend.dev',
    subject: 'Hello World',
    html: '<strong>It works!</strong>',
  });

  console.log('Message sent: %s', info.messageId);
}

main().catch(console.error);
```

----------------------------------------

TITLE: Delete Resend Audience using Node.js SDK
DESCRIPTION: Demonstrates how to programmatically delete an audience using the Resend Node.js SDK. This snippet initializes the SDK with an API key and calls the `audiences.remove` method with the target audience ID.
SOURCE: https://resend.com/docs/api-reference/audiences/delete-audience

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

resend.audiences.remove('78261eea-8f8b-4381-83c6-79fa7120f1cf');
```

----------------------------------------

TITLE: Resend SMTP Credentials for Supabase Integration
DESCRIPTION: This section provides the essential SMTP credentials required to configure Supabase for sending emails via Resend. These details include the host server address, the port number for secure communication, the fixed username, and the placeholder for your Resend API key which serves as the password.
SOURCE: https://resend.com/docs/send-with-supabase-smtp

LANGUAGE: APIDOC
CODE:
```
Host: smtp.resend.com
Port: 465
Username: resend
Password: YOUR_API_KEY
```

----------------------------------------

TITLE: Configure DMARC DNS TXT Record
DESCRIPTION: This snippet details the structure and parameters for a DMARC DNS TXT record, essential for email authentication. It explains how to set up the record to prevent email spoofing and receive aggregate reports, starting with a non-enforcing policy for safe deployment.
SOURCE: https://resend.com/docs/dashboard/domains/dmarc

LANGUAGE: APIDOC
CODE:
```
DMARC DNS TXT Record Configuration:

Record Name: _dmarc.yourdomain.com
Record Type: TXT
Record Value: v=DMARC1; p=none; rua=mailto:dmarcreports@yourdomain.com;

Parameters:
  v (Version):
    Description: Specifies the DMARC protocol version.
    Type: String
    Value: DMARC1 (required)

  p (Policy):
    Description: Defines the policy for messages that fail DMARC checks.
    Type: String
    Options:
      - none: Monitor only, no action taken on failed messages. Recommended for initial deployment.
      - quarantine: Mark failed messages as suspicious (e.g., move to spam).
      - reject: Block failed messages entirely.

  rua (Reporting URI of Aggregate):
    Description: Email address to send aggregate DMARC reports. These reports provide insights into email sources and authentication results.
    Type: String (mailto: URI)
    Format: mailto:email@example.com
    Constraint: Must be a valid email address that can receive emails.
```

----------------------------------------

TITLE: Update Resend Broadcast using Node.js SDK
DESCRIPTION: This snippet demonstrates how to update an existing broadcast using the Resend Node.js SDK. It requires the broadcast's ID and the new HTML content. This operation is specifically for broadcasts that were originally created via the API.
SOURCE: https://resend.com/docs/api-reference/broadcasts/update-broadcast

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.update({
  id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
  html: 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
});
```

LANGUAGE: JSON
CODE:
```
{
  "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
}
```

----------------------------------------

TITLE: Configure Resend SMTP credentials in .env
DESCRIPTION: This snippet demonstrates how to set up environment variables in a `.env` file for Resend's SMTP service. These variables are crucial for NextAuth.js to connect to the SMTP server, providing the host, port, authentication credentials (user and API key as password), and the 'from' email address.
SOURCE: https://resend.com/docs/send-with-nextauth-smtp

LANGUAGE: dotenv
CODE:
```
EMAIL_SERVER_USER=resend
EMAIL_SERVER_PASSWORD=YOUR_API_KEY
EMAIL_SERVER_HOST=smtp.resend.com
EMAIL_SERVER_PORT=465
EMAIL_FROM=onboarding@resend.dev
```

----------------------------------------

TITLE: Send Email with Resend Facade in Laravel
DESCRIPTION: This PHP code illustrates sending an email directly using the `Resend` facade provided by the Resend Laravel package. It allows for direct interaction with the Resend API, specifying sender, recipient, subject, and HTML content for the email.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Mail\OrderShipped;
use App\Models\Order;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Resend\Laravel\Facades\Resend;

class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     */
    public function store(Request $request): RedirectResponse
    {
        $order = Order::findOrFail($request->order_id);

        // Ship the order...

        Resend::emails()->send([
            'from' => 'Acme <onboarding@resend.dev>',
            'to' => [$request->user()->email],
            'subject' => 'hello world',
            'html' => (new OrderShipped($order))->render(),
        ]);

        return redirect('/orders');
    }
}
```

----------------------------------------

TITLE: Gandi DNS Record Configuration for Resend Domain Verification
DESCRIPTION: Comprehensive guide for setting up required DNS records (MX, TXT SPF, and TXT DKIM) on Gandi to ensure successful domain verification with Resend. This includes specific values, field mappings, and critical notes for each record type.
SOURCE: https://resend.com/docs/knowledge-base/gandi

LANGUAGE: APIDOC
CODE:
```
DNS Record Configuration for Resend on Gandi:

MX SPF Record:
  Purpose: Adds an MX record for email sending via Resend.
  Parameters:
    Type: MX
    TTL: 10800 (default)
    Name: send
    Priority: 10 (or slightly higher if 10 is in use, e.g., 11, 12)
    Hostname: MX Value from Resend (e.g., feedback-smtp.us-east-1.amazonses.com.)
  Notes:
    - Gandi requires a trailing period for the MX record's Hostname.
    - Resend copies the value with the trailing period; do not remove it.
    - Do not use the same priority for multiple MX records.

TXT SPF Record:
  Purpose: Adds a TXT record for Sender Policy Framework (SPF) to prevent email spoofing.
  Parameters:
    Type: TXT
    TTL: 10800 (default)
    Name: send
    Text value: TXT Value from Resend (e.g., "v=spf1 include:amazonses.com ~all")
  Notes:
    - Omit your domain from the 'Text value' when pasting (e.g., paste 'send' instead of 'send.example.com').

TXT DKIM Records:
  Purpose: Adds a TXT record for DomainKeys Identified Mail (DKIM) for email authentication.
  Parameters:
    Type: TXT
    TTL: 10800 (or '1 hour' as per example table)
    Host name: resend._domainkey
    TXT value: Record value from Resend (e.g., p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB)
  Notes:
    - Omit your domain from the 'Host name' when pasting (e.g., paste 'resend._domainkey' instead of 'resend._domainkey.example.com').

Verification:
  After adding records, click 'Verify DNS Records' on your Domain in Resend. Verification may take a few hours.
```

----------------------------------------

TITLE: Send HTML Email using Injected Resend Client in .NET
DESCRIPTION: This C# example shows how to send an HTML email using an injected IResend instance. It constructs an EmailMessage object, populating fields like sender, recipient, subject, and HTML body, then sends the email asynchronously using the EmailSendAsync method.
SOURCE: https://resend.com/docs/send-with-dotnet

LANGUAGE: C#
CODE:
```
using Resend;

public class FeatureImplementation
{
    private readonly IResend _resend;

    public FeatureImplementation( IResend resend )
    {
        _resend = resend;
    }

    public Task Execute()
    {
        var message = new EmailMessage();
        message.From = "Acme <onboarding@resend.dev>";
        message.To.Add( "delivered@resend.dev" );
        message.Subject = "hello world";
        message.HtmlBody = "<strong>it works!</strong>";

        await _resend.EmailSendAsync( message );
    }
}
```

----------------------------------------

TITLE: Example DMARC Record for Apple Branded Mail
DESCRIPTION: This DMARC record string demonstrates the required policy (`p=quarantine;` or `p=reject;`) and percentage (`pct=100;`) for Apple Branded Mail. It also includes a `rua` tag for aggregate reports, which is recommended for monitoring DMARC compliance.
SOURCE: https://resend.com/docs/knowledge-base/how-do-i-set-set-up-apple-branded-mail

LANGUAGE: Configuration
CODE:
```
"v=DMARC1; p=quarantine; pct=100; rua=mailto:dmarcreports@example.com"
```

----------------------------------------

TITLE: Initialize a new Rust project
DESCRIPTION: This snippet demonstrates how to create a new Rust project using Cargo and navigate into its directory, serving as the initial setup for integrating the Resend SDK.
SOURCE: https://resend.com/docs/send-with-rust

LANGUAGE: Bash
CODE:
```
cargo init resend-rust-example
cd resend-rust-example
```

----------------------------------------

TITLE: Configure Resend MCP Server for Claude Desktop
DESCRIPTION: This JSON configuration snippet integrates the Resend MCP server into Claude Desktop's settings. It defines a new MCP server named 'resend', specifying the Node.js command and arguments to execute the server's build output. It also demonstrates how to pass the Resend API key and optional sender/reply-to email addresses as environment variables, which is a common practice for sensitive information.
SOURCE: https://resend.com/docs/knowledge-base/mcp-server

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "resend": {
      "command": "node",
      "args": ["ABSOLUTE_PATH_TO_MCP_SEND_EMAIL_PROJECT/build/index.js"],
      "env": {
        "RESEND_API_KEY": "YOUR_RESEND_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Delete Contact using Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to remove a contact from a specific audience using the Resend Node.js SDK. It shows two methods: deleting by the contact's unique ID and deleting by the contact's email address, both requiring the audience ID.
SOURCE: https://resend.com/docs/api-reference/contacts/delete-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

// Delete by contact id
resend.contacts.remove({
  id: '520784e2-887d-4c25-b53c-4ad46ad38100',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});

// Delete by contact email
resend.contacts.remove({
  email: 'acme@example.com',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Configure TXT DKIM Records for Strato DNS
DESCRIPTION: Guide for adding a TXT record for DomainKeys Identified Mail (DKIM) on Strato DNS. This record is essential for email authentication, helping to prevent spoofing and phishing by verifying the sender's identity.
SOURCE: https://resend.com/docs/knowledge-base/strato

LANGUAGE: APIDOC
CODE:
```
TXT DKIM Record Configuration for Strato DNS:

Purpose: Add a TXT record for DKIM authentication to verify the sender's identity and prevent email spoofing.

Fields Mapping (Resend to Strato):
- Type: TXT Record
- Name: send
- Value: p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB (example value)

Steps:
1. On the same TXT and CNAME manage page.
2. Click 'Create another record'.
3. Choose 'TXT' type.
4. Add 'resend._domainkey' for the 'Name' record.
5. Copy the record value from Resend into the TXT value field (omit your domain from the record values, e.g., use 'resend._domainkey' instead of 'resend._domainkey.example.com').
6. Save settings.

Note: DKIM records are case-sensitive and must match exactly.
```

----------------------------------------

TITLE: Example DMARC Record for BIMI Compliance
DESCRIPTION: This DNS TXT record string demonstrates a DMARC policy configured for BIMI, requiring a 'quarantine' policy and 100% reporting. This specific configuration is essential for displaying brand logos in email inboxes according to BIMI standards.
SOURCE: https://resend.com/docs/dashboard/domains/bimi

LANGUAGE: DNS
CODE:
```
"v=DMARC1; p=quarantine; pct=100; rua=mailto:dmarcreports@example.com"
```

----------------------------------------

TITLE: Send Email using PHPMailer with Resend SMTP
DESCRIPTION: This PHP code snippet demonstrates how to configure PHPMailer to send an email through Resend's SMTP service. It includes setting up the SMTP host, port, authentication credentials (username and API key), and defining the sender, recipient, subject, and HTML body of the email. Error handling is also included.
SOURCE: https://resend.com/docs/send-with-phpmailer-smtp

LANGUAGE: php
CODE:
```
<?php

// Include Composer autoload file to load PHPMailer classes
require __DIR__ . '/vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

$mail = new PHPMailer(true);

try {
    $mail->isSMTP();
    $mail->Host = 'smtp.resend.com';
    $mail->SMTPAuth = true;
    $mail->Username = 'resend';
    $mail->Password = 're_xxxxxxxxx';
    $mail->SMTPSecure = 'tls';
    $mail->Port = 587;

    // Set email format to HTML
    $mail->isHTML(true);

    $mail->setFrom('onboarding@resend.dev');
    $mail->addAddress('delivered@resend.dev');
    $mail->Subject = 'Hello World';
    $mail->Body = '<strong>It works!</strong>';

    $mail->send();

    // Log the successfully sent message
    echo 'Email successfully sent';
} catch (Exception $e) {
    // Log the detailed error for debugging
    error_log('Mailer Error: ' . $mail->ErrorInfo);
    // Show a generic error message to the user
    echo 'There was an error sending the email.';
}
```

----------------------------------------

TITLE: Example G Suite MX Record for Incoming Mail
DESCRIPTION: This snippet shows a typical MX record configuration for a domain using G Suite. It directs incoming mail for 'resend.com' to Google's mail servers with a priority of 1, illustrating how an existing inbox provider's MX record might look.
SOURCE: https://resend.com/docs/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records

LANGUAGE: DNS
CODE:
```
resend.com     MX    1 alt3.aspmx.l.google.com.
```

----------------------------------------

TITLE: AWS Route 53 DNS Record Configuration for Resend Domain Verification
DESCRIPTION: This API documentation details the required DNS record configurations (MX, TXT SPF, and TXT DKIM) in AWS Route 53 to successfully verify a domain for use with Resend's email sending services. It outlines the specific record types, names, values, and other parameters, along with important notes for each configuration.
SOURCE: https://resend.com/docs/knowledge-base/route53

LANGUAGE: APIDOC
CODE:
```
AWS Route 53 DNS Record Configuration for Resend:

1. MX SPF Record:
   - Purpose: Specifies the mail exchange server for email delivery and SPF (Sender Policy Framework) for email authentication.
   - Route 53 Fields:
     - Record Type: MX
     - Record Name: send
     - Value: 10 feedback-smtp.us-east-1.amazonses.com (Priority '10' must be included in the value field. Adjust priority if '10' is in use, e.g., '11' or '12'.)
     - TTL: Use Route 53 Default (300)
     - Routing policy: Simple routing
   - Notes: Omit your domain from the record value (e.g., use 'send' instead of 'send.example.com').

2. TXT SPF Record:
   - Purpose: Defines authorized senders for your domain to prevent email spoofing.
   - Route 53 Fields:
     - Record type: TXT
     - Record name: send
     - Value: "v=spf1 include:amazonses.com ~all"
     - TTL: Use Route 53 Default (300)
     - Routing policy: Simple routing
   - Notes: Omit your domain from the record value (e.g., use 'send' instead of 'send.example.com').

3. TXT DKIM Records:
   - Purpose: Provides a method for email senders to cryptographically sign email messages, allowing receivers to verify the authenticity of the sender.
   - Route 53 Fields:
     - Record type: TXT
     - Record name: resend._domainkey
     - Value: p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB (This value is copied from your Resend domain settings and will be unique.)
     - TTL: Use Route 53 Default (300)
     - Routing policy: Simple routing
   - Notes: Omit your domain from the record value (e.g., use 'resend._domainkey' instead of 'resend._domainkey.example.com').
```

----------------------------------------

TITLE: Resend Email Webhook Events
DESCRIPTION: This section details webhook events triggered by email-related activities. The `email.opened` event occurs when a recipient opens an email. The `email.clicked` event is triggered when a recipient clicks on a link within an email. The `email.failed` event indicates that an email could not be sent due to various issues such as invalid recipients, API key problems, or quota limits.
SOURCE: https://resend.com/docs/dashboard/webhooks/event-types

LANGUAGE: JSON
CODE:
```
{
  "type": "email.opened",
  "created_at": "2024-02-22T23:41:12.126Z",
  "data": {
    "created_at": "2024-02-22T23:41:11.894719+00:00",
    "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Sending this example",
    "tags": [
      {
        "name": "category",
        "value": "confirm_email"
      }
    ]
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "type": "email.clicked",
  "created_at": "2024-11-22T23:41:12.126Z",
  "data": {
    "created_at": "2024-11-22T23:41:11.894719+00:00",
    "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "click": {
      "ipAddress": "122.115.53.11",
      "link": "https://resend.com",
      "timestamp": "2024-11-24T05:00:57.163Z",
      "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15"
    },
    "subject": "Sending this example",
    "tags": [
      {
        "name": "category",
        "value": "confirm_email"
      }
    ]
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "type": "email.failed",
  "created_at": "2024-11-22T23:41:12.126Z",
  "data": {
    "created_at": "2024-11-22T23:41:11.894719+00:00",
    "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Sending this example",
    "failed": {
      "reason": "reached_daily_quota"
    },
    "tags": [
      {
        "name": "category",
        "value": "confirm_email"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Configure Rails Action Mailer for Resend SMTP
DESCRIPTION: This snippet configures the Rails application's `ActionMailer` to use SMTP for email delivery. It specifies Resend's SMTP server address, port, username, password (using an environment variable for the API key), and enables TLS encryption.
SOURCE: https://resend.com/docs/send-with-rails-smtp

LANGUAGE: Ruby
CODE:
```
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :address   => 'smtp.resend.com',
  :port      => 465,
  :user_name => 'resend',
  :password  => ENV['RESEND_API_KEY'],
  :tls => true
}
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to install the Resend Node.js SDK using npm, yarn, or pnpm, which is the first step to integrate Resend into your project.
SOURCE: https://resend.com/docs/send-with-astro

LANGUAGE: JavaScript
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Install Resend .NET SDK
DESCRIPTION: This snippet demonstrates how to add the Resend NuGet package to a .NET project using the dotnet CLI.
SOURCE: https://resend.com/docs/send-with-dotnet

LANGUAGE: C#
CODE:
```
dotnet add package Resend
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This command installs the Resend Node.js SDK into your project, making it available for sending emails. It can be executed using npm, yarn, or pnpm.
SOURCE: https://resend.com/docs/send-with-hono

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Initialize and Prepare UserMailer Instance
DESCRIPTION: Demonstrates how to initialize the `UserMailer` class with specific user parameters using `with()` and prepare an email message object by calling the mailer method (e.g., `welcome_email`). This step creates the email object before sending.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: Ruby
CODE:
```
u = User.new name: "derich"
mailer = UserMailer.with(user: u).welcome_email

# => #<Mail::Message:153700, Multipart: false, Headers: <From: from@example.com>, <To: to@example.com>, <Subject: hello world>, <Mime-Version: 1.0>...
```

----------------------------------------

TITLE: Install Resend Python SDK
DESCRIPTION: This command installs the official Resend Python SDK using pip, enabling you to use Resend's email sending functionalities within your Python projects.
SOURCE: https://resend.com/docs/send-with-fastapi

LANGUAGE: Python
CODE:
```
pip install resend
```

----------------------------------------

TITLE: Install Resend Elixir SDK Dependency
DESCRIPTION: This snippet shows how to add the `resend` library to your Phoenix project's `mix.exs` file, specifying the version for dependency management. This is the first step to integrate the Resend SDK into your Elixir application.
SOURCE: https://resend.com/docs/send-with-phoenix

LANGUAGE: Elixir
CODE:
```
def deps do
  [
    {:resend, "~> 0.4.0"}
  ]
end
```

----------------------------------------

TITLE: DMARC Protocol Parameters and Policies
DESCRIPTION: This section details the various parameters used in a DMARC TXT record and the different policy values that dictate how email failing DMARC authentication should be handled. Understanding these parameters is crucial for configuring effective email security and reporting.
SOURCE: https://resend.com/docs/dashboard/domains/dmarc

LANGUAGE: APIDOC
CODE:
```
DMARC Policy (p) Values:
  p=none;
    - Purpose: Allow all email. Primarily used for monitoring DMARC failures without affecting delivery.
  p=quarantine;
    - Purpose: Send messages that fail DMARC authentication to the recipient's spam or junk folder.
  p=reject;
    - Purpose: Bounce or reject the delivery of emails that fail DMARC authentication.

DMARC Protocol Parameters:
  v
    - Purpose: Protocol version.
    - Example: v=DMARC1
  pct
    - Purpose: Percentage of messages subjected to DMARC filtering. Not widely followed by mailbox providers.
    - Example: pct=20
  ruf
    - Purpose: Reporting URI for forensic reports (failure reports). Not widely followed by mailbox providers.
    - Example: ruf=mailto:authfail@example.com
  rua
    - Purpose: Reporting URI of aggregate reports (summary reports).
    - Example: rua=mailto:aggrep@example.com
  p
    - Purpose: Policy for the organizational domain (main domain).
    - Example: p=quarantine
  sp
    - Purpose: Policy for subdomains of the organizational domain.
    - Example: sp=reject
  adkim
    - Purpose: Alignment mode for DKIM (DomainKeys Identified Mail).
    - Values: s (strict), r (relaxed)
    - Example: adkim=s
  aspf
    - Purpose: Alignment mode for SPF (Sender Policy Framework).
    - Values: s (strict), r (relaxed)
    - Example: aspf=r
```

----------------------------------------

TITLE: Install Resend Java SDK Dependency
DESCRIPTION: Instructions for installing the Resend Java SDK dependency using Gradle, which is required to use the SDK in a Java project.
SOURCE: https://resend.com/docs/send-with-java

LANGUAGE: Gradle
CODE:
```
implementation 'com.resend:resend-java:3.1.0'
```

----------------------------------------

TITLE: Install NextAuth.js package
DESCRIPTION: This command installs the NextAuth.js library, a comprehensive authentication solution designed for Next.js applications. It is a prerequisite for setting up email-based authentication.
SOURCE: https://resend.com/docs/send-with-nextauth-smtp

LANGUAGE: shell
CODE:
```
npm install next-auth
```

----------------------------------------

TITLE: Resend SMTP Configuration Credentials
DESCRIPTION: This snippet provides the necessary SMTP credentials (host, port, username, and password) required to connect to Resend's email sending service. These details are crucial for configuring any SMTP client or platform, such as Customer.io, to send emails via Resend.
SOURCE: https://resend.com/docs/send-with-customer-io-smtp

LANGUAGE: APIDOC
CODE:
```
Host: smtp.resend.com
Port: 465
Username: resend
Password: YOUR_API_KEY
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This command installs the Resend Node.js SDK into your project using npm, making it available for use in your Next.js application.
SOURCE: https://resend.com/docs/send-with-nextjs

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Create New Supabase Edge Function
DESCRIPTION: This command initializes a new Supabase Edge Function project locally, creating the necessary directory structure and boilerplate files for a function named 'resend'.
SOURCE: https://resend.com/docs/send-with-supabase-edge-functions

LANGUAGE: Shell
CODE:
```
supabase functions new resend
```

----------------------------------------

TITLE: Resend SMTP Connection Parameters
DESCRIPTION: This documentation block specifies the required parameters for configuring an SMTP client, such as Metabase, to connect to and send emails through the Resend SMTP service. It includes the server address, port, and authentication credentials.
SOURCE: https://resend.com/docs/send-with-metabase-smtp

LANGUAGE: APIDOC
CODE:
```
SMTP Connection Parameters:
  Host: smtp.resend.com
    - Type: string
    - Description: The hostname for the Resend SMTP server.
  Port: 465
    - Type: integer
    - Description: The port number for the SMTP connection. Standard secure SMTP port.
  Username: resend
    - Type: string
    - Description: The username for SMTP authentication, typically 'resend'.
  Password: YOUR_API_KEY
    - Type: string
    - Description: Your Resend API key, used as the password for SMTP authentication. Replace 'YOUR_API_KEY' with your actual Resend API key.
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This command installs the Resend Node.js SDK into your project using npm, making its functionalities available for sending emails.
SOURCE: https://resend.com/docs/send-with-nodejs

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Create React Email Template for Resend
DESCRIPTION: Defines a reusable React functional component that serves as an email template. It accepts `firstName` as a prop, allowing for dynamic content within the email sent via Resend.
SOURCE: https://resend.com/docs/send-with-hono

LANGUAGE: TypeScript
CODE:
```
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}
```

----------------------------------------

TITLE: Create a React Email Template for Resend
DESCRIPTION: This TypeScript code defines a React component for an email template, accepting `firstName` as a prop and rendering a welcome message. It's designed to be used with the Resend email sending service.
SOURCE: https://resend.com/docs/send-with-cloudflare-workers

LANGUAGE: typescript
CODE:
```
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}

export default EmailTemplate;
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This command installs the Resend Node.js SDK using npm, making it available for use in your project.
SOURCE: https://resend.com/docs/send-with-cloudflare-workers

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: BIMI DNS TXT Record Parameters Reference
DESCRIPTION: This section details the various parameters used within a BIMI DNS TXT record. Each parameter plays a crucial role in defining the BIMI configuration, including the BIMI version, the location of the logo, the certificate, and optional selectors for multiple logos.
SOURCE: https://resend.com/docs/dashboard/domains/bimi

LANGUAGE: APIDOC
CODE:
```
BIMI DNS TXT Record Parameters:

- v: Version of BIMI
  Type: String
  Example: v=BIMI1
  Description: Specifies the version of the BIMI standard being used.

- l: Logo URL
  Type: URL (HTTPS)
  Example: l=https://vmc.digicert.com/00-00.svg
  Description: A publicly accessible HTTPS URL pointing to your verified logo in SVG Tiny P/S format.

- a: Certificate URL
  Type: URL (HTTPS)
  Example: a=https://vmc.digicert.com/00-00.pem
  Description: A publicly accessible HTTPS URL pointing to your Verified Mark Certificate (VMC) or Common Mark Certificate (CMC) in PEM format.

- s: Selector
  Type: String
  Example: s=springlogo
  Description: An optional parameter used to specify a selector for multiple logos, allowing different logos for different contexts or campaigns.
```

----------------------------------------

TITLE: Install Resend Elixir SDK Dependency
DESCRIPTION: This code snippet shows how to add the `resend` library as a dependency in your Elixir project's `mix.exs` file. This is a standard procedure for managing external libraries in Elixir applications, ensuring the SDK is available for use.
SOURCE: https://resend.com/docs/send-with-elixir

LANGUAGE: Elixir
CODE:
```
def deps do
  [
    {:resend, "~> 0.4.0"}
  ]
end
```

----------------------------------------

TITLE: Install Resend Rust SDK and Tokio
DESCRIPTION: This snippet provides the `cargo add` commands to include the `resend-rs` SDK and the `tokio` runtime with necessary features for an Axum application. These are essential dependencies for building the email sending service.
SOURCE: https://resend.com/docs/send-with-axum

LANGUAGE: Rust
CODE:
```
cargo add resend-rs
cargo add tokio -F macros,rt-multi-thread
```

----------------------------------------

TITLE: Resend Webhook Service Specifications
DESCRIPTION: This section details the operational specifications for Resend webhooks, including the retry schedule for failed deliveries and the list of IP addresses from which webhook POST requests originate. These details are crucial for configuring server firewalls and understanding webhook reliability.
SOURCE: https://resend.com/docs/dashboard/webhooks

LANGUAGE: APIDOC
CODE:
```
Webhook Retry Schedule:
  - If Resend does not receive a 200 response from a webhook server, it will retry the webhook delivery.
  - Each message is attempted based on the following schedule, with each period starting after the failure of the preceding attempt:
    - 5 seconds
    - 5 minutes
    - 30 minutes
    - 2 hours
    - 5 hours
    - 10 hours
  - After all attempts fail, the message is marked as failed, and a `message.attempt.exhausted` webhook type is sent.

Webhook Source IP Addresses:
  - If your server requires an allowlist, Resend webhooks originate from the following IP addresses:
    - IPv4:
      - 44.228.126.217
      - 50.112.21.217
      - 52.24.126.164
      - 54.148.139.208
    - IPv6:
      - 2600:1f24:64:8000::/52
```

----------------------------------------

TITLE: Install Resend Python SDK with Pip
DESCRIPTION: This command installs the Resend Python SDK using pip, the Python package installer, making the necessary libraries available for use in your Python projects.
SOURCE: https://resend.com/docs/send-with-flask

LANGUAGE: Python
CODE:
```
pip install resend
```

----------------------------------------

TITLE: Resend Domain Webhook Event Payloads
DESCRIPTION: Sample JSON payloads for `domain.created`, `domain.updated`, and `domain.deleted` webhook events. These events are triggered when a domain's status changes within the Resend platform, providing comprehensive details about the domain and its associated DNS records.
SOURCE: https://resend.com/docs/dashboard/webhooks/event-types

LANGUAGE: JSON
CODE:
```
{
  "type": "domain.created",
  "created_at": "2024-11-17T19:32:22.980Z",
  "data": {
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
    "name": "example.com",
    "status": "not_started",
    "created_at": "2024-04-26T20:21:26.347412+00:00",
    "region": "us-east-1",
    "records": [
      {
        "record": "SPF",
        "name": "send",
        "type": "MX",
        "ttl": "Auto",
        "status": "not_started",
        "value": "feedback-smtp.us-east-1.amazonses.com",
        "priority": 10
      },
      {
        "record": "SPF",
        "name": "send",
        "value": "\"v=spf1 include:amazonses.com ~all\"",
        "type": "TXT",
        "ttl": "Auto",
        "status": "not_started"
      },
      {
        "record": "DKIM",
        "name": "resend._domainkey",
        "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
        "type": "TXT",
        "status": "not_started",
        "ttl": "Auto"
      }
    ]
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "type": "domain.updated",
  "created_at": "2024-11-17T19:32:22.980Z",
  "data": {
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
    "name": "example.com",
    "status": "not_started",
    "created_at": "2024-04-26T20:21:26.347412+00:00",
    "region": "us-east-1",
    "records": [
      {
        "record": "SPF",
        "name": "send",
        "type": "MX",
        "ttl": "Auto",
        "status": "not_started",
        "value": "feedback-smtp.us-east-1.amazonses.com",
        "priority": 10
      },
      {
        "record": "SPF",
        "name": "send",
        "value": "\"v=spf1 include:amazonses.com ~all\"",
        "type": "TXT",
        "ttl": "Auto",
        "status": "not_started"
      },
      {
        "record": "DKIM",
        "name": "resend._domainkey",
        "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
        "type": "TXT",
        "status": "not_started",
        "ttl": "Auto"
      }
    ]
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "type": "domain.deleted",
  "created_at": "2024-11-17T19:32:22.980Z",
  "data": {
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
    "name": "example.com",
    "status": "not_started",
    "created_at": "2024-04-26T20:21:26.347412+00:00",
    "region": "us-east-1",
    "records": [
      {
        "record": "SPF",
        "name": "send",
        "type": "MX",
        "ttl": "Auto",
        "status": "not_started",
        "value": "feedback-smtp.us-east-1.amazonses.com",
        "priority": 10
      },
      {
        "record": "SPF",
        "name": "send",
        "value": "\"v=spf1 include:amazonses.com ~all\"",
        "type": "TXT",
        "ttl": "Auto",
        "status": "not_started"
      },
      {
        "record": "DKIM",
        "name": "resend._domainkey",
        "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
        "type": "TXT",
        "status": "not_started",
        "ttl": "Auto"
      }
    ]
  }
}
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This command installs the Resend Node.js SDK using npm, making it available for use in your project. It's the first step to integrate Resend into your Node.js application.
SOURCE: https://resend.com/docs/send-with-express

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Retrieve Contact using Resend Node.js SDK
DESCRIPTION: Demonstrates how to retrieve a single contact from an audience using the Resend Node.js SDK, allowing retrieval by contact ID or email address. This snippet initializes the Resend client and then calls the `contacts.get` method with either an `id` or `email` parameter, along with the `audienceId`.
SOURCE: https://resend.com/docs/api-reference/contacts/get-contact

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

// Get by contact id
resend.contacts.get({
  id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});

// Get by contact email
resend.contacts.get({
  email: 'steve.wozniak@gmail.com',
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
});
```

----------------------------------------

TITLE: Install Nodemailer package
DESCRIPTION: This command installs the Nodemailer library, a module for Node.js applications that simplifies sending emails. It is used internally by NextAuth.js's Email provider for SMTP transport.
SOURCE: https://resend.com/docs/send-with-nextauth-smtp

LANGUAGE: shell
CODE:
```
npm install nodemailer
```

----------------------------------------

TITLE: Create React Email Template Component
DESCRIPTION: This TypeScript code defines a React functional component, `EmailTemplate`, which serves as a reusable structure for email content. It accepts `firstName` as a prop to personalize the welcome message, demonstrating how to build dynamic email layouts with React.
SOURCE: https://resend.com/docs/send-with-nextjs

LANGUAGE: TypeScript
CODE:
```
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}
```

----------------------------------------

TITLE: Send Email using Resend SDK in Cloudflare Worker
DESCRIPTION: This TypeScript code demonstrates how to integrate the Resend SDK into a Cloudflare Worker to send emails. It imports the Resend library and a custom React email template, then uses the `resend.emails.send` method to dispatch an email with dynamic content.
SOURCE: https://resend.com/docs/send-with-cloudflare-workers

LANGUAGE: typescript
CODE:
```
import { Resend } from 'resend';
import { EmailTemplate } from './emails/email-template';

export default {
  async fetch(request, env, context): Promise<Response> {
    const resend = new Resend('re_xxxxxxxxx');

    const data = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      react: <EmailTemplate firstName="John" />,
    });

    return Response.json(data);
  },
} satisfies ExportedHandler<Env, ExecutionContext>;
```

----------------------------------------

TITLE: Install Resend Ruby SDK
DESCRIPTION: This snippet provides the command to install the Resend Ruby SDK using RubyGems, which is the package manager for Ruby.
SOURCE: https://resend.com/docs/send-with-ruby

LANGUAGE: Ruby
CODE:
```
gem install resend
```

----------------------------------------

TITLE: Configure Auth0 with Resend SMTP Credentials
DESCRIPTION: This documentation details the necessary Resend SMTP credentials (host, port, username, password) and outlines the step-by-step process to integrate these settings within the Auth0 dashboard's email provider configuration. It covers enabling the custom email provider, selecting SMTP, and inputting the Resend details to enable email sending through Auth0.
SOURCE: https://resend.com/docs/send-with-auth0-smtp

LANGUAGE: APIDOC
CODE:
```
Resend SMTP Credentials:
  Host: smtp.resend.com
  Port: 465
  Username: resend
  Password: YOUR_API_KEY

Auth0 SMTP Integration Steps:
  1. From your Auth0 dashboard, go to Branding > Email Provider.
  2. Enable the "Use my own email provider" toggle.
  3. Select "SMTP Provider".
  4. Enter a "From" email address.
  5. Enter the Resend SMTP server’s Host, Port, Username, and your API key as the Password.
  6. Save settings and send a test email using the "Send Test Email" button.
```

----------------------------------------

TITLE: Install Resend Node.js SDK with Bun
DESCRIPTION: This command installs the Resend Node.js SDK using the Bun package manager. It makes the SDK available for use in your Bun project, enabling email sending functionalities.
SOURCE: https://resend.com/docs/send-with-bun

LANGUAGE: Bun
CODE:
```
bun install resend
```

----------------------------------------

TITLE: Install Resend Node.js SDK
DESCRIPTION: This command installs the Resend Node.js SDK into your project using npm, making the Resend library available for use in your application.
SOURCE: https://resend.com/docs/send-with-nuxt

LANGUAGE: npm
CODE:
```
npm install resend
```

----------------------------------------

TITLE: Install Resend Python SDK
DESCRIPTION: This command installs the official Resend Python SDK using pip, the Python package installer. It's the first step to integrate Resend's email sending capabilities into a Python application.
SOURCE: https://resend.com/docs/send-with-python

LANGUAGE: python
CODE:
```
pip install resend
```

----------------------------------------

TITLE: Build Resend MCP Server Project
DESCRIPTION: These commands install the necessary Node.js dependencies for the Resend MCP server and then compile the project, preparing it for execution. Ensure you run these commands from the root directory of the cloned project.
SOURCE: https://resend.com/docs/knowledge-base/mcp-server

LANGUAGE: bash
CODE:
```
npm install
npm run build
```

----------------------------------------

TITLE: Initialize Rails User Mailer Instance
DESCRIPTION: This Ruby code demonstrates how to initialize a `UserMailer` instance by passing user parameters to the `welcome_email` method. It shows the expected return value, which is a `Mail::Message` object ready for delivery.
SOURCE: https://resend.com/docs/send-with-rails-smtp

LANGUAGE: Ruby
CODE:
```
u = User.new name: "derich"
mailer = UserMailer.with(user: u).welcome_email

# => #<Mail::Message:153700, Multipart: false, Headers: <From: from@example.com>, <To: to@example.com>, <Subject: hello world>, <Mime-Version: 1.0>...
```

----------------------------------------

TITLE: Install Resend Ruby SDK
DESCRIPTION: This snippet provides the command to install the Resend Ruby SDK using RubyGems, which is the package manager for Ruby.
SOURCE: https://resend.com/docs/send-with-sinatra

LANGUAGE: Ruby
CODE:
```
gem install resend
```

----------------------------------------

TITLE: Inject Symfony Mailer Interface into Controller
DESCRIPTION: Demonstrates how to inject the `MailerInterface` into a Symfony controller's constructor, making the mailer service available for sending emails.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: PHP
CODE:
```
public function __construct(
    private readonly MailerInterface $mailer,
) {
}
```

----------------------------------------

TITLE: Configure NextAuth.js Email Provider with Resend SMTP
DESCRIPTION: This code configures the Email provider within your NextAuth.js setup, typically in `pages/api/auth/[...nextauth].js` or `index.ts`. It imports `NextAuth` and `EmailProvider`, then uses the environment variables to define the SMTP server details and the 'from' email address, enabling email sending via Resend.
SOURCE: https://resend.com/docs/send-with-nextauth-smtp

LANGUAGE: javascript
CODE:
```
import NextAuth from 'next-auth';
import EmailProvider from 'next-auth/providers/email';
import nodemailer from 'nodemailer';

export default NextAuth({
  providers: [
    EmailProvider({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: process.env.EMAIL_FROM,
    }),
    // ... other providers as needed
  ],
  // ... any other NextAuth.js configs
});
```

----------------------------------------

TITLE: Resend Email Sending Behavior for Test and Invalid Addresses
DESCRIPTION: This documentation describes the expected behavior and error responses when sending emails via Resend to specific test domains or invalid test addresses. It covers the blocking of common test domains to prevent reputation damage and provides official Resend test addresses for simulating delivery and bounce events.
SOURCE: https://resend.com/docs/knowledge-base/what-email-addresses-to-use-for-testing

LANGUAGE: APIDOC
CODE:
```
Resend Email Sending Behavior:

1. Invalid Test Domains:
   - Domains: @example.com, @test.com
   - Behavior: Sending emails to these domains is blocked by Resend.
   - Error Response: 422 Unprocessable Entity
   - Reason: These domains are not suitable for email traffic and can lead to high bounce rates, negatively impacting sender reputation.

2. Resend Official Test Addresses:
   - Purpose: To safely test email functionality and simulate different delivery events without affecting real-world deliverability.
   - Usage: Use these addresses as recipients in your email sending API calls.
   - Addresses and Simulated Events:
     - `delivered@resend.dev`:
       - Description: Simulates a successful email delivery.
       - Expected Outcome: Email is processed and marked as delivered.
     - `bounced@resend.dev`:
       - Description: Simulates an email bounce.
       - Expected Outcome: Email is processed and marked as bounced, allowing testing of bounce handling logic.
```

----------------------------------------

TITLE: Sending Email with Custom Tags using Resend Node.js SDK
DESCRIPTION: This snippet demonstrates how to send an email using the Resend Node.js SDK and include custom tags. Tags are key/value pairs that allow associating emails with specific categories or identifiers within your application, and they are included in webhook events for post-delivery processing.
SOURCE: https://resend.com/docs/dashboard/emails/tags

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  html: '<p>it works!</p>',
  tags: [
    {
      name: 'category',
      value: 'confirm_email'
    }
  ]
});
```

----------------------------------------

TITLE: Install and Run Playwright Tests
DESCRIPTION: This snippet provides the commands to install Playwright browser dependencies and then execute the configured Playwright test suite. It ensures the testing environment is set up and tests are run.
SOURCE: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright

LANGUAGE: Shell
CODE:
```
npx playwright install
npx playwright test
```

----------------------------------------

TITLE: Send Single Email with Idempotency Key using Resend Node.js SDK
DESCRIPTION: Demonstrates how to send a single email using the Resend Node.js SDK, including an `idempotencyKey` to prevent duplicate sends during retries. The key ensures the request is processed only once within a 24-hour window.
SOURCE: https://resend.com/docs/dashboard/emails/idempotency-keys

LANGUAGE: Node.js
CODE:
```
await resend.emails.send(
  {
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<p>it works!</p>',
  },
  {
    idempotencyKey: 'welcome-user/123456789',
  },
);
```

----------------------------------------

TITLE: Define UserMailer Class in Rails
DESCRIPTION: Creates a `UserMailer` class in `app/mailers/user_mailer.rb` that inherits from `ApplicationMailer`. It defines a `welcome_email` method to construct an email with dynamic content, specifying the sender (which must be a verified domain with Resend) and recipient.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: Ruby
CODE:
```
class UserMailer < ApplicationMailer
  default from: 'Acme <onboarding@resend.dev>' # this domain must be verified with Resend
  def welcome_email
    @user = params[:user]
    @url = 'http://example.com/login'
    mail(to: ["delivered@resend.dev"], subject: 'hello world')
  end
end
```

----------------------------------------

TITLE: Configure TXT SPF Record on Porkbun for Resend
DESCRIPTION: This section outlines the process for adding a TXT (Text) record for SPF (Sender Policy Framework) on Porkbun, essential for email authentication with Resend. It provides field mappings and notes on omitting the domain from the record value.
SOURCE: https://resend.com/docs/knowledge-base/porkbun

LANGUAGE: APIDOC
CODE:
```
TXT SPF Record Configuration:
  Type: TXT
  Host: send
  Answer / Value: Copy TXT Value from Resend (e.g., "v=spf1 include:amazonses.com ~all")
  TTL: 600 (default)

  Porkbun Field Mapping:
    - Type: TXT Record
    - Host: Name (Resend)
    - Answer / Value: Value (Resend)
    - TTL: -

  Notes:
    - Omit your domain from the record values. For 'send.example.com', paste only 'send'.
```

----------------------------------------

TITLE: Install Resend Ruby SDK
DESCRIPTION: Installs the Resend Ruby SDK using RubyGems, making it available for use in Rails applications. This is the first step to integrate Resend for email sending.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: Ruby
CODE:
```
gem install resend
```

----------------------------------------

TITLE: Configure MX SPF Record for Resend with Namecheap
DESCRIPTION: This section outlines the process of adding an MX record in Namecheap to direct incoming mail to Resend, especially when transitioning from services like Gmail. It details the necessary fields and values to ensure mail reception.
SOURCE: https://resend.com/docs/knowledge-base/namecheap

LANGUAGE: APIDOC
CODE:
```
MX SPF Record Configuration:

Purpose: To direct incoming mail to Resend and ensure email reception, especially when changing MX configuration from Gmail to Custom MX.

Steps:
1. Under 'Mail Settings', select 'Custom MX'.
2. Type 'send' for the 'Host' of the record.
3. Copy the MX Value from Resend into the 'Value' field.
4. Use the 'Automatic' TTL.
5. Select 'Save all changes'.

Record Field Mapping (Namecheap to Resend):
| Namecheap | Resend   | Example Value                       |
|-----------|----------|-------------------------------------|
| Type      | Type     | MX Record                           |
| Host      | Name     | send                                |
| TTL       | -        | Automatic                           |
| Value     | Value    | feedback-smtp.us-east-1.amazonses.com |
| -         | Priority | 10                                  |

Notes:
- Omit your domain from the record values (e.g., use 'send' instead of 'send.example.com').
- Namecheap does not label the 'priority' column; it is the empty column after 'Value'.
- Do not use the same priority for multiple records. If Priority 10 is in use, try 11 or 12.
```

----------------------------------------

TITLE: Install Resend PHP SDK with Composer
DESCRIPTION: This snippet shows the Composer command required to add the Resend PHP SDK to your project. This is the first step to integrate Resend's email sending capabilities into a PHP application.
SOURCE: https://resend.com/docs/send-with-php

LANGUAGE: Shell
CODE:
```
composer require resend/resend-php
```

----------------------------------------

TITLE: Install Svix Library for Webhook Verification
DESCRIPTION: This command installs the Svix library, a crucial dependency for verifying webhook payloads, into your Node.js project. The library provides utilities to validate the authenticity and integrity of incoming webhook requests from services like Resend.
SOURCE: https://resend.com/docs/dashboard/webhooks/verify-webhooks-requests

LANGUAGE: shell
CODE:
```
npm install svix
```

----------------------------------------

TITLE: Configure TXT DKIM Records for Resend with Namecheap
DESCRIPTION: This section details the process of adding TXT records for DKIM (DomainKeys Identified Mail) in Namecheap. DKIM provides a way to verify the authenticity of email messages, further enhancing email security and deliverability by ensuring messages have not been altered in transit.
SOURCE: https://resend.com/docs/knowledge-base/namecheap

LANGUAGE: APIDOC
CODE:
```
TXT DKIM Records Configuration:

Purpose: To verify the authenticity and integrity of email messages using DKIM, enhancing email security and deliverability.

Steps:
1. In the 'Host Records' section, click 'Add New Record'.
2. Set the 'Type' to 'TXT Record'.
3. Enter 'resend._domainkey' into the 'Host' field.
4. Copy the TXT Value from Resend into the 'Value' field.
5. Use the 'Automatic' TTL.
6. Select 'Save all changes'.

Record Field Mapping (Namecheap to Resend):
| Namecheap | Resend | Example Value                                  |
|-----------|--------|------------------------------------------------|
| Type      | Type   | TXT Record                                     |
| Host      | Name   | resend._domainkey                              |
| TTL       | -      | Automatic                                      |
| Value     | Value  | p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB |

Notes:
- Omit your domain from the record values (e.g., use 'resend._domainkey' instead of 'resend._domainkey.example.com').
```

----------------------------------------

TITLE: Send Batch Emails with Idempotency Key using Resend Node.js SDK
DESCRIPTION: Illustrates how to send multiple emails in a single batch request using the Resend Node.js SDK, incorporating an `idempotencyKey` for the entire batch. This key helps manage retries for bulk email operations, ensuring the batch is processed uniquely.
SOURCE: https://resend.com/docs/dashboard/emails/idempotency-keys

LANGUAGE: Node.js
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.batch.send(
  [
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['foo@gmail.com'],
      subject: 'hello world',
      html: '<h1>it works!</h1>',
    },
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['bar@outlook.com'],
      subject: 'world hello',
      html: '<p>it works!</p>',
    },
  ],
  {
    idempotencyKey: 'team-quota/123456789',
  },
);
```

----------------------------------------

TITLE: Resend SMTP Connection Credentials and Port Security
DESCRIPTION: Details the necessary credentials (host, port, username, password) for connecting to Resend's SMTP service and explains the security implications of different port numbers (Implicit SSL/TLS vs. Explicit SSL/TLS).
SOURCE: https://resend.com/docs/send-with-smtp

LANGUAGE: APIDOC
CODE:
```
Host: smtp.resend.com
Port: 25, 465, 587, 2465, or 2587
Username: resend
Password: YOUR_API_KEY

Port Security:
| Type     | Port         | Security                                    |
|----------|--------------|---------------------------------------------|
| SMTPS    | 465, 2465    | Implicit SSL/TLS (Immediately connects via SSL/TLS) |
| STARTTLS | 25, 587, 2587| Explicit SSL/TLS (First connects via plaintext, then upgrades to SSL/TLS) |
```

----------------------------------------

TITLE: Install Nodemailer npm package
DESCRIPTION: This command installs the Nodemailer library, a module for Node.js applications, allowing them to send emails via various transport methods, including SMTP.
SOURCE: https://resend.com/docs/send-with-nodemailer-smtp

LANGUAGE: shell
CODE:
```
npm install nodemailer
```

----------------------------------------

TITLE: Configure tsconfig.json for Hono JSX/TSX
DESCRIPTION: Modifies the TypeScript configuration file to enable JSX/TSX support for React within a Hono project. This ensures that `.tsx` files are correctly transpiled, allowing the use of React components for email templates.
SOURCE: https://resend.com/docs/send-with-hono

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react"
  }
}
```

----------------------------------------

TITLE: Clone Resend MCP Server Repository
DESCRIPTION: This command clones the Resend MCP server project from its GitHub repository to your local machine, providing the source code necessary for building and running the server.
SOURCE: https://resend.com/docs/knowledge-base/mcp-server

LANGUAGE: bash
CODE:
```
git clone https://github.com/resend/mcp-send-email.git
```

----------------------------------------

TITLE: Setup Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment, isolating project dependencies and ensuring a clean development environment.
SOURCE: https://resend.com/docs/send-with-django-smtp

LANGUAGE: bash
CODE:
```
virtualenv venv
source venv/bin/activate
```

----------------------------------------

TITLE: Resend Contact Webhook Events
DESCRIPTION: This section describes webhook events related to contact management. The `contact.created` event is triggered when a new contact is successfully added. The `contact.updated` event occurs when an existing contact's information is modified. The `contact.deleted` event is fired when a contact record is successfully removed.
SOURCE: https://resend.com/docs/dashboard/webhooks/event-types

LANGUAGE: JSON
CODE:
```
{
  "type": "contact.created",
  "created_at": "2024-11-17T19:32:22.980Z",
  "data": {
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "created_at": "2024-11-17T19:32:22.980Z",
    "updated_at": "2024-11-17T19:32:22.980Z",
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "type": "contact.updated",
  "created_at": "2024-10-11T23:47:56.678Z",
  "data": {
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "created_at": "2024-10-10T15:11:94.110Z",
    "updated_at": "2024-10-11T23:47:56.678Z",
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false
  }
}
```

LANGUAGE: JSON
CODE:
```
{
  "type": "contact.deleted",
  "created_at": "2024-11-17T19:32:22.980Z",
  "data": {
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "created_at": "2024-11-10T15:11:94.110Z",
    "updated_at": "2024-11-17T19:32:22.980Z",
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false
  }
}
```

----------------------------------------

TITLE: Install Python Project Dependencies
DESCRIPTION: Command to install Python packages listed in a `requirements.txt` file using pip, ensuring all necessary libraries for the Django project are available.
SOURCE: https://resend.com/docs/send-with-django-smtp

LANGUAGE: bash
CODE:
```
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install PHPMailer via Composer
DESCRIPTION: This command installs the PHPMailer library, a popular email sending library for PHP, using Composer, the PHP dependency manager. It's the first step to set up PHPMailer in your project.
SOURCE: https://resend.com/docs/send-with-phpmailer-smtp

LANGUAGE: php
CODE:
```
composer require phpmailer/phpmailer
```

----------------------------------------

TITLE: Configure TXT SPF Record on Squarespace for Resend
DESCRIPTION: Instructions for adding a TXT record to your Squarespace DNS settings to configure SPF for Resend. This covers the host, type, TTL, and text field values, along with a mapping of fields from Resend to Squarespace.
SOURCE: https://resend.com/docs/knowledge-base/squarespace

LANGUAGE: APIDOC
CODE:
```
Method: Add DNS Record
Type: TXT
Purpose: Configure SPF for Resend via TXT record.

Parameters:
  Host: send
  Type: TXT
  TTL: 4 hrs (default)
  Text (Squarespace) / Value (Resend): TXT Value from Resend (e.g., "v=spf1 include:amazonses.com ~all")

Instructions:
1. In the Custom records section on Squarespace, select 'Add Record'.
2. Type 'send' for Host.
3. Set Type to 'TXT'.
4. Use Default 4 hours for TTL.
5. Copy TXT Value from Resend into Text field.
6. Select 'Save'.

Note: Omit your domain from the record values. Instead of 'send.example.com', paste only 'send'.
```

----------------------------------------

TITLE: Configure Playwright for E2E Testing
DESCRIPTION: This Playwright configuration file (`playwright.config.ts`) sets up the testing environment. It defines key properties such as the `testDir` for test files, `outputDir` for results, and configures a `webServer` to run the application before tests. The configuration also includes an array of `projects` to specify different browsers and devices for comprehensive cross-browser and mobile testing.
SOURCE: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright

LANGUAGE: typescript
CODE:
```
import { defineConfig, devices } from '@playwright/test';
import path from 'path';

const baseURL = 'http://localhost:3000';

export default defineConfig({
  timeout: 30 * 1000,
  testDir: path.join(__dirname, 'e2e'),
  retries: 2,
  outputDir: 'test-results/',
  webServer: {
    command: 'npm run dev',
    url: baseURL,
    timeout: 120 * 1000,
    reuseExistingServer: !process.env.CI,
  },

  use: {
    baseURL,
    // Retry a test if its failing with enabled tracing. This allows you to analyze the DOM, console logs, network traffic etc.
    trace: 'retry-with-trace',
  },

  projects: [
    // Test against desktop browsers.
    {
      name: 'Desktop Chrome',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
    {
      name: 'Desktop Firefox',
      use: {
        ...devices['Desktop Firefox'],
      },
    },
    {
      name: 'Desktop Safari',
      use: {
        ...devices['Desktop Safari'],
      },
    },
    // Test against mobile viewports.
    {
      name: 'Mobile Chrome',
      use: {
        ...devices['Pixel 5'],
      },
    },
    {
      name: 'Mobile Safari',
      use: devices['iPhone 12'],
    },
  ],
});
```

----------------------------------------

TITLE: Configure TXT DKIM Records on Porkbun for Resend
DESCRIPTION: This section describes how to add a TXT (Text) record for DKIM (DomainKeys Identified Mail) on Porkbun to enhance email security and deliverability with Resend. It includes field mappings and instructions for omitting the domain from the record value.
SOURCE: https://resend.com/docs/knowledge-base/porkbun

LANGUAGE: APIDOC
CODE:
```
TXT DKIM Record Configuration:
  Type: TXT
  Host: resend._domainkey
  Answer / Value: Copy TXT Value from Resend (e.g., p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB)
  TTL: 600 (default)

  Porkbun Field Mapping:
    - Type: TXT Record
    - Host: Name (Resend)
    - Answer / Value: Value (Resend)
    - TTL: -

  Notes:
    - Omit your domain from the record values. For 'resend._domainkey.example.com', paste only 'resend._domainkey'.
```

----------------------------------------

TITLE: Configure TXT SPF Record for Strato DNS
DESCRIPTION: Instructions and field mapping for adding a TXT record on the base domain settings of Strato DNS. This record defines the Sender Policy Framework (SPF) for the domain, authorizing Amazon SES (used by Resend) to send emails on its behalf.
SOURCE: https://resend.com/docs/knowledge-base/strato

LANGUAGE: APIDOC
CODE:
```
TXT SPF Record Configuration for Strato DNS:

Purpose: Add a TXT record to the base domain to specify the SPF policy for email sending, allowing amazonses.com.

Fields Mapping (Resend to Strato):
- Type: TXT Record
- Name: send
- Value: v=spf1 include:amazonses.com ~all

Steps:
1. On the base domain settings -> DNS tab.
2. Manage TXT and CNAME records.
3. Click 'Create another record'.
4. Choose 'TXT' type.
5. Add 'send' for the 'name' record.
6. For 'value' input 'v=spf1 include:amazonses.com ~all'.
7. Save settings.
```

----------------------------------------

TITLE: Add Resend Rust SDK and Tokio dependencies
DESCRIPTION: This command adds the `resend-rs` crate, which is the official Resend SDK for Rust, and `tokio` for asynchronous operations to the Rust project. Tokio is configured with `macros` and `rt-multi-thread` features to support async Rust development.
SOURCE: https://resend.com/docs/send-with-rust

LANGUAGE: Bash
CODE:
```
cargo add resend-rs
cargo add tokio -F macros,rt-multi-thread
```

----------------------------------------

TITLE: Send Email using Symfony Mailer and Resend
DESCRIPTION: Shows how to construct and send an email using the injected `MailerInterface` in a Symfony controller action. It uses the `Email` class to define sender, recipient, subject, and HTML content.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: PHP
CODE:
```
$this->mailer->send(
    (new Email())
        ->from('Acme <onboarding@resend.dev>')
        ->to('delivered@resend.dev')
        ->subject('Hello world')
        ->html('<strong>it works!</strong>')
);
```

----------------------------------------

TITLE: Create ERB Email Template for UserMailer
DESCRIPTION: Defines an ERB template for the `welcome_email` in `app/views/user_mailer/welcome_email.html.erb`. This HTML template uses embedded Ruby (`<%= %>`) to personalize the email content with user data and a login URL passed from the mailer.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: ERB
CODE:
```
<!doctype html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  </head>
  <body>
    <h1>Welcome to example.com, <%= @user.name %></h1>
    <p>You have successfully signed up to example.com,</p>
    <p>To login to the site, just follow this link: <%= @url %>.</p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>
```

----------------------------------------

TITLE: Deploy Supabase Edge Function
DESCRIPTION: This command deploys the specified Supabase Edge Function ('resend') from the local environment to the Supabase project, making it accessible via a public endpoint.
SOURCE: https://resend.com/docs/send-with-supabase-edge-functions

LANGUAGE: Shell
CODE:
```
supabase functions deploy resend
```

----------------------------------------

TITLE: Configure MX SPF Record on Porkbun for Resend
DESCRIPTION: This section details the steps and required values to add an MX (Mail Exchanger) record on Porkbun for email sending verification with Resend. It includes mapping of Resend's values to Porkbun's DNS fields and important notes on priority.
SOURCE: https://resend.com/docs/knowledge-base/porkbun

LANGUAGE: APIDOC
CODE:
```
MX Record Configuration:
  Type: MX
  Host: send
  Answer / Value: Copy MX Value from Resend (e.g., feedback-smtp.us-east-1.amazonses.com)
  TTL: 600 (default)
  Priority: 10 (or slightly higher if 10 is in use, e.g., 11 or 12)

  Porkbun Field Mapping:
    - Type: MX Record
    - Host: Name (Resend)
    - Answer / Value: Value (Resend)
    - TTL: -
    - Priority: Priority (Resend)

  Notes:
    - Do not use the same priority for multiple records. Adjust if necessary.
```

----------------------------------------

TITLE: Configure MX SPF Record on Hetzner for Resend
DESCRIPTION: Detailed steps and field mapping for adding an MX record on Hetzner, ensuring proper mail server configuration and priority for Resend domain verification. Includes specific instructions for handling trailing periods and priority conflicts.
SOURCE: https://resend.com/docs/knowledge-base/hetzner

LANGUAGE: APIDOC
CODE:
```
Method: Add MX Record
  Description: Adds a Mail Exchanger (MX) record to your domain's DNS settings on Hetzner.
  Parameters:
    - Type: MX
      Description: Record type. Select 'MX'.
    - Name: send
      Description: The hostname for the MX record. Type 'send'.
    - Value (Mail server): MX Value from Resend (e.g., feedback-smtp.us-east-1.amazonses.com.)
      Description: The mail server address provided by Resend. Copy this value directly, ensuring the trailing period is included.
    - Priority: 10 (or higher, e.g., 11, 12)
      Description: The priority of the MX record. Default is 10. If 10 is already in use, choose a slightly higher number.
    - TTL: 1800
      Description: Time To Live in seconds. Select '1800'.
  Usage Notes:
    - Hetzner requires a trailing period for the MX record value. Resend provides this automatically.
    - Do not use the same priority for multiple MX records. Adjust if necessary.
  Example Mapping (Resend to Hetzner):
    - Type: MX Record
    - Name: send
    - Mail server: feedback-smtp.us-east-1.amazonses.com.
    - TTL: 1800
    - Priority: 10
```

----------------------------------------

TITLE: Configure TXT SPF Record for Resend with Namecheap
DESCRIPTION: This section describes how to add a TXT record for SPF (Sender Policy Framework) in Namecheap. This record helps prevent email spoofing by authenticating the sending domain, ensuring that emails sent via Resend are trusted by recipient mail servers.
SOURCE: https://resend.com/docs/knowledge-base/namecheap

LANGUAGE: APIDOC
CODE:
```
TXT SPF Record Configuration:

Purpose: To authenticate your sending domain using SPF, helping to prevent email spoofing and improve email deliverability.

Steps:
1. Under 'Host Records', click 'Add New Record'.
2. Set the 'Type' to 'TXT Record'.
3. Enter 'send' into the 'Host' field.
4. Copy the TXT Value from Resend into the 'Value' field.
5. Use the 'Automatic' TTL.
6. Select 'Save all changes'.

Record Field Mapping (Namecheap to Resend):
| Namecheap | Resend | Example Value                     |
|-----------|--------|-----------------------------------|
| Type      | Type   | TXT Record                        |
| Host      | Name   | send                              |
| TTL       | -      | Automatic                         |
| Value     | Value  | "v=spf1 include:amazonses.com ~all" |

Notes:
- Omit your domain from the record values (e.g., use 'send' instead of 'send.example.com').
```

----------------------------------------

TITLE: Configure MX SPF Record on Squarespace for Resend
DESCRIPTION: Detailed instructions for adding an MX record to your Squarespace DNS settings to configure SPF for Resend. This includes the required host, type, priority, TTL, and mail server values, along with a mapping of fields from Resend to Squarespace.
SOURCE: https://resend.com/docs/knowledge-base/squarespace

LANGUAGE: APIDOC
CODE:
```
Method: Add DNS Record
Type: MX
Purpose: Configure SPF for Resend via MX record.

Parameters:
  Host: send
  Type: MX
  Priority: 10 (or higher if 10 is in use, e.g., 11, 12)
  TTL: 4 hrs (default)
  Mail Server (Squarespace) / Value (Resend): MX Value from Resend (e.g., feedback-smtp.us-east-1.amazonses.com)

Instructions:
1. Scroll to Custom records section on Squarespace.
2. Select 'Add record'.
3. Type 'send' for Host.
4. Set Type to 'MX'.
5. Set Priority to '10'.
6. Use Default 4 hours for TTL.
7. Copy MX Value from Resend into Mail Server field.
8. Select 'Save'.

Note: Omit your domain from the record values. Instead of 'send.example.com', paste only 'send'.
```

----------------------------------------

TITLE: Install Symfony Webhook Component
DESCRIPTION: Installs the Symfony Webhook Component using Composer, which is required for handling Resend webhook events within the application.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: PHP
CODE:
```
composer require symfony/webhook
```

----------------------------------------

TITLE: Resend Email Webhook Event Types and Payloads
DESCRIPTION: This section details the various event types triggered by Resend for email delivery status updates via webhooks. Each event type indicates a specific stage or outcome in the email delivery process and includes a sample JSON payload structure.
SOURCE: https://resend.com/docs/dashboard/webhooks/event-types

LANGUAGE: APIDOC
CODE:
```
email.sent
  Description: Occurs whenever the API request was successful. Resend will attempt to deliver the message to the recipient’s mail server.
  Sample Payload:
  ```json
  {
    "type": "email.sent",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  }
  ```

email.delivered
  Description: Occurs whenever Resend successfully delivered the email to the recipient’s mail server.
  Sample Payload:
  ```json
  {
    "type": "email.delivered",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  }
  ```

email.delivery_delayed
  Description: Occurs whenever the email couldn’t be delivered due to a temporary issue. Delivery delays can occur, for example, when the recipient’s inbox is full, or when the receiving email server experiences a transient issue.
  Sample Payload:
  ```json
  {
    "type": "email.delivery_delayed",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  }
  ```

email.complained
  Description: Occurs whenever the email was successfully delivered, but the recipient marked it as spam.
  Sample Payload:
  ```json
  {
    "type": "email.complained",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  }
  ```

email.bounced
  Description: Occurs whenever the recipient’s mail server permanently rejected the email.
  Sample Payload:
  ```json
  {
    "type": "email.bounced",
    "created_at": "2024-11-22T23:41:12.126Z",
    "data": {
      "created_at": "2024-11-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "bounce": {
        "message": "The recipient's email address is on the suppression list because it has a recent history of producing hard bounces.",
        "subType": "Suppressed",
        "type": "Permanent"
      },
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  }
  ```
```

----------------------------------------

TITLE: Resend Domain Configuration: DMARC Record Validation
DESCRIPTION: This entry describes the importance of a valid DMARC (Domain-based Message Authentication, Reporting, and Conformance) record for email deliverability, especially with new requirements from providers like Gmail and Yahoo. Resend assists users by suggesting a DMARC record configuration.
SOURCE: https://resend.com/docs/dashboard/emails/deliverability-insights

LANGUAGE: APIDOC
CODE:
```
DMARC Record Configuration:
  Type: TXT Record
  Host/Name: _dmarc
  Value: v=DMARC1; p=none; rua=mailto:dmarc-reports@yourdomain.com; ruf=mailto:dmarc-forensics@yourdomain.com; fo=1; adkim=r; aspf=r;
    - Description: Specifies how email receivers should handle messages from your domain that fail SPF or DKIM validation.
    - Parameters:
      - v=DMARC1: Protocol version.
      - p=none|quarantine|reject: Policy for handling failed emails.
        - none: Monitor only (no action taken).
        - quarantine: Mark as spam or place in quarantine.
        - reject: Reject the email outright.
      - rua=mailto:email@example.com: Email address for aggregate reports.
      - ruf=mailto:email@example.com: Email address for forensic reports.
      - fo=0|1|d|s: Failure reporting options.
      - adkim=s|r: Alignment mode for DKIM (strict or relaxed).
      - aspf=s|r: Alignment mode for SPF (strict or relaxed).
    - Resend Integration:
      - Resend provides a suggested DMARC record when viewing your domain within their platform to simplify setup.
      - A valid DMARC record is crucial for compliance with new email provider requirements (e.g., Gmail, Yahoo starting 2024).
```

----------------------------------------

TITLE: Create Resend Webhook Listener in Symfony
DESCRIPTION: Defines a `ResendWebhookListener` class that implements `ConsumerInterface` and uses `#[AsRemoteEventConsumer('mailer_resend')]`. This class handles different types of Resend mailer events, such as delivery and engagement events.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: PHP
CODE:
```
#[AsRemoteEventConsumer('mailer_resend')]
readonly class ResendWebhookListener implements ConsumerInterface
{
    public function __construct(
        #[Autowire(param: 'kernel.project_dir')] private string $projectDir,
    ) {
    }

    public function consume(RemoteEvent $event): void
    {
        if ($event instanceof MailerDeliveryEvent) {
            $this->handleMailDelivery($event);
        } elseif ($event instanceof MailerEngagementEvent) {
            $this->handleMailEngagement($event);
        } else {
            // This is not an email event
            return;
        }
    }

    private function handleMailDelivery(MailerDeliveryEvent $event): void
    {
        // Todo
    }

    private function handleMailEngagement(MailerEngagementEvent $event): void
    {
        // Todo
    }
}
```

----------------------------------------

TITLE: Send Email with deliver_now! Method
DESCRIPTION: Sends the prepared email immediately using the `deliver_now!` method on the mailer instance. This triggers the actual email delivery through the configured Resend service and returns a response containing the email ID.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: Ruby
CODE:
```
mailer.deliver_now!

# => {:id=>"a193c81e-9ac5-4708-a569-5caf14220539", :from=>....}
```

----------------------------------------

TITLE: Define Rails User Mailer Class
DESCRIPTION: This Ruby code defines a `UserMailer` class that inherits from `ApplicationMailer`. It sets a default 'from' address (which must be verified with Resend) and defines a `welcome_email` method that takes user parameters, sets a URL, and constructs an email with a subject and recipient.
SOURCE: https://resend.com/docs/send-with-rails-smtp

LANGUAGE: Ruby
CODE:
```
class UserMailer < ApplicationMailer
  default from: 'Acme <onboarding@resend.dev>' # this domain must be verified with Resend
  def welcome_email
    @user = params[:user]
    @url = 'http://example.com/login'
    mail(to: ["delivered@resend.dev"], subject: 'hello world')
  end
}
```

----------------------------------------

TITLE: Configure TXT DKIM Records on Squarespace for Resend
DESCRIPTION: Instructions for adding a TXT record to your Squarespace DNS settings to configure DKIM for Resend. This includes the required host, type, TTL, and text field values, along with a mapping of fields from Resend to Squarespace.
SOURCE: https://resend.com/docs/knowledge-base/squarespace

LANGUAGE: APIDOC
CODE:
```
Method: Add DNS Record
Type: TXT
Purpose: Configure DKIM for Resend via TXT record.

Parameters:
  Host: resend._domainkey
  Type: TXT
  TTL: 4 hrs (default)
  Text (Squarespace) / Value (Resend): TXT Value from Resend (e.g., p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB)

Instructions:
1. In the Custom records section on Squarespace, select 'Add Record'.
2. Type 'resend._domainkey' for Host.
3. Set Type to 'TXT'.
4. Use Default 4 hours for TTL.
5. Copy TXT Value from Resend into Text field.
6. Select 'Save'.

Note: Omit your domain from the record values. Instead of 'resend._domainkey.example.com', paste only 'resend._domainkey'.
```

----------------------------------------

TITLE: Configure TXT SPF Record for Resend on IONOS
DESCRIPTION: Instructions for adding a TXT record for SPF (Sender Policy Framework) in IONOS. This record helps prevent email spoofing by specifying authorized senders for your domain. It outlines the Host name, TXT value, and TTL for proper setup.
SOURCE: https://resend.com/docs/knowledge-base/ionos

LANGUAGE: APIDOC
CODE:
```
TXT SPF Record Configuration:
  Type: TXT Record
  Host name: send (or send.subdomain if applicable)
  TXT value: "v=spf1 include:amazonses.com ~all" (Value from Resend)
  TTL: 1 hour (default)

Steps:
1. On the 'Add a DNS Record' page, select 'TXT'.
2. Type 'send' for the 'Host name' of the record.
3. Copy the TXT Value from Resend into the 'TXT value' field.
4. Use the default TTL of '1 hour'.
5. Select 'Save'.
```

----------------------------------------

TITLE: Configure TXT DKIM Records for Resend on IONOS
DESCRIPTION: Instructions for adding a TXT record for DKIM (DomainKeys Identified Mail) in IONOS. This record helps verify the authenticity of email senders and prevent tampering. It specifies the Host name, TXT value, and TTL required for the DKIM setup.
SOURCE: https://resend.com/docs/knowledge-base/ionos

LANGUAGE: APIDOC
CODE:
```
TXT DKIM Record Configuration:
  Type: TXT Record
  Host name: resend._domainkey (or resend._domainkey.subdomain if applicable)
  TXT value: p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB (Value from Resend)
  TTL: 1 hour (default)

Steps:
1. On the 'Add a DNS Record' page, select 'TXT'.
2. Type 'resend._domainkey' for the 'Host name' of the record.
3. Copy the record value from Resend into the 'TXT value' field.
4. Use the default TTL of '1 hour'.
5. Select 'Save'.
```

----------------------------------------

TITLE: Verify Resend Webhook Payload in Node.js with Svix
DESCRIPTION: This JavaScript code snippet demonstrates how to verify a Resend webhook payload using the installed Svix library. It requires the raw request body (payload), specific Svix headers ('svix-id', 'svix-timestamp', 'svix-signature'), and your webhook secret. The `wh.verify()` method validates the signature, throwing an error if verification fails and returning the verified content on success. It's critical to use the raw request body to avoid breaking the cryptographic signature.
SOURCE: https://resend.com/docs/dashboard/webhooks/verify-webhooks-requests

LANGUAGE: javascript
CODE:
```
import { Webhook } from 'svix';

const secret = process.env.WEBHOOK_SECRET;

// These were all sent from the server
const headers = {
  'svix-id': 'msg_p5jXN8AQM9LWM0D4loKWxJek',
  'svix-timestamp': '1614265330',
  'svix-signature': 'v1,g0hM9SsE+OTPJTGt/tmIKtSyZlE3uFJELVlNIOLJ1OE='
};
const payload = '{"test": 2432232314}';

const wh = new Webhook(secret);
// Throws on error, returns the verified content on success
wh.verify(payload, headers);
```

----------------------------------------

TITLE: Resend SMTP Custom Headers for Email Control
DESCRIPTION: Explains how to use custom SMTP headers to control email behavior, such as preventing threading in Gmail or providing an unsubscribe link, when your SMTP client supports it.
SOURCE: https://resend.com/docs/send-with-smtp

LANGUAGE: APIDOC
CODE:
```
Common Custom Headers:
- X-Entity-Ref-ID: Prevent threading on Gmail
- List-Unsubscribe: Include a shortcut for users to unsubscribe
```

----------------------------------------

TITLE: Configure MX SPF Record for Strato DNS
DESCRIPTION: Detailed instructions and field mapping for setting up an MX record on a 'send' subdomain within Strato DNS. This configuration is crucial for directing email traffic through Resend's mail servers and ensuring proper SPF validation, bypassing Strato's default mail server behavior.
SOURCE: https://resend.com/docs/knowledge-base/strato

LANGUAGE: APIDOC
CODE:
```
MX Record Configuration for Strato DNS:

Purpose: Add an MX record to a 'send' subdomain to route email through Resend's mail servers for SPF validation.

Fields Mapping (Resend to Strato):
- Type: MX Record
- Name: send (subdomain)
- Mail server (Value): feedback-smtp.eu-west-1.amazonses.com.
- Priority: Low

Steps:
1. On the domain page, navigate to Settings.
2. Create a new subdomain named 'send'.
3. Go to the subdomain settings -> DNS tab.
4. Manage MX record.
5. Select 'own mail server'.
6. Copy MX value from Resend into 'Server' field.
7. Use default priority 'Low'.
8. Save settings.
```

----------------------------------------

TITLE: Configure Resend Mailer DSN and Secret
DESCRIPTION: Adds the Resend Mailer DSN and webhook signing secret to the `.env.local` file. This configures Symfony's Mailer component to use Resend and enables webhook verification.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: ENV
CODE:
```
MAILER_DSN=resend+api://API_KEY@default
MAILER_RESEND_SECRET=SIGNING_SECRET
```

----------------------------------------

TITLE: Configure TXT SPF Record on Hetzner for Resend
DESCRIPTION: Instructions and field mapping for adding a TXT SPF record on Hetzner, crucial for email sender authentication and preventing spoofing. Emphasizes omitting the domain from the record value when pasting.
SOURCE: https://resend.com/docs/knowledge-base/hetzner

LANGUAGE: APIDOC
CODE:
```
Method: Add TXT SPF Record
  Description: Adds a Sender Policy Framework (SPF) record as a TXT record to your domain's DNS settings on Hetzner.
  Parameters:
    - Type: TXT
      Description: Record type. Choose 'TXT'.
    - Name: send
      Description: The hostname for the TXT record. Type 'send'.
    - Value: TXT Value from Resend (e.g., "v=spf1 include:amazonses.com ~all")
      Description: The SPF record value provided by Resend. Copy this value.
    - TTL: 1800
      Description: Time To Live in seconds. Select '1800'.
  Usage Notes:
    - Omit your domain from the record value when pasting (e.g., paste 'send' instead of 'send.example.com').
  Example Mapping (Resend to Hetzner):
    - Type: TXT Record
    - Name: send
    - Value: "v=spf1 include:amazonses.com ~all"
    - TTL: 10800
```

----------------------------------------

TITLE: Define Resend Mailer in Laravel config/mail.php
DESCRIPTION: This configuration snippet adds a new 'resend' mailer definition within the `mailers` array in Laravel's `config/mail.php` file. It specifies 'resend' as the transport, allowing Laravel to route emails through the Resend service.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
'resend' => [
    'transport' => 'resend',
],
```

----------------------------------------

TITLE: Configure TXT DKIM Records on Hetzner for Resend
DESCRIPTION: Steps and field mapping for adding TXT DKIM records on Hetzner, essential for email authentication and preventing spoofing. Highlights omitting the domain from the record value when pasting.
SOURCE: https://resend.com/docs/knowledge-base/hetzner

LANGUAGE: APIDOC
CODE:
```
Method: Add TXT DKIM Record
  Description: Adds a DomainKeys Identified Mail (DKIM) record as a TXT record to your domain's DNS settings on Hetzner.
  Parameters:
    - Type: TXT
      Description: Record type. Choose 'TXT'.
    - Name: resend._domainkey
      Description: The hostname for the DKIM record. Type 'resend._domainkey'.
    - Value: TXT Value from Resend (e.g., p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB)
      Description: The DKIM record value provided by Resend. Copy this value.
    - TTL: 1800
      Description: Time To Live in seconds. Select '1800'.
  Usage Notes:
    - Omit your domain from the record value when pasting (e.g., paste 'resend._domainkey' instead of 'resend._domainkey.example.com').
  Example Mapping (Resend to Hetzner):
    - Type: TXT Record
    - Name: send
    - Value: p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB
    - TTL: 1 hour
```

----------------------------------------

TITLE: Configure TXT DKIM Records for Resend Domain on Vercel
DESCRIPTION: This section describes the process of adding TXT records for DKIM (DomainKeys Identified Mail) to your Vercel DNS settings. It specifies the record name, type, and value, highlighting the importance of omitting the domain from the record value.
SOURCE: https://resend.com/docs/knowledge-base/vercel

LANGUAGE: APIDOC
CODE:
```
TXT DKIM Record Configuration:

Instructions:
1. Type 'resend._domainkey' for the 'Name' of the record.
2. Expand the 'Type' dropdown and select 'TXT'.
3. Copy the record value from Resend into the 'Value' field in Vercel.

Notes:
- Omit your domain from the record values (e.g., use 'resend._domainkey' instead of 'resend._domainkey.example.com').

Record Field Mapping (Vercel to Resend):
- Type: TXT Record
- Name: resend._domainkey
- Value: p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB (Example)
- TTL: Use Vercel default (60)
```

----------------------------------------

TITLE: Install Resend for Laravel via Composer
DESCRIPTION: This command installs the official Resend Laravel package using Composer, the PHP dependency manager. It's the essential first step to integrate Resend's email sending capabilities into a Laravel project.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
composer require resend/resend-laravel
```

----------------------------------------

TITLE: Send Email with Laravel Mail Facade using Resend
DESCRIPTION: This PHP code demonstrates sending an email using Laravel's built-in `Mail` facade. It utilizes a Mailable class (`OrderShipped`) to construct the email content and sends it to a specified user, with Resend handling the actual delivery once configured as the mail driver.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Mail\OrderShipped;
use App\Models\Order;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     */
    public function store(Request $request): RedirectResponse
    {
        $order = Order::findOrFail($request->order_id);

        // Ship the order...

        Mail::to($request->user())->send(new OrderShipped($order));

        return redirect('/orders');
    }
}
```

----------------------------------------

TITLE: Configure Resend SMTP for WordPress WP Mail SMTP Plugin
DESCRIPTION: This snippet provides the necessary SMTP settings to connect the WP Mail SMTP plugin in WordPress to the Resend email service. It includes the host, port, encryption, authentication, and credentials required for successful email delivery.
SOURCE: https://resend.com/docs/send-with-wordpress-smtp

LANGUAGE: APIDOC
CODE:
```
SMTP Host: smtp.resend.com
Encryption: SSL
SMTP Port: 465
Auto TLS: ON
Authentication: ON
SMTP Username: resend
SMTP Password: YOUR_API_KEY
```

----------------------------------------

TITLE: Install Symfony Resend Mailer Bridge
DESCRIPTION: Installs the necessary Symfony Resend Mailer Bridge package using Composer. This package allows Symfony applications to send emails via Resend.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: PHP
CODE:
```
composer require symfony/resend-mailer
```

----------------------------------------

TITLE: Create ERB Email Template for Rails Mailer
DESCRIPTION: This HTML snippet defines an ERB template for the `welcome_email`. It dynamically inserts the user's name and a login URL using Rails' ERB syntax, providing a personalized welcome message within the email body.
SOURCE: https://resend.com/docs/send-with-rails-smtp

LANGUAGE: HTML
CODE:
```
<!doctype html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  </head>
  <body>
    <h1>Welcome to example.com, <%= @user.name %></h1>
    <p>You have successfully signed up to example.com,</p>
    <p>To login to the site, just follow this link: <%= @url %>.</p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>
```

----------------------------------------

TITLE: Custom Supabase Authentication URL Format
DESCRIPTION: This code snippet illustrates the desired URL format after setting up a custom domain for Supabase authentication. Using a custom domain like `auth.yourdomain.com` aligns email `from` addresses with link domains, improving trust and deliverability.
SOURCE: https://resend.com/docs/knowledge-base/how-do-i-maximize-deliverability-for-supabase-auth-emails

LANGUAGE: URL
CODE:
```
https://auth.yourdomain.com/auth/v1/{code}
```

----------------------------------------

TITLE: Configure TXT SPF Record for Resend Domain on Vercel
DESCRIPTION: This section details how to add a TXT record for SPF (Sender Policy Framework) to your Vercel DNS settings. It specifies the record name, type, value, and TTL, emphasizing the need to omit the domain from the record value.
SOURCE: https://resend.com/docs/knowledge-base/vercel

LANGUAGE: APIDOC
CODE:
```
TXT SPF Record Configuration:

Instructions:
1. Type 'send' for the 'Name' of the record.
2. Expand the 'Type' dropdown and select 'TXT'.
3. Copy the 'TXT' record value from Resend into the 'Value' field in Vercel.
4. Use the default TTL of '60'.
5. Select 'Add'.

Notes:
- Omit your domain from the record values (e.g., use 'send' instead of 'send.example.com').

Record Field Mapping (Vercel to Resend):
- Type: TXT Record
- Name: send
- Value: "v=spf1 include:amazonses.com ~all" (Example)
- TTL: Use Vercel default (60)
```

----------------------------------------

TITLE: Configure TXT DKIM Records for Resend on Cloudflare
DESCRIPTION: This section describes the process of adding a TXT record for DKIM (DomainKeys Identified Mail) to Cloudflare, vital for email security and deliverability. It specifies the Type, Name, and Content (Target) fields, which contain the DKIM public key. This record allows recipient mail servers to verify that an email was sent by the domain owner and has not been tampered with in transit.
SOURCE: https://resend.com/docs/knowledge-base/cloudflare

LANGUAGE: APIDOC
CODE:
```
TXT DKIM Record Configuration:

Instructions for Cloudflare:
1. Set the Type to `TXT`.
2. Type `resend._domainkey` for the `Name` of the record.
3. Copy the TXT Value from Resend into the `Content` field.
4. Use the default `Auto` for `TTL`.
5. Select `Save`.

Field Mapping (Cloudflare to Resend):
- Type: `TXT` (Resend Type)
- Name: `resend._domainkey` (Resend Name)
- Target: `p=MIGfMA0GCSqGSIbRL/a21QojogA+rYqIQXB/3DQEBDAQAB` (Resend Value)
- Proxy Status: `DNS Only (disabled)`
- TTL: `Auto`

Important Notes:
- Omit your domain from the record values (e.g., use `resend._domainkey` instead of `resend._domainkey.example.com`).
- Ensure proxy settings are set to `DNS Only` for CNAME records to avoid 'Code: 1004' errors.
```

----------------------------------------

TITLE: Send Email with Laravel Mail Facade using Resend SMTP
DESCRIPTION: This PHP code snippet demonstrates how to send an email within a Laravel controller using the Mail facade. It illustrates a common pattern for handling an order shipment, retrieving an order, and dispatching an email to the user associated with the request.
SOURCE: https://resend.com/docs/send-with-laravel-smtp

LANGUAGE: php
CODE:
```
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Mail\OrderShipped;
use App\Models\Order;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     */
    public function store(Request $request): RedirectResponse
    {
        $order = Order::findOrFail($request->order_id);

        // Ship the order...

        Mail::to($request->user())->send(new OrderShipped($order));

        return redirect('/orders');
    }
}
```

----------------------------------------

TITLE: Send Email using Django's EmailMessage with Resend SMTP
DESCRIPTION: Python code demonstrating how to send an email within a Django view using `EmailMessage` and `get_connection`. It leverages the configured Resend SMTP settings and the `RESEND_API_KEY` for authentication.
SOURCE: https://resend.com/docs/send-with-django-smtp

LANGUAGE: python
CODE:
```
import os
from django.conf import settings
from django.http import JsonResponse
from django.core.mail import EmailMessage, get_connection

# Sample Django view
def index(request):

    subject = "Hello from Django SMTP"
    recipient_list = ["delivered@resend.dev"]
    from_email = "onboarding@resend.dev"
    message = "<strong>it works!</strong>"

    with get_connection(
        host=settings.RESEND_SMTP_HOST,
        port=settings.RESEND_SMTP_PORT,
        username=settings.RESEND_SMTP_USERNAME,
        password=os.environ["RESEND_API_KEY"],
        use_tls=True,
        ) as connection:
            r = EmailMessage(
                  subject=subject,
                  body=message,
                  to=recipient_list,
                  from_email=from_email,
                  connection=connection).send()
    return JsonResponse({"status": "ok"})
```

----------------------------------------

TITLE: Resend Node.js SDK: Update Broadcast Content
DESCRIPTION: This snippet demonstrates how to update the HTML content of an existing broadcast using the Resend Node.js SDK. It requires the unique ID of the broadcast to be updated and the new HTML content.
SOURCE: https://resend.com/docs/api-reference/broadcasts/update-broadcast

LANGUAGE: javascript
CODE:
```
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.broadcasts.update({
  id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
  html: 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
});
```

----------------------------------------

TITLE: Configure Webhook Routing in Symfony
DESCRIPTION: Configures the Symfony framework's webhook routing to bind the `mailer_resend` event to the `mailer.webhook.request_parser.resend` service, using the `MAILER_RESEND_SECRET` for verification.
SOURCE: https://resend.com/docs/send-with-symfony

LANGUAGE: YAML
CODE:
```
framework:
  webhook:
    routing:
      mailer_resend:
        service: 'mailer.webhook.request_parser.resend'
        secret: '%env(MAILER_RESEND_SECRET)%'
```

----------------------------------------

TITLE: Configure TXT SPF Record for Resend on Cloudflare
DESCRIPTION: This section outlines how to add a TXT (Text) record for SPF (Sender Policy Framework) to Cloudflare, essential for email authentication. It specifies the Type, Name, and Content fields, which include the SPF policy string. This record helps prevent email spoofing by defining which mail servers are authorized to send email on behalf of your domain.
SOURCE: https://resend.com/docs/knowledge-base/cloudflare

LANGUAGE: APIDOC
CODE:
```
TXT SPF Record Configuration:

Instructions for Cloudflare:
1. Set the Type to `TXT`.
2. Type `send` for the `Name` of the record.
3. Copy the TXT Value from Resend into the `Content` field.
4. Use the default `Auto` for `TTL`.
5. Select `Save`.

Field Mapping (Cloudflare to Resend):
- Type: `TXT` (Resend Type)
- Name: `send` (Resend Name)
- Content: `"v=spf1 include:amazonses.com ~all"` (Resend Value)
- TTL: `Auto`

Important Notes:
- Omit your domain from the record values (e.g., use `send` instead of `send.example.com`).
```

----------------------------------------

TITLE: Simulate Email Marked as Spam with Resend
DESCRIPTION: This test email address allows you to simulate an email being received but marked as spam by the recipient's email provider. Use this to test how your application handles spam complaints and to ensure proper webhook integration for such events.
SOURCE: https://resend.com/docs/dashboard/emails/send-test-emails

LANGUAGE: text
CODE:
```
complained@resend.dev
```

----------------------------------------

TITLE: Send Email with Rails Action Mailer
DESCRIPTION: This Ruby snippet shows how to send the initialized email using the `deliver_now!` method on the mailer instance. It triggers the immediate delivery of the email and returns a hash containing the email's ID and other delivery details.
SOURCE: https://resend.com/docs/send-with-rails-smtp

LANGUAGE: Ruby
CODE:
```
mailer.deliver_now!

# => {:id=>"a193c81e-9ac5-4708-a569-5caf14220539", :from=>....}
```

----------------------------------------

TITLE: Configure Django SMTP Settings for Resend
DESCRIPTION: Essential configuration settings for Django's `settings.py` file to enable SMTP email sending via Resend. This includes specifying the email backend, SMTP port, username, and host.
SOURCE: https://resend.com/docs/send-with-django-smtp

LANGUAGE: python
CODE:
```
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
RESEND_SMTP_PORT = 587
RESEND_SMTP_USERNAME = 'resend'
RESEND_SMTP_HOST = 'smtp.resend.com'
```

----------------------------------------

TITLE: BIMI DNS TXT Record Structure
DESCRIPTION: This snippet illustrates the general structure of a BIMI DNS TXT record, which is essential for pointing to your verified logo and mark certificate. It uses placeholders for the actual logo and certificate URLs.
SOURCE: https://resend.com/docs/dashboard/domains/bimi

LANGUAGE: DNS
CODE:
```
Name: default._bimi
Type: TXT
Value: v=BIMI1; l=link_to_logo; a=link_to_certificate;
```

----------------------------------------

TITLE: Default Supabase Authentication URL Format
DESCRIPTION: This code snippet shows the default URL format generated by Supabase for authentication emails, using a `supabase.co` domain. These links are used for actions like email verification or password resets.
SOURCE: https://resend.com/docs/knowledge-base/how-do-i-maximize-deliverability-for-supabase-auth-emails

LANGUAGE: URL
CODE:
```
https://039357829384.supabase.co/auth/v1/{code}
```

----------------------------------------

TITLE: Simulate Successful Email Delivery with Resend
DESCRIPTION: This test email address allows you to simulate a successful email delivery event. Sending an email to this address will confirm that your email sending process is working correctly and the email is delivered.
SOURCE: https://resend.com/docs/dashboard/emails/send-test-emails

LANGUAGE: text
CODE:
```
delivered@resend.dev
```

----------------------------------------

TITLE: Liferay JavaMail SMTP Configuration Properties
DESCRIPTION: These are additional JavaMail properties that can be configured within Liferay to ensure secure and authenticated communication with the Resend SMTP server. They enable SMTP authentication and enforce the use of StartTLS for encrypted connections.
SOURCE: https://resend.com/docs/send-with-liferay-smtp

LANGUAGE: Java
CODE:
```
mail.smtp.auth=true
mail.smtp.starttls.enable=true
mail.smtp.starttls.required=true
```

----------------------------------------

TITLE: Configure MX SPF Record for Resend Domain on Vercel
DESCRIPTION: This section outlines the steps to add an MX (Mail Exchanger) record to your Vercel DNS settings, which is crucial for email deliverability with Resend. It includes details on the record type, name, value, and priority, along with important considerations for omitting the domain from values and handling priority conflicts.
SOURCE: https://resend.com/docs/knowledge-base/vercel

LANGUAGE: APIDOC
CODE:
```
MX SPF Record Configuration:

Instructions:
1. Type 'send' for the 'Name' of the record in Vercel.
2. Expand the 'Type' dropdown and select 'MX'.
3. Copy the record value from Resend into the 'Value' field in Vercel.
4. Add '10' for the 'Priority'.
5. Select 'Add'.

Notes:
- Omit your domain from the record values (e.g., use 'send' instead of 'send.example.com').
- Do not use the same priority for multiple records. If Priority '10' is already in use, try '11' or '12'.

Record Field Mapping (Vercel to Resend):
- Type: MX Record
- Name: send
- Value: feedback-smtp.us-east-1.amazonses.com (Example)
- TTL: Use Vercel default (60)
- Priority: 10
```

----------------------------------------

TITLE: Bypass CSRF Protection for Resend Webhooks in Laravel
DESCRIPTION: This snippet demonstrates how to add a URI exception to Laravel's `VerifyCsrfToken` middleware. It allows Resend webhook requests to bypass CSRF protection, ensuring they are processed correctly without being blocked by Laravel's security features.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
protected $except = [
    'resend/*',
];
```

----------------------------------------

TITLE: Configure Laravel .env for Resend SMTP
DESCRIPTION: This snippet shows how to configure your Laravel application's .env file with Resend SMTP details. It sets the mailer to SMTP, specifies the Resend host and port, provides authentication credentials, and defines the encryption method and sender information.
SOURCE: https://resend.com/docs/send-with-laravel-smtp

LANGUAGE: dotenv
CODE:
```
MAIL_MAILER=smtp
MAIL_HOST=smtp.resend.com
MAIL_PORT=587
MAIL_USERNAME=resend
MAIL_PASSWORD=re_xxxxxxxxx
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=onboarding@resend.dev
MAIL_FROM_NAME=Acme
```

----------------------------------------

TITLE: Simulate Email Bounce with Resend
DESCRIPTION: This test email address allows you to simulate an email bounce event, indicating that the recipient's email provider rejected your email. Sending to this address will generate an SMTP 550 5.1.1 ("Unknown User") response code, useful for testing bounce handling logic.
SOURCE: https://resend.com/docs/dashboard/emails/send-test-emails

LANGUAGE: text
CODE:
```
bounced@resend.dev
```

----------------------------------------

TITLE: Configure MX SPF Record for Resend on Cloudflare
DESCRIPTION: This section details the process of adding an MX (Mail Exchange) record to Cloudflare for Resend, which is crucial for email deliverability. It specifies the required fields such as Type, Name, Mail Server (Value), Priority, and TTL, ensuring proper routing of email traffic. The configuration helps in authenticating outgoing emails from Resend through your domain.
SOURCE: https://resend.com/docs/knowledge-base/cloudflare

LANGUAGE: APIDOC
CODE:
```
MX SPF Record Configuration:

Instructions for Cloudflare:
1. Set the Type to `MX`.
2. Type `send` for the `Name` of the record.
3. Copy the MX Value from Resend into the `Mail Server` field.
4. Use the default `Auto` for `TTL`.
5. Add `10` for the `Priority`.
6. Select `Save`.

Field Mapping (Cloudflare to Resend):
- Type: `MX` (Resend Type)
- Name: `send` (Resend Name)
- Mail Server: `feedback-smtp.us-east-1.amazonses.com` (Resend Value)
- Priority: `10` (Resend Priority)

Important Notes:
- Omit your domain from the record values (e.g., use `send` instead of `send.example.com`).
- Do not use the same priority for multiple records; if '10' is taken, try '11' or '12'.
```

----------------------------------------

TITLE: Configuring MX Record for Resend Email Sending
DESCRIPTION: This snippet demonstrates how to set up an MX record for a subdomain ('send.resend.com') to direct outgoing emails through Resend's underlying service (Amazon SES). This configuration ensures it doesn't conflict with the root domain's existing MX records, with a suggested priority of 10.
SOURCE: https://resend.com/docs/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records

LANGUAGE: DNS
CODE:
```
send.resend.com     MX    10 feedback-smtp.us-east-1.amazonses.com
```

----------------------------------------

TITLE: Set Resend as Default Mail Driver and From Address in Laravel .env
DESCRIPTION: This snippet updates the Laravel `.env` file to set 'resend' as the default mail driver. It also configures the global 'from' email address and name for all outgoing emails sent via Laravel's mail system, ensuring they originate from a verified domain.
SOURCE: https://resend.com/docs/send-with-laravel

LANGUAGE: PHP
CODE:
```
MAIL_MAILER=resend
MAIL_FROM_ADDRESS=onboarding@resend.dev
MAIL_FROM_NAME=Acme
```

----------------------------------------

TITLE: Set Action Mailer Delivery Method to Resend
DESCRIPTION: Configures Rails Action Mailer to use Resend as its delivery method by adding this line to your environment configuration file (`config/environments/environment.rb`). This directs all Action Mailer emails through Resend.
SOURCE: https://resend.com/docs/send-with-rails

LANGUAGE: Ruby
CODE:
```
config.action_mailer.delivery_method = :resend
```