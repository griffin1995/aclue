# Database Security Automation Configuration
# aclue Supabase PostgreSQL Environment Settings

# ===========================================
# DATABASE CONNECTION CONFIGURATION
# ===========================================

# Supabase PostgreSQL Connection (Production)
export DB_HOST="db.usdgihyvmwxtbspkdmuj.supabase.co"
export DB_PORT="5432"
export DB_NAME="postgres"
export DB_USER="postgres"

# Database Password (SET THIS BEFORE RUNNING SCANS)
# IMPORTANT: Set SUPABASE_DB_PASSWORD environment variable
# export SUPABASE_DB_PASSWORD="your_supabase_database_password_here"

# Connection Settings
export DB_SSL_MODE="require"
export DB_CONNECT_TIMEOUT="10"

# ===========================================
# SECURITY TOOL CONFIGURATION
# ===========================================

# PGDSAT (KloudDB Shield) Configuration
export PGDSAT_OUTPUT_FORMAT="json"
export PGDSAT_VERBOSE="true"
export PGDSAT_ALL_CHECKS="true"

# pip-audit Configuration
export PIP_AUDIT_FORMAT="json"
export PIP_AUDIT_CACHE_DIR="/tmp/pip-audit-cache"
export PIP_AUDIT_DESC="true"

# Safety Configuration
export SAFETY_JSON="true"
export SAFETY_FULL_REPORT="true"

# npm audit Configuration
export NPM_AUDIT_LEVEL="moderate"
export NPM_AUDIT_JSON="true"

# Snyk Configuration
export SNYK_JSON="true"
# Set SNYK_TOKEN for authenticated scans: export SNYK_TOKEN="your_snyk_token"

# Retire.js Configuration
export RETIRE_OUTPUT_FORMAT="json"
export RETIRE_VERBOSE="true"

# OSV-Scanner Configuration
export OSV_SCANNER_FORMAT="json"

# SQLFluff Configuration
export SQLFLUFF_DIALECT="postgres"
export SQLFLUFF_FORMAT="json"
export SQLFLUFF_MAX_LINE_LENGTH="120"

# ===========================================
# REPORT CONFIGURATION
# ===========================================

# Report Settings
export REPORTS_RETENTION_DAYS="30"
export GENERATE_HTML_REPORT="true"
export GENERATE_JSON_SUMMARY="true"
export INCLUDE_EXECUTION_LOGS="true"

# Alert Thresholds
export CRITICAL_ALERT_THRESHOLD="1"
export HIGH_ALERT_THRESHOLD="5"
export TOTAL_VULNERABILITY_THRESHOLD="20"

# ===========================================
# AUTOMATION CONFIGURATION
# ===========================================

# Scan Schedule (for cron integration)
export DAILY_SCAN_TIME="02:00"
export WEEKLY_FULL_SCAN_DAY="sunday"
export MONTHLY_COMPLIANCE_SCAN_DAY="1"

# Notification Settings (configure as needed)
export ENABLE_EMAIL_ALERTS="false"
export ALERT_EMAIL=""
export ENABLE_SLACK_ALERTS="false"
export SLACK_WEBHOOK_URL=""

# ===========================================
# SECURITY BEST PRACTICES
# ===========================================

# File Permissions
umask 0027

# Secure temporary directory
export TMPDIR="/tmp"
export SECURE_TEMP_DIR="/tmp/db-security-$$"

# Logging Configuration
export LOG_LEVEL="INFO"
export ENABLE_DEBUG_LOGGING="false"

# ===========================================
# USAGE INSTRUCTIONS
# ===========================================

# To use this configuration:
# 1. Copy this file to your environment
# 2. Set the SUPABASE_DB_PASSWORD environment variable
# 3. Configure any optional settings (Snyk token, alerts, etc.)
# 4. Source this file before running scans: source security-config.env
# 5. Run the master security scan: ./master-security-scan.sh

# Example setup commands:
# export SUPABASE_DB_PASSWORD="your_actual_password"
# source /path/to/security-config.env
# ./master-security-scan.sh

# For automated scanning, add to crontab:
# 0 2 * * * cd /path/to/database && source security-config.env && ./master-security-scan.sh

# ===========================================
# TROUBLESHOOTING
# ===========================================

# Common issues and solutions:
# 1. Database connection timeout: Check DB_HOST, DB_PORT, and firewall settings
# 2. Permission denied: Ensure scripts are executable (chmod +x *.sh)
# 3. Missing dependencies: Install required tools in virtual environment
# 4. Large scan times: Consider reducing scope or running scans during off-peak hours
# 5. Report generation errors: Check disk space and write permissions

echo "Database Security Configuration Loaded"
echo "Project: aclue Production Platform"
echo "Database: ${DB_HOST}:${DB_PORT}/${DB_NAME}"
echo "Configuration ready for security scanning"