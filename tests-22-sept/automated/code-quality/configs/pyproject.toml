# Python Code Quality Tools Configuration
# Centralised configuration for Black, isort, mypy, and other tools

[tool.black]
# Maximum line length
line-length = 88
# Python version compatibility
target-version = ['py311']
# Files to include
include = '\.pyi?$'
# Files to exclude
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | __pycache__
)/
'''

[tool.isort]
# Compatibility with Black
profile = "black"
# Maximum line length
line_length = 88
# Multi-line output mode
multi_line_output = 3
# Use trailing comma
include_trailing_comma = true
# Force grid wrap
force_grid_wrap = 0
# Combine star imports
combine_as_imports = true
# Known third party libraries
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "pytest",
    "uvicorn",
    "starlette",
    "httpx",
    "redis",
    "celery",
    "boto3",
    "requests",
    "numpy",
    "pandas",
    "matplotlib",
    "seaborn"
]
# Known first party
known_first_party = ["app"]
# Skip files
skip = [
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".tox",
    "venv",
    ".venv",
    "node_modules"
]

[tool.mypy]
# Python version
python_version = "3.11"
# Warn about unused configs
warn_unused_configs = true
# Disallow untyped definitions
disallow_untyped_defs = true
# Disallow incomplete defs
disallow_incomplete_defs = true
# Check untyped defs
check_untyped_defs = true
# Disallow untyped decorators
disallow_untyped_decorators = true
# No implicit optional
no_implicit_optional = true
# Warn about return types
warn_return_any = true
# Warn about unreachable code
warn_unreachable = true
# Warn about unused ignores
warn_unused_ignores = true
# Warn about redundant casts
warn_redundant_casts = true
# Strict equality
strict_equality = true
# Show error codes
show_error_codes = true
# Show column numbers
show_column_numbers = true
# Pretty output
pretty = true
# Exclude patterns
exclude = [
    '^venv/',
    '^\.venv/',
    '^build/',
    '^dist/',
    '^__pycache__/',
    '^node_modules/',
    '^\.git/',
    '\.pyc$'
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "test_*"
]
# Allow untyped defs in tests
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "gunicorn.*",
    "celery.*",
    "redis.*",
    "boto3.*",
    "botocore.*"
]
ignore_missing_imports = true

[tool.bandit]
# Exclude test files from security analysis
exclude_dirs = ["tests", "test_*"]
# Skip specific test IDs
skips = [
    "B101",  # assert_used - common in tests
    "B601",  # paramiko_calls - may be intentional
    "B602",  # subprocess_popen_with_shell_equals_true
]

# Security analysis levels
[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]
shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput"
]
subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run"
]

[tool.coverage.run]
# Source directories
source = ["app", "backend"]
# Exclude patterns
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
# Minimum coverage percentage
precision = 2
show_missing = true
skip_covered = false
# Exclude lines
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Add current directory to Python path
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html:tests-22-sept/automated/code-quality/reports/coverage-html",
    "--cov-report=xml:tests-22-sept/automated/code-quality/reports/coverage.xml"
]
# Markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "database: marks tests as database tests"
]
# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]