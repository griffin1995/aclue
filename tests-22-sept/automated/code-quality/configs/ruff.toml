# Ruff Configuration - Ultra-fast Python linting
# Maximum rules enabled for comprehensive code analysis

[tool.ruff]
# Scan targets
target-version = "py311"
line-length = 88
indent-width = 4

# Include all Python files
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
    "*.egg-info",
]

# Enable all available rule sets for maximum analysis
[tool.ruff.lint]
# Enable ALL available rule categories for comprehensive analysis
select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    "C90",  # mccabe complexity
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",    # pydocstyle
    "DJ",   # flake8-django
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "EM",   # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "FURB", # refurb
    "G",    # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "NPY",  # numpy
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff-specific
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",   # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]

# Specific rules to ignore (minimal list for practical usage)
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in `__init__`
    "COM812", # Missing trailing comma (conflicts with formatter)
    "ISC001", # Single line implicit string concatenation (conflicts with formatter)
]

# Allow autofix for all rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when they are prefixed with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around equals signs
indent-style = "space"
# Respect magic trailing comma
skip-magic-trailing-comma = false
# Line endings
line-ending = "auto"

[tool.ruff.lint.mccabe]
# Complexity threshold
max-complexity = 10

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[tool.ruff.lint.pylint]
# Maximum number of arguments for function/method
max-args = 5
# Maximum number of branches for function/method body
max-branches = 12
# Maximum number of return statements in function/method body
max-returns = 6
# Maximum number of statements in function/method body
max-statements = 50

[tool.ruff.lint.isort]
# Combine multiple imports from same module
combine-as-imports = true
# Use trailing comma
split-on-trailing-comma = true
# Order imports by type then alphabetically
order-by-type = true