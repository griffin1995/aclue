# Pylint Configuration - Comprehensive Python Code Analysis
# Maximum analysis depth configuration

[MASTER]
# Specify a score threshold to be exceeded before program exits with error
fail-under = 8.0

# Add files or directories to the blacklist
ignore = CVS,.git,__pycache__,.pytest_cache,node_modules,venv,.venv,env,.env

# Use multiple processes to speed up Pylint
jobs = 0

# Control the amount of potential inferred values when inferring a single object
limit-inference-results = 100

# List of plugins to load
load-plugins =

# Pickle collected data for later comparisons
persistent = yes

# When enabled, pylint would attempt to guess common misconfiguration
suggestion-mode = yes

# Allow loading of arbitrary C extensions
unsafe-load-any-extension = no

[MESSAGES CONTROL]
# Enable the message, report, category or checker with the given id(s)
enable =
    useless-suppression,
    deprecated-pragma,
    use-symbolic-message-instead

# Disable the message, report, category or checker with the given id(s)
disable =
    raw-checker-failed,
    bad-inline-option,
    locally-disabled,
    file-ignored,
    suppressed-message,
    useless-suppression,
    deprecated-pragma,
    use-symbolic-message-instead,
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring

[REPORTS]
# Template used to display messages
msg-template = {path}:{line}:{column}: {msg_id}: {msg} ({symbol})

# Set the output format
output-format = text

# Tells whether to display a full report or only the messages
reports = yes

# Activate the evaluation score
score = yes

[REFACTORING]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns
never-returning-functions = sys.exit,argparse.parse_error

[LOGGING]
# The type of string formatting that logging methods do
logging-format-style = old

# Logging modules to check that the string format arguments are in logging function parameter format
logging-modules = logging

[MISCELLANEOUS]
# List of note tags to take in consideration
notes = FIXME,XXX,TODO,BUG,HACK

[SIMILARITIES]
# Comments are removed from the similarity computation
ignore-comments = yes

# Docstrings are removed from the similarity computation
ignore-docstrings = yes

# Imports are removed from the similarity computation
ignore-imports = yes

# Signatures are removed from the similarity computation
ignore-signatures = yes

# Minimum lines number of a similarity
min-similarity-lines = 4

[SPELLING]
# Limits count of emitted suggestions for spelling mistakes
max-spelling-suggestions = 4

# Spelling dictionary name
spelling-dict =

# List of comma separated words that should not be checked
spelling-ignore-words =

# A path to a file that contains the private dictionary
spelling-private-dict-file =

# Tells whether to store unknown words to indicated private dictionary
spelling-store-unknown-words = no

[STRING]
# This flag controls whether inconsistent-quotes generates a warning
check-quote-consistency = yes

# This flag controls whether the implicit-str-concat should generate a warning
check-str-concat-over-line-jumps = no

[TYPECHECK]
# List of decorators that produce context managers
contextmanager-decorators = contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference system
generated-members =

# Tells whether missing members accessed in mixin class should be ignored
ignore-mixin-members = yes

# Tells whether to warn about missing members when the owner of the attribute is inferred to be None
ignore-none = yes

# This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring
ignore-on-opaque-inference = yes

# List of symbolic message names to ignore for Mixin class
ignored-checks-for-mixins = no-member,not-async-context-manager,not-context-manager,attribute-defined-outside-init

# List of class names for which member attributes should not be checked
ignored-classes = optparse.Values,thread._local,_thread._local,argparse.Namespace

# Show a hint with the correct naming format instead of just indicating the wrong name
include-naming-hint = no

# List of module names for which member attributes should not be checked
ignored-modules =

# List of classes names for which member attributes should not be checked
missing-member-hint = yes

# The minimum edit distance a name should have in order to be considered a similar match for a missing member name
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins
mixin-class-rgx = .*[Mm]ixin

[VARIABLES]
# List of additional names supposed to be defined in builtins
additional-builtins =

# Tells whether unused global variables should be treated as a violation
allow-global-unused-variables = yes

# List of names allowed to shadow builtins
allowed-redefined-builtins =

# List of strings which can identify a callback function by name
callbacks = cb_,_cb

# A regular expression matching the name of dummy variables
dummy-variables-rgx = _+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored
ignored-argument-names = _.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files
init-import = no

# List of qualified module names which can have objects that can redefine builtins
redefining-builtins-modules = six.moves,past.builtins,future.builtins,builtins,io

[FORMAT]
# Expected format of line ending
expected-line-ending-format = LF

# Regexp for a line that is allowed to be longer than the limit
ignore-long-lines = ^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line
indent-after-paren = 4

# String used as indentation unit
indent-string = '    '

# Maximum number of characters on a single line
max-line-length = 88

# Maximum number of lines in a module
max-module-lines = 1000

# Allow the body of a class to be on the same line as the declaration
single-line-class-stmt = no

# Allow the body of an if to be on the same line as the test
single-line-if-stmt = no

[BASIC]
# Naming style matching correct argument names
argument-naming-style = snake_case

# Regular expression matching correct argument names
argument-rgx = [a-z_][a-z0-9_]{2,30}$

# Naming style matching correct attribute names
attr-naming-style = snake_case

# Regular expression matching correct attribute names
attr-rgx = [a-z_][a-z0-9_]{2,30}$

# Bad variable names which should always be refused
bad-names = foo,bar,baz,toto,tutu,tata

# Bad variable names regexes
bad-names-rgxs =

# Naming style matching correct class attribute names
class-attribute-naming-style = any

# Regular expression matching correct class attribute names
class-attribute-rgx = ([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Naming style matching correct class constant names
class-const-naming-style = UPPER_CASE

# Regular expression matching correct class constant names
class-const-rgx = (([A-Z_][A-Z0-9_]*)|(__.*__))$

# Naming style matching correct class names
class-naming-style = PascalCase

# Regular expression matching correct class names
class-rgx = [A-Z_][a-zA-Z0-9]+$

# Naming style matching correct constant names
const-naming-style = UPPER_CASE

# Regular expression matching correct constant names
const-rgx = (([A-Z_][A-Z0-9_]*)|(__.*__))$

# Minimum line length for functions/classes that require docstrings
docstring-min-length = -1

# Naming style matching correct function names
function-naming-style = snake_case

# Regular expression matching correct function names
function-rgx = [a-z_][a-z0-9_]{2,30}$

# Good variable names which should always be accepted
good-names = i,j,k,ex,Run,_

# Good variable names regexes
good-names-rgxs =

# Include a hint for the correct naming format with invalid-name
include-naming-hint = no

# Naming style matching correct inline iteration names
inlinevar-naming-style = any

# Regular expression matching correct inline iteration names
inlinevar-rgx = [A-Za-z_][A-Za-z0-9_]*$

# Naming style matching correct method names
method-naming-style = snake_case

# Regular expression matching correct method names
method-rgx = [a-z_][a-z0-9_]{2,30}$

# Naming style matching correct module names
module-naming-style = snake_case

# Regular expression matching correct module names
module-rgx = (([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles
name-group =

# Regular expression which should only match function or class names that do not require a docstring
no-docstring-rgx = ^_

# List of decorators that produce properties
property-classes = abc.abstractproperty

# Regular expression matching correct type variable names
typevar-rgx = [A-Z][a-zA-Z0-9_]*$

# Naming style matching correct variable names
variable-naming-style = snake_case

# Regular expression matching correct variable names
variable-rgx = [a-z_][a-z0-9_]{2,30}$

[IMPORTS]
# List of modules that can be imported at any level
allow-any-import-level =

# Allow wildcard imports from modules that define __all__
allow-wildcard-with-all = no

# Analyse import fallback blocks
analyse-fallback-blocks = no

# Deprecated modules which should not be used
deprecated-modules =

# Output a graph (.gv or any supported image format) of external dependencies
ext-import-graph =

# Output a graph (.gv or any supported image format) of all (i.e. internal and external) dependencies
import-graph =

# Output a graph (.gv or any supported image format) of internal dependencies
int-import-graph =

# Force import order to recognize a module as part of the standard compatibility libraries
known-standard-library =

# Force import order to recognize a module as part of a third party library
known-third-party = enchant

# Couples of modules and preferred modules
preferred-modules =

[CLASSES]
# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods = no

# List of method names used to declare (i.e. assign) instance attributes
defining-attr-methods = __init__,__new__,setUp,__post_init__

# List of member names, which should be excluded from the protected access warning
exclude-protected = _asdict,_fields,_replace,_source,_make

# List of valid names for the first argument in a class method
valid-classmethod-first-arg = cls

# List of valid names for the first argument in a metaclass class method
valid-metaclass-classmethod-first-arg = cls

[DESIGN]
# List of regular expressions of class ancestor names to ignore when counting public methods
exclude-too-few-public-methods =

# List of qualified class names to ignore when counting class parents
ignored-parents =

# Maximum number of arguments for function / method
max-args = 5

# Maximum number of attributes for a class
max-attributes = 7

# Maximum number of boolean expressions in an if statement
max-bool-expr = 5

# Maximum number of branch for function / method body
max-branches = 12

# Maximum number of locals for function / method body
max-locals = 15

# Maximum number of parents for a class
max-parents = 7

# Maximum number of public methods for a class
max-public-methods = 20

# Maximum number of return / yield for function / method body
max-returns = 6

# Maximum number of statements in function / method body
max-statements = 50

# Minimum number of public methods for a class
min-public-methods = 2

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught
overgeneral-exceptions = BaseException,Exception